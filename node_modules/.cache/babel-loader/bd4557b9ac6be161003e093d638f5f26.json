{"ast":null,"code":"var _jsxFileName = \"/Users/sidshekhar/Documents/interface/src/components/NumericalInput/index.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { escapeRegExp } from '../../utils';\nconst StyledInput = styled.input`\n  color: ${({\n  error,\n  theme\n}) => error ? theme.red1 : theme.text1};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: ${({\n  theme\n}) => theme.bg1};\n  font-size: ${({\n  fontSize\n}) => fontSize !== null && fontSize !== void 0 ? fontSize : '24px'};\n  text-align: ${({\n  align\n}) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({\n  theme\n}) => theme.text4};\n  }\n`;\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`); // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  ...rest\n}) {\n  const enforcer = nextUserInput => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(StyledInput, Object.assign({}, rest, {\n    value: value,\n    onChange: event => {\n      // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n      enforcer(event.target.value.replace(/,/g, '.'));\n    } // universal input options\n    ,\n    inputMode: \"decimal\",\n    title: \"Token Amount\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\" // text-specific options\n    ,\n    type: \"text\",\n    pattern: \"^[0-9]*[.,]?[0-9]*$\",\n    placeholder: placeholder || '0.0',\n    minLength: 1,\n    maxLength: 79,\n    spellCheck: \"false\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }));\n});\nexport default Input; // const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/components/NumericalInput/index.tsx"],"names":["React","styled","escapeRegExp","StyledInput","input","error","theme","red1","text1","bg1","fontSize","align","text4","inputRegex","RegExp","Input","memo","InnerInput","value","onUserInput","placeholder","rest","enforcer","nextUserInput","test","event","target","replace"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,YAAT,QAA6B,aAA7B;AAEA,MAAMC,WAAW,GAAGF,MAAM,CAACG,KAA8D;AACzF,WAAW,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAuBD,KAAK,GAAGC,KAAK,CAACC,IAAT,GAAgBD,KAAK,CAACE,KAAO;AACpE;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,CAAC;AAAEF,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACG,GAAI;AAC/C,eAAe,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkBA,QAAlB,aAAkBA,QAAlB,cAAkBA,QAAlB,GAA8B,MAAO;AACpD,gBAAgB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,IAAIA,KAAM;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC;AAAEL,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACM,KAAM;AACxC;AACA,CAjCA;AAmCA,MAAMC,UAAU,GAAGC,MAAM,CAAE,wBAAF,CAAzB,C,CAAoD;;AAEpD,OAAO,MAAMC,KAAK,GAAGf,KAAK,CAACgB,IAAN,CAAW,SAASC,UAAT,CAAoB;AAClDC,EAAAA,KADkD;AAElDC,EAAAA,WAFkD;AAGlDC,EAAAA,WAHkD;AAIlD,KAAGC;AAJ+C,CAApB,EAWwC;AACtE,QAAMC,QAAQ,GAAIC,aAAD,IAA2B;AAC1C,QAAIA,aAAa,KAAK,EAAlB,IAAwBV,UAAU,CAACW,IAAX,CAAgBtB,YAAY,CAACqB,aAAD,CAA5B,CAA5B,EAA0E;AACxEJ,MAAAA,WAAW,CAACI,aAAD,CAAX;AACD;AACF,GAJD;;AAMA,sBACE,oBAAC,WAAD,oBACMF,IADN;AAEE,IAAA,KAAK,EAAEH,KAFT;AAGE,IAAA,QAAQ,EAAEO,KAAK,IAAI;AACjB;AACAH,MAAAA,QAAQ,CAACG,KAAK,CAACC,MAAN,CAAaR,KAAb,CAAmBS,OAAnB,CAA2B,IAA3B,EAAiC,GAAjC,CAAD,CAAR;AACD,KANH,CAOE;AAPF;AAQE,IAAA,SAAS,EAAC,SARZ;AASE,IAAA,KAAK,EAAC,cATR;AAUE,IAAA,YAAY,EAAC,KAVf;AAWE,IAAA,WAAW,EAAC,KAXd,CAYE;AAZF;AAaE,IAAA,IAAI,EAAC,MAbP;AAcE,IAAA,OAAO,EAAC,qBAdV;AAeE,IAAA,WAAW,EAAEP,WAAW,IAAI,KAf9B;AAgBE,IAAA,SAAS,EAAE,CAhBb;AAiBE,IAAA,SAAS,EAAE,EAjBb;AAkBE,IAAA,UAAU,EAAC,OAlBb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAsBD,CAxCoB,CAAd;AA0CP,eAAeL,KAAf,C,CAEA","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { escapeRegExp } from '../../utils'\n\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\n  color: ${({ error, theme }) => (error ? theme.red1 : theme.text1)};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: ${({ theme }) => theme.bg1};\n  font-size: ${({ fontSize }) => fontSize ?? '24px'};\n  text-align: ${({ align }) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.text4};\n  }\n`\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  ...rest\n}: {\n  value: string | number\n  onUserInput: (input: string) => void\n  error?: boolean\n  fontSize?: string\n  align?: 'right' | 'left'\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  return (\n    <StyledInput\n      {...rest}\n      value={value}\n      onChange={event => {\n        // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n        enforcer(event.target.value.replace(/,/g, '.'))\n      }}\n      // universal input options\n      inputMode=\"decimal\"\n      title=\"Token Amount\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\n      placeholder={placeholder || '0.0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n})\n\nexport default Input\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n"]},"metadata":{},"sourceType":"module"}