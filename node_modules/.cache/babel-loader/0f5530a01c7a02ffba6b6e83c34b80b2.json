{"ast":null,"code":"import { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useActiveWeb3React } from '../../hooks';\nimport { addPopup, ApplicationModal, removePopup, setOpenModal } from './actions';\nexport function useBlockNumber() {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  return useSelector(state => state.application.blockNumber[chainId !== null && chainId !== void 0 ? chainId : -1]);\n}\nexport function useModalOpen(modal) {\n  const openModal = useSelector(state => state.application.openModal);\n  return openModal === modal;\n}\nexport function useToggleModal(modal) {\n  const open = useModalOpen(modal);\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(setOpenModal(open ? null : modal)), [dispatch, modal, open]);\n}\nexport function useOpenModal(modal) {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(setOpenModal(modal)), [dispatch, modal]);\n}\nexport function useCloseModals() {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(setOpenModal(null)), [dispatch]);\n}\nexport function useWalletModalToggle() {\n  return useToggleModal(ApplicationModal.WALLET);\n}\nexport function useToggleSettingsMenu() {\n  return useToggleModal(ApplicationModal.SETTINGS);\n}\nexport function useShowClaimPopup() {\n  return useModalOpen(ApplicationModal.CLAIM_POPUP);\n}\nexport function useToggleShowClaimPopup() {\n  return useToggleModal(ApplicationModal.CLAIM_POPUP);\n}\nexport function useToggleSelfClaimModal() {\n  return useToggleModal(ApplicationModal.SELF_CLAIM);\n}\nexport function useToggleDelegateModal() {\n  return useToggleModal(ApplicationModal.DELEGATE);\n}\nexport function useToggleVoteModal() {\n  return useToggleModal(ApplicationModal.VOTE);\n} // returns a function that allows adding a popup\n\nexport function useAddPopup() {\n  const dispatch = useDispatch();\n  return useCallback((content, key) => {\n    dispatch(addPopup({\n      content,\n      key\n    }));\n  }, [dispatch]);\n} // returns a function that allows removing a popup via its key\n\nexport function useRemovePopup() {\n  const dispatch = useDispatch();\n  return useCallback(key => {\n    dispatch(removePopup({\n      key\n    }));\n  }, [dispatch]);\n} // get the list of active popups\n\nexport function useActivePopups() {\n  const list = useSelector(state => state.application.popupList);\n  return useMemo(() => list.filter(item => item.show), [list]);\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/state/application/hooks.ts"],"names":["useCallback","useMemo","useDispatch","useSelector","useActiveWeb3React","addPopup","ApplicationModal","removePopup","setOpenModal","useBlockNumber","chainId","state","application","blockNumber","useModalOpen","modal","openModal","useToggleModal","open","dispatch","useOpenModal","useCloseModals","useWalletModalToggle","WALLET","useToggleSettingsMenu","SETTINGS","useShowClaimPopup","CLAIM_POPUP","useToggleShowClaimPopup","useToggleSelfClaimModal","SELF_CLAIM","useToggleDelegateModal","DELEGATE","useToggleVoteModal","VOTE","useAddPopup","content","key","useRemovePopup","useActivePopups","list","popupList","filter","item","show"],"mappings":"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","sourcesContent":["import { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useActiveWeb3React } from '../../hooks'\nimport { AppDispatch, AppState } from '../index'\nimport { addPopup, ApplicationModal, PopupContent, removePopup, setOpenModal } from './actions'\n\nexport function useBlockNumber(): number | undefined {\n  const { chainId } = useActiveWeb3React()\n\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1])\n}\n\nexport function useModalOpen(modal: ApplicationModal): boolean {\n  const openModal = useSelector((state: AppState) => state.application.openModal)\n  return openModal === modal\n}\n\nexport function useToggleModal(modal: ApplicationModal): () => void {\n  const open = useModalOpen(modal)\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(() => dispatch(setOpenModal(open ? null : modal)), [dispatch, modal, open])\n}\n\nexport function useOpenModal(modal: ApplicationModal): () => void {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(() => dispatch(setOpenModal(modal)), [dispatch, modal])\n}\n\nexport function useCloseModals(): () => void {\n  const dispatch = useDispatch<AppDispatch>()\n  return useCallback(() => dispatch(setOpenModal(null)), [dispatch])\n}\n\nexport function useWalletModalToggle(): () => void {\n  return useToggleModal(ApplicationModal.WALLET)\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  return useToggleModal(ApplicationModal.SETTINGS)\n}\n\nexport function useShowClaimPopup(): boolean {\n  return useModalOpen(ApplicationModal.CLAIM_POPUP)\n}\n\nexport function useToggleShowClaimPopup(): () => void {\n  return useToggleModal(ApplicationModal.CLAIM_POPUP)\n}\n\nexport function useToggleSelfClaimModal(): () => void {\n  return useToggleModal(ApplicationModal.SELF_CLAIM)\n}\n\nexport function useToggleDelegateModal(): () => void {\n  return useToggleModal(ApplicationModal.DELEGATE)\n}\n\nexport function useToggleVoteModal(): () => void {\n  return useToggleModal(ApplicationModal.VOTE)\n}\n\n// returns a function that allows adding a popup\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch()\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({ content, key }))\n    },\n    [dispatch]\n  )\n}\n\n// returns a function that allows removing a popup via its key\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch()\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({ key }))\n    },\n    [dispatch]\n  )\n}\n\n// get the list of active popups\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useSelector((state: AppState) => state.application.popupList)\n  return useMemo(() => list.filter(item => item.show), [list])\n}\n"]},"metadata":{},"sourceType":"module"}