{"ast":null,"code":"var _jsxFileName = \"/Users/sidshekhar/Documents/interface/src/components/earn/BridgeMigratorModal.tsx\";\nimport React, { useState, useCallback } from 'react';\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline';\nimport Modal from '../Modal';\nimport { AutoColumn } from '../Column';\nimport styled from 'styled-components';\nimport { RowBetween } from '../Row';\nimport { TYPE, CloseIcon } from '../../theme';\nimport { ButtonConfirmed, ButtonError } from '../Button';\nimport ProgressCircles from '../ProgressSteps';\nimport CurrencyInputPanel from '../CurrencyInputPanel';\nimport { useActiveWeb3React } from '../../hooks';\nimport { maxAmountSpend } from '../../utils/maxAmountSpend';\nimport { useBridgeMigratorContract, usePairContract } from '../../hooks/useContract';\nimport { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback';\nimport { splitSignature } from 'ethers/lib/utils';\nimport { useDerivedStakeInfo } from '../../state/stake/hooks';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport { LoadingView, SubmittedView } from '../ModalViews';\nimport { useTranslation } from 'react-i18next';\nimport { BRIDGE_MIGRATOR_ADDRESS } from '../../constants';\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n  padding: 1rem;\n`;\nexport default function BridgeMigratorModal({\n  isOpen,\n  onDismiss,\n  pairFrom,\n  pairTo,\n  userLiquidityUnstaked\n}) {\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React(); // track and parse user input\n\n  const [typedValue, setTypedValue] = useState('');\n  const {\n    parsedAmount,\n    error\n  } = useDerivedStakeInfo(typedValue, pairFrom.liquidityToken, userLiquidityUnstaked); // state for pending and submitted txn views\n\n  const addTransaction = useTransactionAdder();\n  const [attempting, setAttempting] = useState(false);\n  const [hash, setHash] = useState();\n  const wrappedOnDismiss = useCallback(() => {\n    setHash(undefined);\n    setAttempting(false);\n    onDismiss();\n  }, [onDismiss]); // pair contract for this token to be staked\n\n  const pairContract = usePairContract(pairFrom.liquidityToken.address); // approval data for stake\n\n  const deadline = useTransactionDeadline();\n  const {\n    t\n  } = useTranslation();\n  const [signatureData, setSignatureData] = useState(null);\n  const [approval, approveCallback] = useApproveCallback(parsedAmount, BRIDGE_MIGRATOR_ADDRESS);\n  const bridgeMigratorContract = useBridgeMigratorContract();\n\n  async function onMigrate() {\n    setAttempting(true);\n\n    if (bridgeMigratorContract && parsedAmount && deadline && account) {\n      if (approval === ApprovalState.APPROVED) {\n        await bridgeMigratorContract.migrateLiquidity(pairFrom.liquidityToken.address, pairTo.liquidityToken.address, account, `0x${parsedAmount.raw.toString(16)}`, deadline.toNumber()).then(response => {\n          addTransaction(response, {\n            summary: 'Migrate liquidity'\n          });\n          setHash(response.hash);\n        }).catch(error => {\n          setAttempting(false);\n          console.error(error);\n        });\n      } else if (signatureData) {\n        bridgeMigratorContract.migrateLiquidityWithPermit(pairFrom.liquidityToken.address, pairTo.liquidityToken.address, account, `0x${parsedAmount.raw.toString(16)}`, signatureData.deadline, signatureData.v, signatureData.r, signatureData.s).then(response => {\n          addTransaction(response, {\n            summary: 'Migrate liquidity'\n          });\n          setHash(response.hash);\n        }).catch(error => {\n          setAttempting(false);\n          console.error(error);\n        });\n      } else {\n        setAttempting(false);\n        throw new Error('Attempting to migrate without approval or a signature. Please contact support.');\n      }\n    }\n  } // wrapped onUserInput to clear signatures\n\n\n  const onUserInput = useCallback(typedValue => {\n    setSignatureData(null);\n    setTypedValue(typedValue);\n  }, []); // used for max input button\n\n  const maxAmountInput = maxAmountSpend(userLiquidityUnstaked);\n  const atMaxAmount = Boolean(maxAmountInput && (parsedAmount === null || parsedAmount === void 0 ? void 0 : parsedAmount.equalTo(maxAmountInput)));\n  const handleMax = useCallback(() => {\n    maxAmountInput && onUserInput(maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n\n  async function onAttemptToApprove() {\n    if (!pairContract || !library || !deadline) throw new Error(t('earn.missingDependencies'));\n    const liquidityAmount = parsedAmount;\n    if (!liquidityAmount) throw new Error(t('earn.missingLiquidityAmount')); // try to gather a signature for permission\n\n    const nonce = await pairContract.nonces(account);\n    const EIP712Domain = [{\n      name: 'name',\n      type: 'string'\n    }, {\n      name: 'version',\n      type: 'string'\n    }, {\n      name: 'chainId',\n      type: 'uint256'\n    }, {\n      name: 'verifyingContract',\n      type: 'address'\n    }];\n    const domain = {\n      name: 'Pangolin Liquidity',\n      version: '1',\n      chainId: chainId,\n      verifyingContract: pairContract.address\n    };\n    const Permit = [{\n      name: 'owner',\n      type: 'address'\n    }, {\n      name: 'spender',\n      type: 'address'\n    }, {\n      name: 'value',\n      type: 'uint256'\n    }, {\n      name: 'nonce',\n      type: 'uint256'\n    }, {\n      name: 'deadline',\n      type: 'uint256'\n    }];\n    const message = {\n      owner: account,\n      spender: BRIDGE_MIGRATOR_ADDRESS,\n      value: liquidityAmount.raw.toString(),\n      nonce: nonce.toHexString(),\n      deadline: deadline.toNumber()\n    };\n    const data = JSON.stringify({\n      types: {\n        EIP712Domain,\n        Permit\n      },\n      domain,\n      primaryType: 'Permit',\n      message\n    });\n    library.send('eth_signTypedData_v4', [account, data]).then(splitSignature).then(signature => {\n      setSignatureData({\n        v: signature.v,\n        r: signature.r,\n        s: signature.s,\n        deadline: deadline.toNumber()\n      });\n    }).catch(error => {\n      // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\n      // if (error?.code !== 4001) {\n      //   approveCallback()\n      // }\n      approveCallback();\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpen,\n    onDismiss: wrappedOnDismiss,\n    maxHeight: 90,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }\n  }, !attempting && !hash && /*#__PURE__*/React.createElement(ContentWrapper, {\n    gap: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.mediumHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, \"Migrate \"), /*#__PURE__*/React.createElement(CloseIcon, {\n    onClick: wrappedOnDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(CurrencyInputPanel, {\n    value: typedValue,\n    onUserInput: onUserInput,\n    onMax: handleMax,\n    showMaxButton: !atMaxAmount,\n    currency: pairFrom.liquidityToken,\n    pair: pairFrom,\n    label: '',\n    disableCurrencySelect: true,\n    customBalanceText: \"Available to migrate: \",\n    id: \"stake-liquidity-token\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ButtonConfirmed, {\n    mr: \"0.5rem\",\n    onClick: onAttemptToApprove,\n    confirmed: approval === ApprovalState.APPROVED || signatureData !== null,\n    disabled: approval !== ApprovalState.NOT_APPROVED || signatureData !== null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }, t('earn.approve')), /*#__PURE__*/React.createElement(ButtonError, {\n    disabled: !!error || signatureData === null && approval !== ApprovalState.APPROVED,\n    error: !!error && !!parsedAmount,\n    onClick: onMigrate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  }, error !== null && error !== void 0 ? error : 'Migrate')), /*#__PURE__*/React.createElement(ProgressCircles, {\n    steps: [approval === ApprovalState.APPROVED || signatureData !== null],\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  })), attempting && !hash && /*#__PURE__*/React.createElement(LoadingView, {\n    onDismiss: wrappedOnDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"12px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.largeHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }, \"Migrating Liquidity\"), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 13\n    }\n  }, parsedAmount === null || parsedAmount === void 0 ? void 0 : parsedAmount.toSignificant(4), \" PGL\"))), attempting && hash && /*#__PURE__*/React.createElement(SubmittedView, {\n    onDismiss: wrappedOnDismiss,\n    hash: hash,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"12px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.largeHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }\n  }, t('earn.transactionSubmitted')), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }\n  }, \"Migrated \", parsedAmount === null || parsedAmount === void 0 ? void 0 : parsedAmount.toSignificant(4), \" PGL\"))));\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/components/earn/BridgeMigratorModal.tsx"],"names":["React","useState","useCallback","useTransactionDeadline","Modal","AutoColumn","styled","RowBetween","TYPE","CloseIcon","ButtonConfirmed","ButtonError","ProgressCircles","CurrencyInputPanel","useActiveWeb3React","maxAmountSpend","useBridgeMigratorContract","usePairContract","useApproveCallback","ApprovalState","splitSignature","useDerivedStakeInfo","useTransactionAdder","LoadingView","SubmittedView","useTranslation","BRIDGE_MIGRATOR_ADDRESS","ContentWrapper","BridgeMigratorModal","isOpen","onDismiss","pairFrom","pairTo","userLiquidityUnstaked","account","chainId","library","typedValue","setTypedValue","parsedAmount","error","liquidityToken","addTransaction","attempting","setAttempting","hash","setHash","wrappedOnDismiss","undefined","pairContract","address","deadline","t","signatureData","setSignatureData","approval","approveCallback","bridgeMigratorContract","onMigrate","APPROVED","migrateLiquidity","raw","toString","toNumber","then","response","summary","catch","console","migrateLiquidityWithPermit","v","r","s","Error","onUserInput","maxAmountInput","atMaxAmount","Boolean","equalTo","handleMax","toExact","onAttemptToApprove","liquidityAmount","nonce","nonces","EIP712Domain","name","type","domain","version","verifyingContract","Permit","message","owner","spender","value","toHexString","data","JSON","stringify","types","primaryType","send","signature","NOT_APPROVED","toSignificant"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\r\nimport Modal from '../Modal'\r\nimport { AutoColumn } from '../Column'\r\nimport styled from 'styled-components'\r\nimport { RowBetween } from '../Row'\r\nimport { TYPE, CloseIcon } from '../../theme'\r\nimport { ButtonConfirmed, ButtonError } from '../Button'\r\nimport ProgressCircles from '../ProgressSteps'\r\nimport CurrencyInputPanel from '../CurrencyInputPanel'\r\nimport { TokenAmount, Pair } from '@pangolindex/sdk'\r\nimport { useActiveWeb3React } from '../../hooks'\r\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\r\nimport { useBridgeMigratorContract, usePairContract } from '../../hooks/useContract'\r\nimport { useApproveCallback, ApprovalState } from '../../hooks/useApproveCallback'\r\nimport { splitSignature } from 'ethers/lib/utils'\r\nimport { useDerivedStakeInfo } from '../../state/stake/hooks'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { useTransactionAdder } from '../../state/transactions/hooks'\r\nimport { LoadingView, SubmittedView } from '../ModalViews'\r\nimport { useTranslation } from 'react-i18next'\r\nimport { BRIDGE_MIGRATOR_ADDRESS } from '../../constants'\r\n\r\nconst ContentWrapper = styled(AutoColumn)`\r\n  width: 100%;\r\n  padding: 1rem;\r\n`\r\n\r\ninterface BridgeMigratorModalProps {\r\n  isOpen: boolean\r\n  onDismiss: () => void\r\n  pairFrom: Pair\r\n  pairTo: Pair\r\n  userLiquidityUnstaked: TokenAmount | undefined\r\n}\r\n\r\nexport default function BridgeMigratorModal({ isOpen, onDismiss, pairFrom, pairTo, userLiquidityUnstaked }: BridgeMigratorModalProps) {\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n\r\n  // track and parse user input\r\n  const [typedValue, setTypedValue] = useState('')\r\n  const { parsedAmount, error } = useDerivedStakeInfo(typedValue, pairFrom.liquidityToken, userLiquidityUnstaked)\r\n\r\n  // state for pending and submitted txn views\r\n  const addTransaction = useTransactionAdder()\r\n  const [attempting, setAttempting] = useState<boolean>(false)\r\n  const [hash, setHash] = useState<string | undefined>()\r\n  const wrappedOnDismiss = useCallback(() => {\r\n    setHash(undefined)\r\n    setAttempting(false)\r\n    onDismiss()\r\n  }, [onDismiss])\r\n\r\n  // pair contract for this token to be staked\r\n  const pairContract = usePairContract(pairFrom.liquidityToken.address)\r\n\r\n  // approval data for stake\r\n  const deadline = useTransactionDeadline()\r\n  const { t } = useTranslation()\r\n  const [signatureData, setSignatureData] = useState<{ v: number; r: string; s: string; deadline: number } | null>(null)\r\n  const [approval, approveCallback] = useApproveCallback(parsedAmount, BRIDGE_MIGRATOR_ADDRESS)\r\n\r\n  const bridgeMigratorContract = useBridgeMigratorContract()\r\n\r\n  async function onMigrate() {\r\n    setAttempting(true)\r\n    if (bridgeMigratorContract && parsedAmount && deadline && account) {\r\n      if (approval === ApprovalState.APPROVED) {\r\n        await bridgeMigratorContract.migrateLiquidity(\r\n          pairFrom.liquidityToken.address,\r\n          pairTo.liquidityToken.address,\r\n          account,\r\n          `0x${parsedAmount.raw.toString(16)}`,\r\n          deadline.toNumber(),\r\n        )\r\n          .then((response: TransactionResponse) => {\r\n            addTransaction(response, {\r\n              summary: 'Migrate liquidity'\r\n            })\r\n            setHash(response.hash)\r\n          })\r\n          .catch((error: any) => {\r\n            setAttempting(false)\r\n            console.error(error)\r\n          })\r\n      } else if (signatureData) {\r\n        bridgeMigratorContract\r\n          .migrateLiquidityWithPermit(\r\n            pairFrom.liquidityToken.address,\r\n            pairTo.liquidityToken.address,\r\n            account,\r\n            `0x${parsedAmount.raw.toString(16)}`,\r\n            signatureData.deadline,\r\n            signatureData.v,\r\n            signatureData.r,\r\n            signatureData.s,\r\n          )\r\n          .then((response: TransactionResponse) => {\r\n            addTransaction(response, {\r\n              summary: 'Migrate liquidity'\r\n            })\r\n            setHash(response.hash)\r\n          })\r\n          .catch((error: any) => {\r\n            setAttempting(false)\r\n            console.error(error)\r\n          })\r\n      } else {\r\n        setAttempting(false)\r\n        throw new Error('Attempting to migrate without approval or a signature. Please contact support.')\r\n      }\r\n    }\r\n  }\r\n\r\n  // wrapped onUserInput to clear signatures\r\n  const onUserInput = useCallback((typedValue: string) => {\r\n    setSignatureData(null)\r\n    setTypedValue(typedValue)\r\n  }, [])\r\n\r\n  // used for max input button\r\n  const maxAmountInput = maxAmountSpend(userLiquidityUnstaked)\r\n  const atMaxAmount = Boolean(maxAmountInput && parsedAmount?.equalTo(maxAmountInput))\r\n  const handleMax = useCallback(() => {\r\n    maxAmountInput && onUserInput(maxAmountInput.toExact())\r\n  }, [maxAmountInput, onUserInput])\r\n\r\n  async function onAttemptToApprove() {\r\n    if (!pairContract || !library || !deadline) throw new Error(t('earn.missingDependencies'))\r\n    const liquidityAmount = parsedAmount\r\n    if (!liquidityAmount) throw new Error(t('earn.missingLiquidityAmount'))\r\n\r\n    // try to gather a signature for permission\r\n    const nonce = await pairContract.nonces(account)\r\n\r\n    const EIP712Domain = [\r\n      { name: 'name', type: 'string' },\r\n      { name: 'version', type: 'string' },\r\n      { name: 'chainId', type: 'uint256' },\r\n      { name: 'verifyingContract', type: 'address' }\r\n    ]\r\n    const domain = {\r\n      name: 'Pangolin Liquidity',\r\n      version: '1',\r\n      chainId: chainId,\r\n      verifyingContract: pairContract.address\r\n    }\r\n    const Permit = [\r\n      { name: 'owner', type: 'address' },\r\n      { name: 'spender', type: 'address' },\r\n      { name: 'value', type: 'uint256' },\r\n      { name: 'nonce', type: 'uint256' },\r\n      { name: 'deadline', type: 'uint256' }\r\n    ]\r\n    const message = {\r\n      owner: account,\r\n      spender: BRIDGE_MIGRATOR_ADDRESS,\r\n      value: liquidityAmount.raw.toString(),\r\n      nonce: nonce.toHexString(),\r\n      deadline: deadline.toNumber()\r\n    }\r\n    const data = JSON.stringify({\r\n      types: {\r\n        EIP712Domain,\r\n        Permit\r\n      },\r\n      domain,\r\n      primaryType: 'Permit',\r\n      message\r\n    })\r\n\r\n    library\r\n      .send('eth_signTypedData_v4', [account, data])\r\n      .then(splitSignature)\r\n      .then(signature => {\r\n        setSignatureData({\r\n          v: signature.v,\r\n          r: signature.r,\r\n          s: signature.s,\r\n          deadline: deadline.toNumber()\r\n        })\r\n      })\r\n      .catch(error => {\r\n        // for all errors other than 4001 (EIP-1193 user rejected request), fall back to manual approve\r\n        // if (error?.code !== 4001) {\r\n        //   approveCallback()\r\n        // }\r\n        approveCallback()\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Modal isOpen={isOpen} onDismiss={wrappedOnDismiss} maxHeight={90}>\r\n      {!attempting && !hash && (\r\n        <ContentWrapper gap=\"lg\">\r\n          <RowBetween>\r\n            <TYPE.mediumHeader>Migrate {/* TODO: Translate with i18n */}</TYPE.mediumHeader>\r\n            <CloseIcon onClick={wrappedOnDismiss} />\r\n          </RowBetween>\r\n          <CurrencyInputPanel\r\n            value={typedValue}\r\n            onUserInput={onUserInput}\r\n            onMax={handleMax}\r\n            showMaxButton={!atMaxAmount}\r\n            currency={pairFrom.liquidityToken}\r\n            pair={pairFrom}\r\n            label={''}\r\n            disableCurrencySelect={true}\r\n            customBalanceText=\"Available to migrate: \"\r\n            id=\"stake-liquidity-token\"\r\n          />\r\n\r\n          <RowBetween>\r\n            <ButtonConfirmed\r\n              mr=\"0.5rem\"\r\n              onClick={onAttemptToApprove}\r\n              confirmed={approval === ApprovalState.APPROVED || signatureData !== null}\r\n              disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\r\n            >\r\n              {t('earn.approve')}\r\n            </ButtonConfirmed>\r\n            <ButtonError\r\n              disabled={!!error || (signatureData === null && approval !== ApprovalState.APPROVED)}\r\n              error={!!error && !!parsedAmount}\r\n              onClick={onMigrate}\r\n            >\r\n              {/* TODO: Translate with i18n */}\r\n              {error ?? 'Migrate'}\r\n            </ButtonError>\r\n          </RowBetween>\r\n          <ProgressCircles steps={[approval === ApprovalState.APPROVED || signatureData !== null]} disabled={true} />\r\n        </ContentWrapper>\r\n      )}\r\n      {attempting && !hash && (\r\n        <LoadingView onDismiss={wrappedOnDismiss}>\r\n          <AutoColumn gap=\"12px\" justify={'center'}>\r\n            {/* TODO: Translate with i18n */}\r\n            <TYPE.largeHeader>Migrating Liquidity</TYPE.largeHeader>\r\n            <TYPE.body fontSize={20}>{parsedAmount?.toSignificant(4)} PGL</TYPE.body>\r\n          </AutoColumn>\r\n        </LoadingView>\r\n      )}\r\n      {attempting && hash && (\r\n        <SubmittedView onDismiss={wrappedOnDismiss} hash={hash}>\r\n          <AutoColumn gap=\"12px\" justify={'center'}>\r\n            <TYPE.largeHeader>{t('earn.transactionSubmitted')}</TYPE.largeHeader>\r\n            {/* TODO: Translate with i18n */}\r\n            <TYPE.body fontSize={20}>Migrated {parsedAmount?.toSignificant(4)} PGL</TYPE.body>\r\n          </AutoColumn>\r\n        </SubmittedView>\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}