"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const parseEvmType_1 = require("./parseEvmType");
describe("parseEvmType function", () => {
    it("should parse unsigned integer", () => {
        const parsedType = parseEvmType_1.parseEvmType("uint8");
        chai_1.expect(parsedType.type).to.be.eq("uinteger");
        chai_1.expect(parsedType.bits).to.be.eq(8);
    });
    it("should parse signed integer", () => {
        const parsedType = parseEvmType_1.parseEvmType("int");
        chai_1.expect(parsedType.type).to.be.eq("integer");
        chai_1.expect(parsedType.bits).to.be.eq(256);
    });
    it("should parse boolean", () => {
        const parsedType = parseEvmType_1.parseEvmType("bool");
        chai_1.expect(parsedType.type).to.be.eq("boolean");
    });
    it("should parse bytes2", () => {
        const parsedType = parseEvmType_1.parseEvmType("bytes2");
        chai_1.expect(parsedType.type).to.be.eq("bytes");
        chai_1.expect(parsedType.size).to.be.eq(2);
    });
    it("should parse bytes", () => {
        const parsedType = parseEvmType_1.parseEvmType("bytes");
        chai_1.expect(parsedType.type).to.be.eq("dynamic-bytes");
    });
    it("should parse arrays", () => {
        const parsedType = parseEvmType_1.parseEvmType("uint[]");
        chai_1.expect(parsedType.type).to.be.eq("array");
        chai_1.expect(parsedType.itemType.type).to.be.eq("uinteger");
    });
    it("should parse fixed size arrays", () => {
        const parsedType = parseEvmType_1.parseEvmType("uint[8]");
        chai_1.expect(parsedType.type).to.be.eq("array");
        chai_1.expect(parsedType.itemType.type).to.be.eq("uinteger");
        chai_1.expect(parsedType.size).to.be.eq(8);
    });
    it("should parse nested arrays", () => {
        const parsedType = parseEvmType_1.parseEvmType("uint16[8][256]");
        chai_1.expect(parsedType.type).to.be.eq("array");
        chai_1.expect(parsedType.itemType.type).to.be.eq("array");
        chai_1.expect(parsedType.size).to.be.eq(256);
        chai_1.expect(parsedType.itemType.itemType.type).to.be.eq("uinteger");
        chai_1.expect(parsedType.itemType.size).to.be.eq(8);
        chai_1.expect(parsedType.itemType.itemType.bits).to.be.eq(16);
    });
});
