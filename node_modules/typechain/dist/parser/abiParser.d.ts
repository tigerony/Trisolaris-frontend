import { Dictionary } from "ts-essentials";
import { EvmOutputType, EvmType } from "./parseEvmType";
export interface AbiParameter {
    name: string;
    type: EvmType;
}
export interface AbiOutputParameter {
    name: string;
    type: EvmOutputType;
}
export declare type Named<T> = {
    name: string;
    values: T;
};
export declare type StateMutability = "pure" | "view" | "nonpayable" | "payable";
export interface FunctionDeclaration {
    name: string;
    stateMutability: StateMutability;
    inputs: AbiParameter[];
    outputs: AbiOutputParameter[];
}
export interface FunctionWithoutOutputDeclaration extends FunctionDeclaration {
    outputs: [];
}
export interface FunctionWithoutInputDeclaration extends FunctionDeclaration {
    inputs: [];
}
export interface Contract {
    name: string;
    fallback?: FunctionWithoutInputDeclaration;
    constructor: FunctionWithoutOutputDeclaration[];
    functions: Dictionary<FunctionDeclaration[]>;
    events: Dictionary<EventDeclaration[]>;
}
export interface RawAbiParameter {
    name: string;
    type: string;
    components?: RawAbiParameter[];
}
export interface RawAbiDefinition {
    name: string;
    constant: boolean;
    payable: boolean;
    stateMutability?: StateMutability;
    inputs: RawAbiParameter[];
    outputs: RawAbiParameter[];
    type: string;
}
export interface EventDeclaration {
    name: string;
    inputs: EventArgDeclaration[];
}
export interface EventArgDeclaration {
    isIndexed: boolean;
    name: string;
    type: EvmType;
}
export interface RawEventAbiDefinition {
    type: "event";
    anonymous: boolean;
    name: string;
    inputs: RawEventArgAbiDefinition[];
}
export interface RawEventArgAbiDefinition {
    indexed: boolean;
    name: string;
    type: string;
}
export interface BytecodeLinkReference {
    reference: string;
    name?: string;
}
export interface BytecodeWithLinkReferences {
    bytecode: string;
    linkReferences?: BytecodeLinkReference[];
}
export declare function parse(abi: Array<RawAbiDefinition>, name: string): Contract;
export declare function parseEvent(abiPiece: RawEventAbiDefinition): EventDeclaration;
export declare function extractAbi(rawJson: string): RawAbiDefinition[];
export declare function extractBytecode(rawContents: string): BytecodeWithLinkReferences | undefined;
export declare function ensure0xPrefix(hexString: string): string;
export declare function isConstant(fn: FunctionDeclaration): boolean;
export declare function isConstantFn(fn: FunctionDeclaration): boolean;
