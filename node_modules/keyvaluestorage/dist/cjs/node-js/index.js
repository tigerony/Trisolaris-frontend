"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const better_sqlite3_1 = __importDefault(require("better-sqlite3"));
const safe_json_utils_1 = require("safe-json-utils");
const shared_1 = require("../shared");
const sqlite_1 = require("./sqlite");
class KeyValueStorage {
    constructor(opts) {
        const options = shared_1.getNodeJSOptions(opts);
        this.database =
            typeof options.database === 'string'
                ? new better_sqlite3_1.default(options.database)
                : options.database;
        const tableName = options.tableName || 'keyvaluestorage';
        this.statements = new sqlite_1.Statements(tableName);
        this.database.prepare(this.statements.createTable()).run();
    }
    getKeys() {
        return __awaiter(this, void 0, void 0, function* () {
            const keys = this.database
                .prepare(this.statements.selectKeys())
                .all()
                .map(x => Object.values(x))
                .flat();
            return keys;
        });
    }
    getEntries() {
        return __awaiter(this, void 0, void 0, function* () {
            const entries = this.database
                .prepare(this.statements.selectEntries())
                .all()
                .map(x => shared_1.parseEntry(Object.values(x)));
            return entries;
        });
    }
    getItem(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const item = this.database
                .prepare(this.statements.selectValueWhereKey())
                .get(key);
            if (typeof item === 'undefined' || typeof item.value === 'undefined') {
                return undefined;
            }
            return safe_json_utils_1.safeJsonParse(item.value);
        });
    }
    setItem(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            this.database
                .prepare(this.statements.replaceInto())
                .run({ key, value: safe_json_utils_1.safeJsonStringify(value) });
        });
    }
    removeItem(key) {
        return __awaiter(this, void 0, void 0, function* () {
            this.database.prepare(this.statements.deleteFromWhereKey()).run(key);
        });
    }
}
exports.KeyValueStorage = KeyValueStorage;
exports.default = KeyValueStorage;
//# sourceMappingURL=index.js.map