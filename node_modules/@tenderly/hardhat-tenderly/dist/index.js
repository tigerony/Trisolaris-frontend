"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReverseNetworkMap = exports.NetworkMap = exports.PluginName = void 0;
const config_1 = require("hardhat/config");
const plugins_1 = require("hardhat/plugins");
const Tenderly_1 = require("./Tenderly");
const TenderlyService_1 = require("./tenderly/TenderlyService");
require("./type-extensions");
exports.PluginName = "hardhat-tenderly";
config_1.extendEnvironment(env => {
    env.tenderly = plugins_1.lazyObject(() => new Tenderly_1.Tenderly(env));
});
exports.NetworkMap = {
    kovan: "42",
    goerli: "5",
    mainnet: "1",
    rinkeby: "4",
    ropsten: "3",
    mumbai: "80001",
    xDai: "100",
    POA: "99"
};
exports.ReverseNetworkMap = {
    "42": "kovan",
    "5": "goerli",
    "1": "mainnet",
    "4": "rinkeby",
    "3": "ropsten",
    "80001": "mumbai",
    "100": "xDai",
    "99": "POA"
};
const extractContractData = async (contracts, network, config, run) => {
    let contract;
    const requestContracts = [];
    const sourcePaths = await run("compile:solidity:get-source-paths");
    const sourceNames = await run("compile:solidity:get-source-names", {
        sourcePaths
    });
    const data = await run("compile:solidity:get-dependency-graph", {
        sourceNames
    });
    for (contract of contracts) {
        const contractData = contract.split("=");
        if (contractData.length < 2) {
            throw new plugins_1.HardhatPluginError(exports.PluginName, `Invalid contract provided`);
        }
        if (network === undefined) {
            throw new plugins_1.HardhatPluginError(exports.PluginName, `No network provided`);
        }
        data._resolvedFiles.forEach((resolvedFile, _) => {
            const name = resolvedFile.sourceName.split("/").slice(-1)[0];
            const contractToPush = {
                contractName: name.split(".")[0],
                source: resolvedFile.content.rawContent,
                sourcePath: resolvedFile.sourceName,
                networks: {},
                compiler: {
                    name: "solc",
                    version: config.solidity.compilers[0].version
                }
            };
            if (contractToPush.contractName === contractData[0]) {
                contractToPush.networks = {
                    [exports.NetworkMap[network]]: {
                        address: contractData[1]
                    }
                };
            }
            requestContracts.push(contractToPush);
        });
    }
    return requestContracts;
};
const verifyContract = async ({ contracts }, { config, hardhatArguments, run }) => {
    if (contracts === undefined) {
        throw new plugins_1.HardhatPluginError(exports.PluginName, `At least one contract must be provided (ContractName=Address)`);
    }
    const requestContracts = await extractContractData(contracts, hardhatArguments.network, config, run);
    const solcConfig = {
        compiler_version: config.solidity.compilers[0].version,
        optimizations_used: config.solidity.compilers[0].settings.optimizer.enabled,
        optimizations_count: config.solidity.compilers[0].settings.optimizer.runs
    };
    await TenderlyService_1.TenderlyService.verifyContracts({
        config: solcConfig,
        contracts: requestContracts
    });
};
const pushContracts = async ({ contracts }, { config, hardhatArguments, run }) => {
    if (contracts === undefined) {
        throw new plugins_1.HardhatPluginError(exports.PluginName, `At least one contract must be provided (ContractName=Address)`);
    }
    if (config.tenderly.project === undefined) {
        throw new plugins_1.HardhatPluginError(exports.PluginName, `Please provide the project field in the tenderly object in hardhat.config.js`);
    }
    if (config.tenderly.username === undefined) {
        throw new plugins_1.HardhatPluginError(exports.PluginName, `Please provide the username field in the tenderly object in hardhat.config.js`);
    }
    const requestContracts = await extractContractData(contracts, hardhatArguments.network, config, run);
    const solcConfig = {
        compiler_version: config.solidity.compilers[0].version,
        optimizations_used: config.solidity.compilers[0].settings.optimizer.enabled,
        optimizations_count: config.solidity.compilers[0].settings.optimizer.runs
    };
    await TenderlyService_1.TenderlyService.pushContracts({
        config: solcConfig,
        contracts: requestContracts
    }, config.tenderly.project, config.tenderly.username);
};
config_1.task("tenderly:verify", "Verifies contracts on Tenderly")
    .addOptionalVariadicPositionalParam("contracts", "Addresses and names of contracts that will be verified formatted ContractName=Address")
    .setAction(verifyContract);
config_1.task("tenderly:push", "Privately pushes contracts to Tenderly")
    .addOptionalVariadicPositionalParam("contracts", "Addresses and names of contracts that will be verified formatted ContractName=Address")
    .setAction(pushContracts);
//# sourceMappingURL=index.js.map