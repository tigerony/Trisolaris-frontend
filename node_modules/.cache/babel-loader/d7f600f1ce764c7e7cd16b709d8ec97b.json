{"ast":null,"code":"import { TokenAmount, Pair, ChainId } from '@pangolindex/sdk';\nimport { useMemo } from 'react';\nimport { abi as IPangolinPairABI } from '@pangolindex/exchange-contracts/artifacts/contracts/pangolin-core/interfaces/IPangolinPair.sol/IPangolinPair.json';\nimport { Interface } from '@ethersproject/abi';\nimport { useActiveWeb3React } from '../hooks';\nimport { useMultipleContractSingleData } from '../state/multicall/hooks';\nimport { wrappedCurrency } from '../utils/wrappedCurrency';\nconst PAIR_INTERFACE = new Interface(IPangolinPairABI);\nexport let PairState;\n\n(function (PairState) {\n  PairState[PairState[\"LOADING\"] = 0] = \"LOADING\";\n  PairState[PairState[\"NOT_EXISTS\"] = 1] = \"NOT_EXISTS\";\n  PairState[PairState[\"EXISTS\"] = 2] = \"EXISTS\";\n  PairState[PairState[\"INVALID\"] = 3] = \"INVALID\";\n})(PairState || (PairState = {}));\n\nexport function usePairs(currencies) {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const tokens = useMemo(() => currencies.map(([currencyA, currencyB]) => [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]), [chainId, currencies]);\n  const pairAddresses = useMemo(() => tokens.map(([tokenA, tokenB]) => {\n    return tokenA && tokenB && !tokenA.equals(tokenB) ? Pair.getAddress(tokenA, tokenB, chainId ? chainId : ChainId.AVALANCHE) : undefined;\n  }), [tokens, chainId]);\n  const results = useMultipleContractSingleData(pairAddresses, PAIR_INTERFACE, 'getReserves');\n  return useMemo(() => {\n    return results.map((result, i) => {\n      const {\n        result: reserves,\n        loading\n      } = result;\n      const tokenA = tokens[i][0];\n      const tokenB = tokens[i][1];\n      if (loading) return [PairState.LOADING, null];\n      if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [PairState.INVALID, null];\n      if (!reserves) return [PairState.NOT_EXISTS, null];\n      const {\n        reserve0,\n        reserve1\n      } = reserves;\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA];\n      return [PairState.EXISTS, new Pair(new TokenAmount(token0, reserve0.toString()), new TokenAmount(token1, reserve1.toString()), chainId ? chainId : ChainId.AVALANCHE)];\n    });\n  }, [results, tokens, chainId]);\n}\nexport function usePair(tokenA, tokenB) {\n  return usePairs([[tokenA, tokenB]])[0];\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/data/Reserves.ts"],"names":["TokenAmount","Pair","ChainId","useMemo","abi","IPangolinPairABI","Interface","useActiveWeb3React","useMultipleContractSingleData","wrappedCurrency","PAIR_INTERFACE","PairState","usePairs","currencies","chainId","tokens","map","currencyA","currencyB","pairAddresses","tokenA","tokenB","equals","getAddress","AVALANCHE","undefined","results","result","i","reserves","loading","LOADING","INVALID","NOT_EXISTS","reserve0","reserve1","token0","token1","sortsBefore","EXISTS","toString","usePair"],"mappings":"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","sourcesContent":["import { TokenAmount, Pair, Currency, ChainId } from '@pangolindex/sdk'\nimport { useMemo } from 'react'\nimport { abi as IPangolinPairABI } from '@pangolindex/exchange-contracts/artifacts/contracts/pangolin-core/interfaces/IPangolinPair.sol/IPangolinPair.json'\nimport { Interface } from '@ethersproject/abi'\nimport { useActiveWeb3React } from '../hooks'\n\nimport { useMultipleContractSingleData } from '../state/multicall/hooks'\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\n\nconst PAIR_INTERFACE = new Interface(IPangolinPairABI)\n\nexport enum PairState {\n  LOADING,\n  NOT_EXISTS,\n  EXISTS,\n  INVALID\n}\n\nexport function usePairs(currencies: [Currency | undefined, Currency | undefined][]): [PairState, Pair | null][] {\n  const { chainId } = useActiveWeb3React()\n\n  const tokens = useMemo(\n    () =>\n      currencies.map(([currencyA, currencyB]) => [\n        wrappedCurrency(currencyA, chainId),\n        wrappedCurrency(currencyB, chainId)\n      ]),\n    [chainId, currencies]\n  )\n\n  const pairAddresses = useMemo(\n    () =>\n      tokens.map(([tokenA, tokenB]) => {\n        return tokenA && tokenB && !tokenA.equals(tokenB) ? Pair.getAddress(tokenA, tokenB, chainId ? chainId : ChainId.AVALANCHE) : undefined\n      }),\n    [tokens, chainId]\n  )\n\n  const results = useMultipleContractSingleData(pairAddresses, PAIR_INTERFACE, 'getReserves')\n\n  return useMemo(() => {\n    return results.map((result, i) => {\n      const { result: reserves, loading } = result\n      const tokenA = tokens[i][0]\n      const tokenB = tokens[i][1]\n\n      if (loading) return [PairState.LOADING, null]\n      if (!tokenA || !tokenB || tokenA.equals(tokenB)) return [PairState.INVALID, null]\n      if (!reserves) return [PairState.NOT_EXISTS, null]\n      const { reserve0, reserve1 } = reserves\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]\n      return [\n        PairState.EXISTS,\n        new Pair(new TokenAmount(token0, reserve0.toString()), new TokenAmount(token1, reserve1.toString()), chainId ? chainId : ChainId.AVALANCHE)\n      ]\n    })\n  }, [results, tokens, chainId])\n}\n\nexport function usePair(tokenA?: Currency, tokenB?: Currency): [PairState, Pair | null] {\n  return usePairs([[tokenA, tokenB]])[0]\n}\n"]},"metadata":{},"sourceType":"module"}