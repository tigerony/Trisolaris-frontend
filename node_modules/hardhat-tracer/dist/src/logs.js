"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printLogs = void 0;
const utils_1 = require("ethers/lib/utils");
const chalk_1 = __importDefault(require("chalk"));
const formatter_1 = require("./formatter");
const utils_2 = require("./utils");
async function printLogs(txHash, receipt, dependencies) {
    if (!txHash)
        return;
    if (!receipt)
        receipt = await dependencies.provider.send("eth_getTransactionReceipt", [
            txHash,
        ]);
    if (!receipt || !receipt.logs)
        return;
    if (typeof receipt.to === "string") {
        utils_2.setInNameTags(receipt.to, "Receiver", dependencies);
    }
    if (typeof receipt.from === "string") {
        utils_2.setInNameTags(receipt.from, "Sender", dependencies);
    }
    const names = await dependencies.artifacts.getAllFullyQualifiedNames();
    for (let i = 0; i < receipt.logs.length; i++) {
        for (const name of names) {
            const artifact = await dependencies.artifacts.readArtifact(name);
            const iface = new utils_1.Interface(artifact.abi);
            try {
                const parsed = iface.parseLog(receipt.logs[i]);
                let decimals = -1;
                if (parsed.signature === "Transfer(address,address,uint256)") {
                    try {
                        const res = await dependencies.provider.send("eth_call", [
                            { data: "0x313ce567", to: receipt.logs[i].address },
                        ]);
                        decimals = +res.slice(0, 66);
                    }
                    catch (_a) { }
                }
                console.log(`${formatter_1.stringifyValue(receipt.logs[i].address, dependencies) + " "}${chalk_1.default.green(parsed.name)}(${formatter_1.formatEventArgs(parsed, decimals, dependencies)})`);
                break;
            }
            catch (_b) { }
        }
    }
    if (dependencies.tracerEnv._internal.printNameTagTip === "print it") {
        dependencies.tracerEnv._internal.printNameTagTip = "already printed";
        // print only occassionally (20% probability)
        if (Math.random() < 0.2) {
            console.log(chalk_1.default.yellow(`Tip: You can set name tags for addresses by adding a key to hre.tracer.nameTags object in your test cases.\ne.g. hre.tracer.nameTags["0x1234567890123456789012345678901234567890"] = "MyTreasury";`));
        }
    }
}
exports.printLogs = printLogs;
//# sourceMappingURL=logs.js.map