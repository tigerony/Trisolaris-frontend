"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const safe_json_utils_1 = require("safe-json-utils");
const shared_1 = require("../shared");
class KeyValueStorage {
    constructor(opts) {
        const options = shared_1.getReactNativeOptions(opts);
        this.asyncStorage = options.asyncStorage;
    }
    getKeys() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.asyncStorage.getAllKeys();
        });
    }
    getEntries() {
        return __awaiter(this, void 0, void 0, function* () {
            const entries = yield this.asyncStorage.multiGet(yield this.getKeys());
            return entries.map(shared_1.parseEntry);
        });
    }
    getItem(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const item = yield this.asyncStorage.getItem(key);
            if (typeof item == 'undefined' || item === null) {
                return undefined;
            }
            return safe_json_utils_1.safeJsonParse(item);
        });
    }
    setItem(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.asyncStorage.setItem(key, safe_json_utils_1.safeJsonStringify(value));
        });
    }
    removeItem(key) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.asyncStorage.removeItem(key);
        });
    }
}
exports.KeyValueStorage = KeyValueStorage;
exports.default = KeyValueStorage;
//# sourceMappingURL=index.js.map