{"ast":null,"code":"import getCountry from \"../../utils/extractCountry\";\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateQuote } from './actions';\nimport { WYRE_API_KEY, WYRE_ID, WYRE_API_URL, WYRE_QUOTE_API_ENDPOINT, WYRE_SECRET_KEY } from '../../constants';\nimport CryptoJS from 'crypto-js'; // Signature Calculation using Crypto-js\n\nexport const signature = (url, data) => {\n  const dataToSign = url + data; // @ts-ignore\n\n  const token = CryptoJS.enc.Hex.stringify(CryptoJS.HmacSHA256(dataToSign.toString(CryptoJS.enc.Utf8), WYRE_SECRET_KEY));\n  return token;\n};\nexport function useQuoteRequest(account, amount, sourceCurrency) {\n  const dispatch = useDispatch();\n  const getQuote = useCallback(async () => {\n    if (!account || Number(amount) <= 0 || !Number(amount)) {\n      dispatch(updateQuote({\n        quote: false\n      }));\n    } else {\n      const data = {\n        'amount': amount,\n        'sourceCurrency': sourceCurrency,\n        'destCurrency': 'AVAX',\n        'dest': 'avalanche:' + account.toLowerCase(),\n        'accountId': WYRE_ID,\n        'country': getCountry()\n      };\n      const timestamp = new Date().getTime();\n      const url = `${WYRE_API_URL}${WYRE_QUOTE_API_ENDPOINT}?timestamp=${timestamp}`;\n      const headers = {\n        'X-Api-Key': WYRE_API_KEY,\n        'X-Api-Signature': signature(url, JSON.stringify(data)),\n        'Content-Type': 'application/json'\n      };\n\n      try {\n        const response = await fetch(url, {\n          method: 'post',\n          'headers': headers,\n          body: JSON.stringify(data)\n        });\n        const quote = await response.json();\n\n        if (response.status === 200) {\n          dispatch(updateQuote({\n            quote: quote\n          }));\n        } else {\n          dispatch(updateQuote({\n            quote: false\n          }));\n        }\n      } catch (error) {\n        console.debug('Failed to fetch quote from Wyre', error);\n        dispatch(updateQuote({\n          quote: false\n        }));\n      }\n    }\n  }, [dispatch, amount, account, sourceCurrency]);\n  getQuote();\n}\nexport function useGetQuote() {\n  return {\n    quote: useSelector(state => state.wyre.quote)\n  };\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/state/wyre/hooks.tsx"],"names":["getCountry","useCallback","useDispatch","useSelector","updateQuote","WYRE_API_KEY","WYRE_ID","WYRE_API_URL","WYRE_QUOTE_API_ENDPOINT","WYRE_SECRET_KEY","CryptoJS","signature","url","data","dataToSign","token","enc","Hex","stringify","HmacSHA256","toString","Utf8","useQuoteRequest","account","amount","sourceCurrency","dispatch","getQuote","Number","quote","toLowerCase","timestamp","Date","getTime","headers","JSON","response","fetch","method","body","json","status","error","console","debug","useGetQuote","state","wyre"],"mappings":"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","sourcesContent":["import getCountry from \"../../utils/extractCountry\";\nimport {useCallback} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppDispatch, AppState} from '../../state'\nimport {updateQuote} from './actions'\nimport {\n  WYRE_API_KEY,\n  WYRE_ID,\n  WYRE_API_URL,\n  WYRE_QUOTE_API_ENDPOINT,\n  WYRE_SECRET_KEY\n} from '../../constants'\nimport CryptoJS from 'crypto-js'\n\n// Signature Calculation using Crypto-js\nexport const signature = (url: string, data:string) => {\n  const dataToSign = url + data;\n  // @ts-ignore\n  const token = CryptoJS.enc.Hex.stringify(CryptoJS.HmacSHA256(dataToSign.toString(CryptoJS.enc.Utf8), WYRE_SECRET_KEY));\n  return token;\n}\n\nexport function useQuoteRequest(account: string | null | undefined, amount: string, sourceCurrency: string): void {\n\n  const dispatch = useDispatch<AppDispatch>()\n\n\n  const getQuote = useCallback(async () => {\n\n    if (!account || Number(amount) <= 0 || !Number(amount)) {\n      dispatch(updateQuote({quote: false}))\n    } else {\n\n      const data = {\n        'amount': amount,\n        'sourceCurrency': sourceCurrency,\n        'destCurrency': 'AVAX',\n        'dest': 'avalanche:' + account.toLowerCase(),\n        'accountId': WYRE_ID,\n        'country': getCountry()\n      }\n\n\n      const timestamp = new Date().getTime();\n      const url = `${WYRE_API_URL}${WYRE_QUOTE_API_ENDPOINT}?timestamp=${timestamp}`\n\n      const headers = {\n        'X-Api-Key': WYRE_API_KEY,\n        'X-Api-Signature': signature(url, JSON.stringify(data)),\n        'Content-Type': 'application/json'\n      }\n\n      try {\n        const response = await fetch(url, {\n          method: 'post',\n          'headers': headers, body: JSON.stringify(data)\n        })\n        const quote = await response.json()\n        if (response.status === 200) {\n          dispatch(updateQuote({quote: quote}))\n        } else {\n          dispatch(updateQuote({quote: false}))\n        }\n      } catch (error) {\n        console.debug('Failed to fetch quote from Wyre', error)\n        dispatch(updateQuote({quote: false}))\n      }\n    }\n\n  }, [dispatch, amount, account, sourceCurrency])\n\n  getQuote()\n\n}\n\n\nexport function useGetQuote() {\n  return {\n    quote: useSelector<AppState, AppState['wyre']['quote']>(state => state.wyre.quote)\n  }\n}"]},"metadata":{},"sourceType":"module"}