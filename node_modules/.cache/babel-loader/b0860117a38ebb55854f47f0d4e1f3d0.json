{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n\n  _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar CHAIN_ID = 1;\n\nvar WalletLinkConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(WalletLinkConnector, _AbstractConnector);\n\n  function WalletLinkConnector(_ref) {\n    var _this;\n\n    var url = _ref.url,\n        appName = _ref.appName,\n        appLogoUrl = _ref.appLogoUrl,\n        darkMode = _ref.darkMode,\n        supportedChainIds = _ref.supportedChainIds;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: supportedChainIds\n    }) || this;\n    _this.url = url;\n    _this.appName = appName;\n    _this.appLogoUrl = appLogoUrl;\n    _this.darkMode = darkMode || false;\n    _this.handleChainChanged = _this.handleChainChanged.bind(_assertThisInitialized(_this));\n    _this.handleAccountsChanged = _this.handleAccountsChanged.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = WalletLinkConnector.prototype;\n\n  _proto.activate = function activate() {\n    try {\n      var _this3 = this;\n\n      var _temp4 = function _temp4() {\n        return Promise.resolve(_this3.provider.request({\n          method: 'eth_requestAccounts'\n        })).then(function (accounts) {\n          var account = accounts[0];\n\n          _this3.provider.on('chainChanged', _this3.handleChainChanged);\n\n          _this3.provider.on('accountsChanged', _this3.handleAccountsChanged);\n\n          return {\n            provider: _this3.provider,\n            account: account\n          };\n        });\n      };\n\n      var _temp5 = function () {\n        if (window.ethereum && window.ethereum.isCoinbaseWallet === true) {\n          // user is in the dapp browser on Coinbase Wallet\n          _this3.provider = window.ethereum;\n        } else {\n          var _temp6 = function () {\n            if (!_this3.walletLink) {\n              return Promise.resolve(import('walletlink').then(function (m) {\n                var _m$default;\n\n                return (_m$default = m == null ? void 0 : m[\"default\"]) != null ? _m$default : m;\n              })).then(function (WalletLink) {\n                _this3.walletLink = new WalletLink(_extends({\n                  appName: _this3.appName,\n                  darkMode: _this3.darkMode\n                }, _this3.appLogoUrl ? {\n                  appLogoUrl: _this3.appLogoUrl\n                } : {}));\n                _this3.provider = _this3.walletLink.makeWeb3Provider(_this3.url, CHAIN_ID);\n              });\n            }\n          }();\n\n          if (_temp6 && _temp6.then) return _temp6.then(function () {});\n        }\n      }(); // @ts-ignore\n\n\n      return Promise.resolve(_temp5 && _temp5.then ? _temp5.then(_temp4) : _temp4(_temp5));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.provider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.provider.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n\n      return Promise.resolve(_this9.provider.request({\n        method: 'eth_requestAccounts'\n      })).then(function (accounts) {\n        return accounts[0];\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {\n    this.provider.removeListener('chainChanged', this.handleChainChanged);\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged);\n  };\n\n  _proto.close = function close() {\n    try {\n      var _this11 = this;\n\n      _this11.provider.close();\n\n      _this11.emitDeactivate();\n\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.handleChainChanged = function handleChainChanged(chainId) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId);\n    }\n\n    this.emitUpdate({\n      chainId: chainId\n    });\n  };\n\n  _proto.handleAccountsChanged = function handleAccountsChanged(accounts) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n    }\n\n    this.emitUpdate({\n      account: accounts[0]\n    });\n  };\n\n  return WalletLinkConnector;\n}(AbstractConnector);\n\nexport { WalletLinkConnector };","map":{"version":3,"sources":["../src/index.ts"],"names":["CHAIN_ID","WalletLinkConnector","url","appName","appLogoUrl","darkMode","supportedChainIds","window","walletLink","WalletLink","m","accounts","method","account","provider","deactivate","handleChainChanged","console","chainId","handleAccountsChanged"],"mappings":"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","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nconst CHAIN_ID = 1\n\ninterface WalletLinkConnectorArguments {\n  url: string\n  appName: string\n  appLogoUrl?: string\n  darkMode?: boolean\n  supportedChainIds?: number[]\n}\n\nexport class WalletLinkConnector extends AbstractConnector {\n  private readonly url: string\n  private readonly appName: string\n  private readonly appLogoUrl?: string\n  private readonly darkMode: boolean\n\n  public walletLink: any\n  private provider: any\n\n  constructor({ url, appName, appLogoUrl, darkMode, supportedChainIds }: WalletLinkConnectorArguments) {\n    super({ supportedChainIds: supportedChainIds })\n\n    this.url = url\n    this.appName = appName\n    this.appLogoUrl = appLogoUrl\n    this.darkMode = darkMode || false\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    // @ts-ignore\n    if (window.ethereum && window.ethereum.isCoinbaseWallet === true) {\n      // user is in the dapp browser on Coinbase Wallet\n      this.provider = window.ethereum\n    } else if (!this.walletLink) {\n      const WalletLink = await import('walletlink').then(m => m?.default ?? m)\n      this.walletLink = new WalletLink({\n        appName: this.appName,\n        darkMode: this.darkMode,\n        ...(this.appLogoUrl ? { appLogoUrl: this.appLogoUrl } : {})\n      })\n      this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID)\n    }\n\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    const account = accounts[0]\n\n    this.provider.on('chainChanged', this.handleChainChanged)\n    this.provider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.provider, account: account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.provider.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    return accounts[0]\n  }\n\n  public deactivate() {\n    this.provider.removeListener('chainChanged', this.handleChainChanged)\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged)\n  }\n\n  public async close() {\n    this.provider.close()\n    this.emitDeactivate()\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId: chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}