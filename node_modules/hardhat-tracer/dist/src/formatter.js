"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringifyValue = exports.formatEventArgs = void 0;
const chalk_1 = __importDefault(require("chalk"));
const ethers_1 = require("ethers");
const utils_1 = require("./utils");
function formatEventArgs(parsed, decimals, dependencies) {
    var _a;
    const stringifiedArgs = [];
    for (let i = 0; i < parsed.eventFragment.inputs.length; i++) {
        const input = parsed.eventFragment.inputs[i];
        const name = (_a = input.name) !== null && _a !== void 0 ? _a : `arg_${i}`;
        stringifiedArgs.push([
            name,
            decimals !== -1 && i === 2 // display formatted value for erc20 transfer events
                ? ethers_1.ethers.utils.formatUnits(parsed.args[2], decimals)
                : stringifyValue(parsed.args[i], dependencies),
        ]);
    }
    return `${stringifiedArgs
        .map((entry) => `${chalk_1.default.magenta(`${entry[0]}=`)}${entry[1]}`)
        .join(", ")}`;
}
exports.formatEventArgs = formatEventArgs;
function stringifyValue(value, dependencies) {
    if (value === null || value === void 0 ? void 0 : value._isBigNumber) {
        return ethers_1.ethers.BigNumber.from(value).toString();
    }
    else if (typeof value === "string" && value.slice(0, 2) !== "0x") {
        return `"${value}"`;
    }
    else if (typeof value === "string" &&
        value.slice(0, 2) === "0x" &&
        value.length === 42) {
        if (utils_1.getFromNameTags(value, dependencies)) {
            return chalk_1.default.italic(`[${utils_1.getFromNameTags(value, dependencies)}]`);
        }
        else {
            if (dependencies.tracerEnv._internal.printNameTagTip === undefined) {
                dependencies.tracerEnv._internal.printNameTagTip = "print it";
            }
            return value;
        }
    }
    else if (Array.isArray(value)) {
        return ("[" + value.map((v) => stringifyValue(v, dependencies)).join(", ") + "]");
    }
    else if (typeof value === "object" && value !== null) {
        // let newObj: any = {};
        // console.log("a");
        return ("{" +
            Object.entries(value)
                .map((entry) => {
                // console.log("b");
                // newObj[entry[0]] = stringifyValue(entry[1]);
                return `${entry[0]}:${stringifyValue(entry[1], dependencies)}`;
            })
                .join(", ") +
            "}");
    }
    else {
        return value;
    }
}
exports.stringifyValue = stringifyValue;
//# sourceMappingURL=formatter.js.map