"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@babel/core");
const rollup_plugin_babel_1 = tslib_1.__importDefault(require("rollup-plugin-babel"));
const lodash_merge_1 = tslib_1.__importDefault(require("lodash.merge"));
const core_2 = require("@babel/core");
exports.isTruthy = (obj) => {
    if (!obj) {
        return false;
    }
    return obj.constructor !== Object || Object.keys(obj).length > 0;
};
const replacements = [{ original: 'lodash', replacement: 'lodash-es' }];
exports.mergeConfigItems = (type, ...configItemsToMerge) => {
    const mergedItems = [];
    configItemsToMerge.forEach(configItemToMerge => {
        configItemToMerge.forEach((item) => {
            const itemToMergeWithIndex = mergedItems.findIndex(mergedItem => mergedItem.file.resolved === item.file.resolved);
            if (itemToMergeWithIndex === -1) {
                mergedItems.push(item);
                return;
            }
            mergedItems[itemToMergeWithIndex] = core_1.createConfigItem([
                mergedItems[itemToMergeWithIndex].file.resolved,
                lodash_merge_1.default(mergedItems[itemToMergeWithIndex].options, item.options),
            ], {
                type,
            });
        });
    });
    return mergedItems;
};
exports.createConfigItems = (type, items) => {
    return items.map((_a) => {
        var { name } = _a, options = tslib_1.__rest(_a, ["name"]);
        return core_1.createConfigItem([require.resolve(name), options], { type });
    });
};
exports.createBabelPlugin = (format, opts) => rollup_plugin_babel_1.default.custom(babelCore => ({
    // Passed the plugin options.
    options(_a) {
        var { custom: customOptions } = _a, pluginOptions = tslib_1.__rest(_a, ["custom"]);
        return {
            // Pull out any custom options that the plugin might have.
            customOptions,
            // Pass the options back with the two custom options removed.
            pluginOptions,
        };
    },
}));
exports.babelOptions = (format, opts) => ({
    exclude: 'node_modules/**',
    extensions: [...core_2.DEFAULT_EXTENSIONS, 'ts', 'tsx'],
    passPerPreset: true,
    presets: [
        [
            require.resolve('@babel/preset-env'),
            {
                loose: true,
                modules: false,
                targets: opts.target === 'node' ? { node: '8' } : undefined,
                exclude: ['transform-async-to-generator'],
            },
        ],
    ],
    plugins: [
        require.resolve('babel-plugin-annotate-pure-calls'),
        require.resolve('babel-plugin-dev-expression'),
        format !== 'cjs' && [
            require.resolve('babel-plugin-transform-rename-import'),
            { replacements },
        ],
        [
            require.resolve('babel-plugin-transform-async-to-promises'),
            { inlineHelpers: true, externalHelpers: true },
        ],
        [
            require.resolve('@babel/plugin-proposal-class-properties'),
            { loose: true },
        ],
        opts.extractErrors && require('./errors/transformErrorMessages'),
    ].filter(Boolean),
});
