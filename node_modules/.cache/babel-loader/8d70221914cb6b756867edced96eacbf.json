{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nconst initialState = {\n  independentField: Field.INPUT,\n  typedValue: '',\n  [Field.INPUT]: {\n    currencyId: ''\n  },\n  [Field.OUTPUT]: {\n    currencyId: ''\n  },\n  recipient: null\n};\nexport default createReducer(initialState, builder => builder.addCase(replaceSwapState, (state, {\n  payload: {\n    typedValue,\n    recipient,\n    field,\n    inputCurrencyId,\n    outputCurrencyId\n  }\n}) => {\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId\n    },\n    independentField: field,\n    typedValue: typedValue,\n    recipient\n  };\n}).addCase(selectCurrency, (state, {\n  payload: {\n    currencyId,\n    field\n  }\n}) => {\n  const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n\n  if (currencyId === state[otherField].currencyId) {\n    // the case where we have to swap the order\n    return { ...state,\n      independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n      [field]: {\n        currencyId: currencyId\n      },\n      [otherField]: {\n        currencyId: state[field].currencyId\n      }\n    };\n  } else {\n    // the normal case\n    return { ...state,\n      [field]: {\n        currencyId: currencyId\n      }\n    };\n  }\n}).addCase(switchCurrencies, state => {\n  return { ...state,\n    independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n    [Field.INPUT]: {\n      currencyId: state[Field.OUTPUT].currencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: state[Field.INPUT].currencyId\n    }\n  };\n}).addCase(typeInput, (state, {\n  payload: {\n    field,\n    typedValue\n  }\n}) => {\n  return { ...state,\n    independentField: field,\n    typedValue\n  };\n}).addCase(setRecipient, (state, {\n  payload: {\n    recipient\n  }\n}) => {\n  state.recipient = recipient;\n}));","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/state/swap/reducer.ts"],"names":["createReducer","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","initialState","independentField","INPUT","typedValue","currencyId","OUTPUT","recipient","builder","addCase","state","payload","field","inputCurrencyId","outputCurrencyId","otherField"],"mappings":"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","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\n\nexport interface SwapState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly [Field.INPUT]: {\n    readonly currencyId: string | undefined\n  }\n  readonly [Field.OUTPUT]: {\n    readonly currencyId: string | undefined\n  }\n  // the typed recipient address or ENS name, or null if swap should go to sender\n  readonly recipient: string | null\n}\n\nconst initialState: SwapState = {\n  independentField: Field.INPUT,\n  typedValue: '',\n  [Field.INPUT]: {\n    currencyId: ''\n  },\n  [Field.OUTPUT]: {\n    currencyId: ''\n  },\n  recipient: null\n}\n\nexport default createReducer<SwapState>(initialState, builder =>\n  builder\n    .addCase(\n      replaceSwapState,\n      (state, { payload: { typedValue, recipient, field, inputCurrencyId, outputCurrencyId } }) => {\n        return {\n          [Field.INPUT]: {\n            currencyId: inputCurrencyId\n          },\n          [Field.OUTPUT]: {\n            currencyId: outputCurrencyId\n          },\n          independentField: field,\n          typedValue: typedValue,\n          recipient\n        }\n      }\n    )\n    .addCase(selectCurrency, (state, { payload: { currencyId, field } }) => {\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT\n      if (currencyId === state[otherField].currencyId) {\n        // the case where we have to swap the order\n        return {\n          ...state,\n          independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n          [field]: { currencyId: currencyId },\n          [otherField]: { currencyId: state[field].currencyId }\n        }\n      } else {\n        // the normal case\n        return {\n          ...state,\n          [field]: { currencyId: currencyId }\n        }\n      }\n    })\n    .addCase(switchCurrencies, state => {\n      return {\n        ...state,\n        independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n        [Field.INPUT]: { currencyId: state[Field.OUTPUT].currencyId },\n        [Field.OUTPUT]: { currencyId: state[Field.INPUT].currencyId }\n      }\n    })\n    .addCase(typeInput, (state, { payload: { field, typedValue } }) => {\n      return {\n        ...state,\n        independentField: field,\n        typedValue\n      }\n    })\n    .addCase(setRecipient, (state, { payload: { recipient } }) => {\n      state.recipient = recipient\n    })\n)\n"]},"metadata":{},"sourceType":"module"}