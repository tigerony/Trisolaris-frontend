{"ast":null,"code":"import { useMemo } from 'react';\nimport { useAllTokenBalances } from '../../state/wallet/hooks'; // compare two token amounts with highest one coming first\n\nfunction balanceComparator(balanceA, balanceB) {\n  if (balanceA && balanceB) {\n    return balanceA.greaterThan(balanceB) ? -1 : balanceA.equalTo(balanceB) ? 0 : 1;\n  } else if (balanceA && balanceA.greaterThan('0')) {\n    return -1;\n  } else if (balanceB && balanceB.greaterThan('0')) {\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction getTokenComparator(balances) {\n  return function sortTokens(tokenA, tokenB) {\n    // -1 = a is first\n    // 1 = b is first\n    // sort by balances\n    const balanceA = balances[tokenA.address];\n    const balanceB = balances[tokenB.address];\n    const balanceComp = balanceComparator(balanceA, balanceB);\n    if (balanceComp !== 0) return balanceComp;\n\n    if (tokenA.symbol && tokenB.symbol) {\n      // sort by symbol\n      return tokenA.symbol.toLowerCase() < tokenB.symbol.toLowerCase() ? -1 : 1;\n    } else {\n      return tokenA.symbol ? -1 : tokenB.symbol ? -1 : 0;\n    }\n  };\n}\n\nexport function useTokenComparator(inverted) {\n  const balances = useAllTokenBalances();\n  const comparator = useMemo(() => getTokenComparator(balances !== null && balances !== void 0 ? balances : {}), [balances]);\n  return useMemo(() => {\n    if (inverted) {\n      return (tokenA, tokenB) => comparator(tokenA, tokenB) * -1;\n    } else {\n      return comparator;\n    }\n  }, [inverted, comparator]);\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/components/SearchModal/sorting.ts"],"names":["useMemo","useAllTokenBalances","balanceComparator","balanceA","balanceB","greaterThan","equalTo","getTokenComparator","balances","sortTokens","tokenA","tokenB","address","balanceComp","symbol","toLowerCase","useTokenComparator","inverted","comparator"],"mappings":"AACA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CAEA;;AACA,SAASC,iBAAT,CAA2BC,QAA3B,EAAmDC,QAAnD,EAA2E;AACzE,MAAID,QAAQ,IAAIC,QAAhB,EAA0B;AACxB,WAAOD,QAAQ,CAACE,WAAT,CAAqBD,QAArB,IAAiC,CAAC,CAAlC,GAAsCD,QAAQ,CAACG,OAAT,CAAiBF,QAAjB,IAA6B,CAA7B,GAAiC,CAA9E;AACD,GAFD,MAEO,IAAID,QAAQ,IAAIA,QAAQ,CAACE,WAAT,CAAqB,GAArB,CAAhB,EAA2C;AAChD,WAAO,CAAC,CAAR;AACD,GAFM,MAEA,IAAID,QAAQ,IAAIA,QAAQ,CAACC,WAAT,CAAqB,GAArB,CAAhB,EAA2C;AAChD,WAAO,CAAP;AACD;;AACD,SAAO,CAAP;AACD;;AAED,SAASE,kBAAT,CAA4BC,QAA5B,EAE6C;AAC3C,SAAO,SAASC,UAAT,CAAoBC,MAApB,EAAmCC,MAAnC,EAA0D;AAC/D;AACA;AAEA;AACA,UAAMR,QAAQ,GAAGK,QAAQ,CAACE,MAAM,CAACE,OAAR,CAAzB;AACA,UAAMR,QAAQ,GAAGI,QAAQ,CAACG,MAAM,CAACC,OAAR,CAAzB;AAEA,UAAMC,WAAW,GAAGX,iBAAiB,CAACC,QAAD,EAAWC,QAAX,CAArC;AACA,QAAIS,WAAW,KAAK,CAApB,EAAuB,OAAOA,WAAP;;AAEvB,QAAIH,MAAM,CAACI,MAAP,IAAiBH,MAAM,CAACG,MAA5B,EAAoC;AAClC;AACA,aAAOJ,MAAM,CAACI,MAAP,CAAcC,WAAd,KAA8BJ,MAAM,CAACG,MAAP,CAAcC,WAAd,EAA9B,GAA4D,CAAC,CAA7D,GAAiE,CAAxE;AACD,KAHD,MAGO;AACL,aAAOL,MAAM,CAACI,MAAP,GAAgB,CAAC,CAAjB,GAAqBH,MAAM,CAACG,MAAP,GAAgB,CAAC,CAAjB,GAAqB,CAAjD;AACD;AACF,GAjBD;AAkBD;;AAED,OAAO,SAASE,kBAAT,CAA4BC,QAA5B,EAAyF;AAC9F,QAAMT,QAAQ,GAAGP,mBAAmB,EAApC;AACA,QAAMiB,UAAU,GAAGlB,OAAO,CAAC,MAAMO,kBAAkB,CAACC,QAAD,aAACA,QAAD,cAACA,QAAD,GAAa,EAAb,CAAzB,EAA2C,CAACA,QAAD,CAA3C,CAA1B;AACA,SAAOR,OAAO,CAAC,MAAM;AACnB,QAAIiB,QAAJ,EAAc;AACZ,aAAO,CAACP,MAAD,EAAgBC,MAAhB,KAAkCO,UAAU,CAACR,MAAD,EAASC,MAAT,CAAV,GAA6B,CAAC,CAAvE;AACD,KAFD,MAEO;AACL,aAAOO,UAAP;AACD;AACF,GANa,EAMX,CAACD,QAAD,EAAWC,UAAX,CANW,CAAd;AAOD","sourcesContent":["import { Token, TokenAmount } from '@pangolindex/sdk'\nimport { useMemo } from 'react'\nimport { useAllTokenBalances } from '../../state/wallet/hooks'\n\n// compare two token amounts with highest one coming first\nfunction balanceComparator(balanceA?: TokenAmount, balanceB?: TokenAmount) {\n  if (balanceA && balanceB) {\n    return balanceA.greaterThan(balanceB) ? -1 : balanceA.equalTo(balanceB) ? 0 : 1\n  } else if (balanceA && balanceA.greaterThan('0')) {\n    return -1\n  } else if (balanceB && balanceB.greaterThan('0')) {\n    return 1\n  }\n  return 0\n}\n\nfunction getTokenComparator(balances: {\n  [tokenAddress: string]: TokenAmount | undefined\n}): (tokenA: Token, tokenB: Token) => number {\n  return function sortTokens(tokenA: Token, tokenB: Token): number {\n    // -1 = a is first\n    // 1 = b is first\n\n    // sort by balances\n    const balanceA = balances[tokenA.address]\n    const balanceB = balances[tokenB.address]\n\n    const balanceComp = balanceComparator(balanceA, balanceB)\n    if (balanceComp !== 0) return balanceComp\n\n    if (tokenA.symbol && tokenB.symbol) {\n      // sort by symbol\n      return tokenA.symbol.toLowerCase() < tokenB.symbol.toLowerCase() ? -1 : 1\n    } else {\n      return tokenA.symbol ? -1 : tokenB.symbol ? -1 : 0\n    }\n  }\n}\n\nexport function useTokenComparator(inverted: boolean): (tokenA: Token, tokenB: Token) => number {\n  const balances = useAllTokenBalances()\n  const comparator = useMemo(() => getTokenComparator(balances ?? {}), [balances])\n  return useMemo(() => {\n    if (inverted) {\n      return (tokenA: Token, tokenB: Token) => comparator(tokenA, tokenB) * -1\n    } else {\n      return comparator\n    }\n  }, [inverted, comparator])\n}\n"]},"metadata":{},"sourceType":"module"}