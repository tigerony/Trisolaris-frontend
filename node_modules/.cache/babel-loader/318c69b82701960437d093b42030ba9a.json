{"ast":null,"code":"'use strict';\n\nconst {\n  encodeText\n} = require('./util');\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n\n/** @typedef {import(\"./types\").BaseName} BaseName */\n\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\n\n\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor(name, code, factory, alphabet) {\n    this.name = name;\n    this.code = code;\n    this.codeBuf = encodeText(this.code);\n    this.alphabet = alphabet;\n    this.codec = factory(alphabet);\n  }\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n\n\n  encode(buf) {\n    return this.codec.encode(buf);\n  }\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n\n\n  decode(string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`);\n      }\n    }\n\n    return this.codec.decode(string);\n  }\n\n}\n\nmodule.exports = Base;","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/node_modules/multibase/src/base.js"],"names":["encodeText","require","Base","constructor","name","code","factory","alphabet","codeBuf","codec","encode","buf","decode","string","char","indexOf","Error","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAiBC,OAAO,CAAC,QAAD,CAA9B;AAEA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;;;AACA,MAAMC,IAAN,CAAW;AACT;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,IAAF,EAAQC,IAAR,EAAcC,OAAd,EAAuBC,QAAvB,EAAiC;AAC1C,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKG,OAAL,GAAeR,UAAU,CAAC,KAAKK,IAAN,CAAzB;AACA,SAAKE,QAAL,GAAgBA,QAAhB;AACA,SAAKE,KAAL,GAAaH,OAAO,CAACC,QAAD,CAApB;AACD;AAED;AACF;AACA;AACA;;;AACEG,EAAAA,MAAM,CAAEC,GAAF,EAAO;AACX,WAAO,KAAKF,KAAL,CAAWC,MAAX,CAAkBC,GAAlB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEC,EAAAA,MAAM,CAAEC,MAAF,EAAU;AACd,SAAK,MAAMC,IAAX,IAAmBD,MAAnB,EAA2B;AACzB,UAAI,KAAKN,QAAL,IAAiB,KAAKA,QAAL,CAAcQ,OAAd,CAAsBD,IAAtB,IAA8B,CAAnD,EAAsD;AACpD,cAAM,IAAIE,KAAJ,CAAW,sBAAqBF,IAAK,SAAQD,MAAO,GAApD,CAAN;AACD;AACF;;AACD,WAAO,KAAKJ,KAAL,CAAWG,MAAX,CAAkBC,MAAlB,CAAP;AACD;;AAlCQ;;AAqCXI,MAAM,CAACC,OAAP,GAAiBhB,IAAjB","sourcesContent":["'use strict'\n\nconst { encodeText } = require('./util')\n\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n/** @typedef {import(\"./types\").BaseName} BaseName */\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor (name, code, factory, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = encodeText(this.code)\n    this.alphabet = alphabet\n    this.codec = factory(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.codec.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.codec.decode(string)\n  }\n}\n\nmodule.exports = Base\n"]},"metadata":{},"sourceType":"script"}