{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { Field, resetMintState, typeInput } from './actions';\nconst initialState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: ''\n};\nexport default createReducer(initialState, builder => builder.addCase(resetMintState, () => initialState).addCase(typeInput, (state, {\n  payload: {\n    field,\n    typedValue,\n    noLiquidity\n  }\n}) => {\n  if (noLiquidity) {\n    // they're typing into the field they've last typed in\n    if (field === state.independentField) {\n      return { ...state,\n        independentField: field,\n        typedValue\n      };\n    } // they're typing into a new field, store the other value\n    else {\n        return { ...state,\n          independentField: field,\n          typedValue,\n          otherTypedValue: state.typedValue\n        };\n      }\n  } else {\n    return { ...state,\n      independentField: field,\n      typedValue,\n      otherTypedValue: ''\n    };\n  }\n}));","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/state/mint/reducer.ts"],"names":["createReducer","Field","resetMintState","typeInput","initialState","independentField","CURRENCY_A","typedValue","otherTypedValue","builder","addCase","state","payload","field","noLiquidity"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AACA,SAASC,KAAT,EAAgBC,cAAhB,EAAgCC,SAAhC,QAAiD,WAAjD;AAQA,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,gBAAgB,EAAEJ,KAAK,CAACK,UADM;AAE9BC,EAAAA,UAAU,EAAE,EAFkB;AAG9BC,EAAAA,eAAe,EAAE;AAHa,CAAhC;AAMA,eAAeR,aAAa,CAAYI,YAAZ,EAA0BK,OAAO,IAC3DA,OAAO,CACJC,OADH,CACWR,cADX,EAC2B,MAAME,YADjC,EAEGM,OAFH,CAEWP,SAFX,EAEsB,CAACQ,KAAD,EAAQ;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASN,IAAAA,UAAT;AAAqBO,IAAAA;AAArB;AAAX,CAAR,KAA4D;AAC9E,MAAIA,WAAJ,EAAiB;AACf;AACA,QAAID,KAAK,KAAKF,KAAK,CAACN,gBAApB,EAAsC;AACpC,aAAO,EACL,GAAGM,KADE;AAELN,QAAAA,gBAAgB,EAAEQ,KAFb;AAGLN,QAAAA;AAHK,OAAP;AAKD,KAND,CAOA;AAPA,SAQK;AACH,eAAO,EACL,GAAGI,KADE;AAELN,UAAAA,gBAAgB,EAAEQ,KAFb;AAGLN,UAAAA,UAHK;AAILC,UAAAA,eAAe,EAAEG,KAAK,CAACJ;AAJlB,SAAP;AAMD;AACF,GAlBD,MAkBO;AACL,WAAO,EACL,GAAGI,KADE;AAELN,MAAAA,gBAAgB,EAAEQ,KAFb;AAGLN,MAAAA,UAHK;AAILC,MAAAA,eAAe,EAAE;AAJZ,KAAP;AAMD;AACF,CA7BH,CAD0B,CAA5B","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { Field, resetMintState, typeInput } from './actions'\n\nexport interface MintState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly otherTypedValue: string // for the case when there's no liquidity\n}\n\nconst initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: ''\n}\n\nexport default createReducer<MintState>(initialState, builder =>\n  builder\n    .addCase(resetMintState, () => initialState)\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\n      if (noLiquidity) {\n        // they're typing into the field they've last typed in\n        if (field === state.independentField) {\n          return {\n            ...state,\n            independentField: field,\n            typedValue\n          }\n        }\n        // they're typing into a new field, store the other value\n        else {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n            otherTypedValue: state.typedValue\n          }\n        }\n      } else {\n        return {\n          ...state,\n          independentField: field,\n          typedValue,\n          otherTypedValue: ''\n        }\n      }\n    })\n)\n"]},"metadata":{},"sourceType":"module"}