{"ast":null,"code":"import { CurrencyAmount, CAVAX, InsufficientInputAmountError, JSBI, Percent, Price } from '@pangolindex/sdk';\nimport { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PairState, usePair } from '../../data/Reserves';\nimport { useTotalSupply } from '../../data/TotalSupply';\nimport { useActiveWeb3React } from '../../hooks';\nimport { wrappedCurrency, wrappedCurrencyAmount } from '../../utils/wrappedCurrency';\nimport { tryParseAmount } from '../swap/hooks';\nimport { useCurrencyBalances } from '../wallet/hooks';\nimport { Field, typeInput } from './actions';\nimport { useTranslation } from 'react-i18next';\nconst ZERO = JSBI.BigInt(0);\nexport function useMintState() {\n  return useSelector(state => state.mint);\n}\nexport function useDerivedMintInfo(currencyA, currencyB) {\n  var _currencyBalances$Fie, _currencyBalances$Fie2;\n\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const {\n    t\n  } = useTranslation();\n  const {\n    independentField,\n    typedValue,\n    otherTypedValue\n  } = useMintState();\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A; // error handling\n\n  let insufficientInput = false; // tokens\n\n  const currencies = useMemo(() => ({\n    [Field.CURRENCY_A]: currencyA !== null && currencyA !== void 0 ? currencyA : undefined,\n    [Field.CURRENCY_B]: currencyB !== null && currencyB !== void 0 ? currencyB : undefined\n  }), [currencyA, currencyB]); // pair\n\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]);\n  const totalSupply = useTotalSupply(pair === null || pair === void 0 ? void 0 : pair.liquidityToken);\n  const noLiquidity = pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.raw, ZERO)); // balances\n\n  const balances = useCurrencyBalances(account !== null && account !== void 0 ? account : undefined, [currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B]]);\n  const currencyBalances = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1]\n  }; // amounts\n\n  const independentAmount = tryParseAmount(typedValue, currencies[independentField]);\n  const dependentAmount = useMemo(() => {\n    if (noLiquidity) {\n      if (otherTypedValue && currencies[dependentField]) {\n        return tryParseAmount(otherTypedValue, currencies[dependentField]);\n      }\n\n      return undefined;\n    } else if (independentAmount) {\n      // we wrap the currencies just to get the price in terms of the other token\n      const wrappedIndependentAmount = wrappedCurrencyAmount(independentAmount, chainId);\n      const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)];\n\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA;\n        const dependentTokenAmount = dependentField === Field.CURRENCY_B ? pair.priceOf(tokenA).quote(wrappedIndependentAmount) : pair.priceOf(tokenB).quote(wrappedIndependentAmount);\n        return dependentCurrency === CAVAX ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount;\n      }\n\n      return undefined;\n    } else {\n      return undefined;\n    }\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, chainId, currencyB, pair]);\n  const parsedAmounts = {\n    [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n    [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount\n  };\n  const price = useMemo(() => {\n    if (noLiquidity) {\n      const {\n        [Field.CURRENCY_A]: currencyAAmount,\n        [Field.CURRENCY_B]: currencyBAmount\n      } = parsedAmounts;\n\n      if (currencyAAmount && currencyBAmount) {\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, currencyAAmount.raw, currencyBAmount.raw);\n      }\n\n      return undefined;\n    } else {\n      const wrappedCurrencyA = wrappedCurrency(currencyA, chainId);\n      return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined;\n    }\n  }, [chainId, currencyA, noLiquidity, pair, parsedAmounts]); // liquidity minted\n\n  const liquidityMinted = useMemo(() => {\n    const {\n      [Field.CURRENCY_A]: currencyAAmount,\n      [Field.CURRENCY_B]: currencyBAmount\n    } = parsedAmounts;\n    const [tokenAmountA, tokenAmountB] = [wrappedCurrencyAmount(currencyAAmount, chainId), wrappedCurrencyAmount(currencyBAmount, chainId)];\n    insufficientInput = false;\n\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\n      try {\n        return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB);\n      } catch (err) {\n        if (err instanceof InsufficientInputAmountError) {\n          insufficientInput = true;\n          return undefined;\n        } else {\n          throw err;\n        }\n      }\n    } else {\n      return undefined;\n    }\n  }, [parsedAmounts, chainId, pair, totalSupply]);\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw);\n    } else {\n      return undefined;\n    }\n  }, [liquidityMinted, totalSupply]);\n  let error;\n\n  if (!account) {\n    error = t('mintHooks.connectWallet');\n  }\n\n  if (insufficientInput) {\n    error = t('mintHooks.insufficientInputAmount');\n  }\n\n  if (pairState === PairState.INVALID) {\n    var _error;\n\n    error = (_error = error) !== null && _error !== void 0 ? _error : t('mintHooks.invalidPair');\n  }\n\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    var _error2;\n\n    error = (_error2 = error) !== null && _error2 !== void 0 ? _error2 : t('mintHooks.enterAmount');\n  }\n\n  const {\n    [Field.CURRENCY_A]: currencyAAmount,\n    [Field.CURRENCY_B]: currencyBAmount\n  } = parsedAmounts;\n\n  if (currencyAAmount && (currencyBalances === null || currencyBalances === void 0 ? void 0 : (_currencyBalances$Fie = currencyBalances[Field.CURRENCY_A]) === null || _currencyBalances$Fie === void 0 ? void 0 : _currencyBalances$Fie.lessThan(currencyAAmount))) {\n    var _currencies$Field$CUR;\n\n    error = t('mintHooks.insufficient') + ((_currencies$Field$CUR = currencies[Field.CURRENCY_A]) === null || _currencies$Field$CUR === void 0 ? void 0 : _currencies$Field$CUR.symbol) + t('mintHooks.balance');\n  }\n\n  if (currencyBAmount && (currencyBalances === null || currencyBalances === void 0 ? void 0 : (_currencyBalances$Fie2 = currencyBalances[Field.CURRENCY_B]) === null || _currencyBalances$Fie2 === void 0 ? void 0 : _currencyBalances$Fie2.lessThan(currencyBAmount))) {\n    var _currencies$Field$CUR2;\n\n    error = t('mintHooks.insufficient') + ((_currencies$Field$CUR2 = currencies[Field.CURRENCY_B]) === null || _currencies$Field$CUR2 === void 0 ? void 0 : _currencies$Field$CUR2.symbol) + t('mintHooks.balance');\n  }\n\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  };\n}\nexport function useMintActionHandlers(noLiquidity) {\n  const dispatch = useDispatch();\n  const onFieldAInput = useCallback(typedValue => {\n    dispatch(typeInput({\n      field: Field.CURRENCY_A,\n      typedValue,\n      noLiquidity: noLiquidity === true\n    }));\n  }, [dispatch, noLiquidity]);\n  const onFieldBInput = useCallback(typedValue => {\n    dispatch(typeInput({\n      field: Field.CURRENCY_B,\n      typedValue,\n      noLiquidity: noLiquidity === true\n    }));\n  }, [dispatch, noLiquidity]);\n  return {\n    onFieldAInput,\n    onFieldBInput\n  };\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/state/mint/hooks.ts"],"names":["CurrencyAmount","CAVAX","InsufficientInputAmountError","JSBI","Percent","Price","useCallback","useMemo","useDispatch","useSelector","PairState","usePair","useTotalSupply","useActiveWeb3React","wrappedCurrency","wrappedCurrencyAmount","tryParseAmount","useCurrencyBalances","Field","typeInput","useTranslation","ZERO","BigInt","useMintState","state","mint","useDerivedMintInfo","currencyA","currencyB","account","chainId","t","independentField","typedValue","otherTypedValue","dependentField","CURRENCY_A","CURRENCY_B","insufficientInput","currencies","undefined","pairState","pair","totalSupply","liquidityToken","noLiquidity","NOT_EXISTS","Boolean","equal","raw","balances","currencyBalances","independentAmount","dependentAmount","wrappedIndependentAmount","tokenA","tokenB","dependentCurrency","dependentTokenAmount","priceOf","quote","ether","parsedAmounts","price","currencyAAmount","currencyBAmount","currency","wrappedCurrencyA","liquidityMinted","tokenAmountA","tokenAmountB","getLiquidityMinted","err","poolTokenPercentage","add","error","INVALID","lessThan","symbol","useMintActionHandlers","dispatch","onFieldAInput","field","onFieldBInput"],"mappings":"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","sourcesContent":["import { Currency, CurrencyAmount, CAVAX, InsufficientInputAmountError, JSBI, Pair, Percent, Price, TokenAmount } from '@pangolindex/sdk'\nimport { useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { PairState, usePair } from '../../data/Reserves'\nimport { useTotalSupply } from '../../data/TotalSupply'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { wrappedCurrency, wrappedCurrencyAmount } from '../../utils/wrappedCurrency'\nimport { AppDispatch, AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\nimport { useTranslation } from 'react-i18next'\n\nconst ZERO = JSBI.BigInt(0)\n\nexport function useMintState(): AppState['mint'] {\n  return useSelector<AppState, AppState['mint']>(state => state.mint)\n}\n\nexport function useDerivedMintInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined\n): {\n  dependentField: Field\n  currencies: { [field in Field]?: Currency }\n  pair?: Pair | null\n  pairState: PairState\n  currencyBalances: { [field in Field]?: CurrencyAmount }\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\n  price?: Price\n  noLiquidity?: boolean\n  liquidityMinted?: TokenAmount\n  poolTokenPercentage?: Percent\n  error?: string\n} {\n  const { account, chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  const { independentField, typedValue, otherTypedValue } = useMintState()\n\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\n\n  // error handling\n  let insufficientInput: boolean = false\n\n  // tokens\n  const currencies: { [field in Field]?: Currency } = useMemo(\n    () => ({\n      [Field.CURRENCY_A]: currencyA ?? undefined,\n      [Field.CURRENCY_B]: currencyB ?? undefined\n    }),\n    [currencyA, currencyB]\n  )\n\n  // pair\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n\n  const noLiquidity: boolean =\n    pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.raw, ZERO))\n\n  // balances\n  const balances = useCurrencyBalances(account ?? undefined, [\n    currencies[Field.CURRENCY_A],\n    currencies[Field.CURRENCY_B]\n  ])\n  const currencyBalances: { [field in Field]?: CurrencyAmount } = {\n    [Field.CURRENCY_A]: balances[0],\n    [Field.CURRENCY_B]: balances[1]\n  }\n\n  // amounts\n  const independentAmount: CurrencyAmount | undefined = tryParseAmount(typedValue, currencies[independentField])\n  const dependentAmount: CurrencyAmount | undefined = useMemo(() => {\n    if (noLiquidity) {\n      if (otherTypedValue && currencies[dependentField]) {\n        return tryParseAmount(otherTypedValue, currencies[dependentField])\n      }\n      return undefined\n    } else if (independentAmount) {\n      // we wrap the currencies just to get the price in terms of the other token\n      const wrappedIndependentAmount = wrappedCurrencyAmount(independentAmount, chainId)\n      const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\n        const dependentTokenAmount =\n          dependentField === Field.CURRENCY_B\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\n        return dependentCurrency === CAVAX ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount\n      }\n      return undefined\n    } else {\n      return undefined\n    }\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, chainId, currencyB, pair])\n  const parsedAmounts: { [field in Field]: CurrencyAmount | undefined } = {\n    [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\n    [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount\n  }\n\n  const price = useMemo(() => {\n    if (noLiquidity) {\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n      if (currencyAAmount && currencyBAmount) {\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, currencyAAmount.raw, currencyBAmount.raw)\n      }\n      return undefined\n    } else {\n      const wrappedCurrencyA = wrappedCurrency(currencyA, chainId)\n      return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\n    }\n  }, [chainId, currencyA, noLiquidity, pair, parsedAmounts])\n\n  // liquidity minted\n  const liquidityMinted = useMemo(() => {\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n    const [tokenAmountA, tokenAmountB] = [\n      wrappedCurrencyAmount(currencyAAmount, chainId),\n      wrappedCurrencyAmount(currencyBAmount, chainId)\n    ]\n    insufficientInput = false\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\n      try {\n        return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\n      }\n      catch (err) {\n        if (err instanceof InsufficientInputAmountError) {\n          insufficientInput = true\n          return undefined\n        }\n        else {\n          throw err\n        }\n      }\n    } else {\n      return undefined\n    }\n  }, [parsedAmounts, chainId, pair, totalSupply])\n\n  const poolTokenPercentage = useMemo(() => {\n    if (liquidityMinted && totalSupply) {\n      return new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw)\n    } else {\n      return undefined\n    }\n  }, [liquidityMinted, totalSupply])\n\n  let error: string | undefined\n  if (!account) {\n    error = t('mintHooks.connectWallet')\n  }\n\n  if (insufficientInput) {\n    error = t('mintHooks.insufficientInputAmount')\n  }\n\n  if (pairState === PairState.INVALID) {\n    error = error ?? t('mintHooks.invalidPair')\n  }\n\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? t('mintHooks.enterAmount')\n  }\n\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\n\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\n    error = t('mintHooks.insufficient') + currencies[Field.CURRENCY_A]?.symbol + t('mintHooks.balance')\n  }\n\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\n    error = t('mintHooks.insufficient') + currencies[Field.CURRENCY_B]?.symbol + t('mintHooks.balance')\n  }\n\n  return {\n    dependentField,\n    currencies,\n    pair,\n    pairState,\n    currencyBalances,\n    parsedAmounts,\n    price,\n    noLiquidity,\n    liquidityMinted,\n    poolTokenPercentage,\n    error\n  }\n}\n\nexport function useMintActionHandlers(\n  noLiquidity: boolean | undefined\n): {\n  onFieldAInput: (typedValue: string) => void\n  onFieldBInput: (typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onFieldAInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity]\n  )\n  const onFieldBInput = useCallback(\n    (typedValue: string) => {\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\n    },\n    [dispatch, noLiquidity]\n  )\n\n  return {\n    onFieldAInput,\n    onFieldBInput\n  }\n}\n"]},"metadata":{},"sourceType":"module"}