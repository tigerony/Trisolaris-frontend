{"ast":null,"code":"var _jsxFileName = \"/Users/sidshekhar/Documents/interface/src/components/earn/UnstakingModal.tsx\";\nimport React, { useState } from 'react';\nimport Modal from '../Modal';\nimport { AutoColumn } from '../Column';\nimport styled from 'styled-components';\nimport { RowBetween } from '../Row';\nimport { TYPE, CloseIcon } from '../../theme';\nimport { ButtonError } from '../Button';\nimport { useStakingContract } from '../../hooks/useContract';\nimport { SubmittedView, LoadingView } from '../ModalViews';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport FormattedCurrencyAmount from '../FormattedCurrencyAmount';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useTranslation } from 'react-i18next';\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n  padding: 1rem;\n`;\nexport default function UnstakingModal({\n  isOpen,\n  onDismiss,\n  stakingInfo\n}) {\n  var _error2, _stakingInfo$stakedAm, _stakingInfo$earnedAm;\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const {\n    t\n  } = useTranslation(); // monitor call to help UI loading state\n\n  const addTransaction = useTransactionAdder();\n  const [hash, setHash] = useState();\n  const [attempting, setAttempting] = useState(false);\n\n  function wrappedOndismiss() {\n    setHash(undefined);\n    setAttempting(false);\n    onDismiss();\n  }\n\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress);\n\n  async function onWithdraw() {\n    if (stakingContract && (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n      setAttempting(true);\n      await stakingContract.exit({\n        gasLimit: 300000\n      }).then(response => {\n        addTransaction(response, {\n          summary: t('earn.withdrawDepositedLiquidity')\n        });\n        setHash(response.hash);\n      }).catch(error => {\n        setAttempting(false);\n        console.log(error);\n      });\n    }\n  }\n\n  let error;\n\n  if (!account) {\n    error = t('earn.connectWallet');\n  }\n\n  if (!(stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n    var _error;\n\n    error = (_error = error) !== null && _error !== void 0 ? _error : t('earn.enterAmount');\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpen,\n    onDismiss: wrappedOndismiss,\n    maxHeight: 90,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, !attempting && !hash && /*#__PURE__*/React.createElement(ContentWrapper, {\n    gap: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.mediumHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, \"Withdraw\"), /*#__PURE__*/React.createElement(CloseIcon, {\n    onClick: wrappedOndismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  })), (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount) && /*#__PURE__*/React.createElement(AutoColumn, {\n    justify: \"center\",\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    fontWeight: 600,\n    fontSize: 36,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormattedCurrencyAmount, {\n    currencyAmount: stakingInfo.stakedAmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 18\n    }\n  })), /*#__PURE__*/React.createElement(TYPE.body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, t('earn.depositedPglLiquidity'))), (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.earnedAmount) && /*#__PURE__*/React.createElement(AutoColumn, {\n    justify: \"center\",\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    fontWeight: 600,\n    fontSize: 36,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormattedCurrencyAmount, {\n    currencyAmount: stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.earnedAmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 18\n    }\n  })), /*#__PURE__*/React.createElement(TYPE.body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, t('earn.unclaimedPng'))), /*#__PURE__*/React.createElement(TYPE.subHeader, {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, t('earn.whenYouWithdrawWarning')), /*#__PURE__*/React.createElement(ButtonError, {\n    disabled: !!error,\n    error: !!error && !!(stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount),\n    onClick: onWithdraw,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, (_error2 = error) !== null && _error2 !== void 0 ? _error2 : t('earn.withdrawAndClaim'))), attempting && !hash && /*#__PURE__*/React.createElement(LoadingView, {\n    onDismiss: wrappedOndismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"12px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, t('earn.withdrawingPgl', {\n    \"amount\": stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm === void 0 ? void 0 : _stakingInfo$stakedAm.toSignificant(4)\n  })), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, t('earn.claimingPng', {\n    \"amount\": stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$earnedAm = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm === void 0 ? void 0 : _stakingInfo$earnedAm.toSignificant(4)\n  })))), hash && /*#__PURE__*/React.createElement(SubmittedView, {\n    onDismiss: wrappedOndismiss,\n    hash: hash,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"12px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.largeHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, t('earn.transactionSubmitted')), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, t('earn.withdrewPgl')), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, t('earn.claimedPng')))));\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/components/earn/UnstakingModal.tsx"],"names":["React","useState","Modal","AutoColumn","styled","RowBetween","TYPE","CloseIcon","ButtonError","useStakingContract","SubmittedView","LoadingView","useTransactionAdder","FormattedCurrencyAmount","useActiveWeb3React","useTranslation","ContentWrapper","UnstakingModal","isOpen","onDismiss","stakingInfo","account","t","addTransaction","hash","setHash","attempting","setAttempting","wrappedOndismiss","undefined","stakingContract","stakingRewardAddress","onWithdraw","stakedAmount","exit","gasLimit","then","response","summary","catch","error","console","log","earnedAmount","textAlign","toSignificant"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Modal from '../Modal'\nimport { AutoColumn } from '../Column'\nimport styled from 'styled-components'\nimport { RowBetween } from '../Row'\nimport { TYPE, CloseIcon } from '../../theme'\nimport { ButtonError } from '../Button'\nimport { StakingInfo } from '../../state/stake/hooks'\nimport { useStakingContract } from '../../hooks/useContract'\nimport { SubmittedView, LoadingView } from '../ModalViews'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport FormattedCurrencyAmount from '../FormattedCurrencyAmount'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useTranslation } from 'react-i18next'\n\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n  padding: 1rem;\n`\n\ninterface StakingModalProps {\n  isOpen: boolean\n  onDismiss: () => void\n  stakingInfo: StakingInfo\n}\n\nexport default function UnstakingModal({ isOpen, onDismiss, stakingInfo }: StakingModalProps) {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  // monitor call to help UI loading state\n  const addTransaction = useTransactionAdder()\n  const [hash, setHash] = useState<string | undefined>()\n  const [attempting, setAttempting] = useState(false)\n\n  function wrappedOndismiss() {\n    setHash(undefined)\n    setAttempting(false)\n    onDismiss()\n  }\n\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress)\n\n  async function onWithdraw() {\n    if (stakingContract && stakingInfo?.stakedAmount) {\n      setAttempting(true)\n      await stakingContract\n        .exit({ gasLimit: 300000 })\n        .then((response: TransactionResponse) => {\n          addTransaction(response, {\n            summary: t('earn.withdrawDepositedLiquidity')\n          })\n          setHash(response.hash)\n        })\n        .catch((error: any) => {\n          setAttempting(false)\n          console.log(error)\n        })\n    }\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = t('earn.connectWallet')\n  }\n  if (!stakingInfo?.stakedAmount) {\n    error = error ?? t('earn.enterAmount')\n  }\n\n  return (\n    <Modal isOpen={isOpen} onDismiss={wrappedOndismiss} maxHeight={90}>\n      {!attempting && !hash && (\n        <ContentWrapper gap=\"lg\">\n          <RowBetween>\n            <TYPE.mediumHeader>Withdraw</TYPE.mediumHeader>\n            <CloseIcon onClick={wrappedOndismiss} />\n          </RowBetween>\n          {stakingInfo?.stakedAmount && (\n            <AutoColumn justify=\"center\" gap=\"md\">\n              <TYPE.body fontWeight={600} fontSize={36}>\n                {<FormattedCurrencyAmount currencyAmount={stakingInfo.stakedAmount} />}\n              </TYPE.body>\n              <TYPE.body>{t('earn.depositedPglLiquidity')}</TYPE.body>\n            </AutoColumn>\n          )}\n          {stakingInfo?.earnedAmount && (\n            <AutoColumn justify=\"center\" gap=\"md\">\n              <TYPE.body fontWeight={600} fontSize={36}>\n                {<FormattedCurrencyAmount currencyAmount={stakingInfo?.earnedAmount} />}\n              </TYPE.body>\n              <TYPE.body>{t('earn.unclaimedPng')}</TYPE.body>\n            </AutoColumn>\n          )}\n          <TYPE.subHeader style={{ textAlign: 'center' }}>\n            {t('earn.whenYouWithdrawWarning')}\n          </TYPE.subHeader>\n          <ButtonError disabled={!!error} error={!!error && !!stakingInfo?.stakedAmount} onClick={onWithdraw}>\n            {error ?? t('earn.withdrawAndClaim')}\n          </ButtonError>\n        </ContentWrapper>\n      )}\n      {attempting && !hash && (\n        <LoadingView onDismiss={wrappedOndismiss}>\n          <AutoColumn gap=\"12px\" justify={'center'}>\n            <TYPE.body fontSize={20}>{t('earn.withdrawingPgl', {\"amount\": stakingInfo?.stakedAmount?.toSignificant(4)})}</TYPE.body>\n            <TYPE.body fontSize={20}>{t('earn.claimingPng', {\"amount\": stakingInfo?.earnedAmount?.toSignificant(4)})}</TYPE.body>\n          </AutoColumn>\n        </LoadingView>\n      )}\n      {hash && (\n        <SubmittedView onDismiss={wrappedOndismiss} hash={hash}>\n          <AutoColumn gap=\"12px\" justify={'center'}>\n            <TYPE.largeHeader>{t('earn.transactionSubmitted')}</TYPE.largeHeader>\n            <TYPE.body fontSize={20}>{t('earn.withdrewPgl')}</TYPE.body>\n            <TYPE.body fontSize={20}>{t('earn.claimedPng')}</TYPE.body>\n          </AutoColumn>\n        </SubmittedView>\n      )}\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}