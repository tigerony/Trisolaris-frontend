{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nconst VISIBILITY_STATE_SUPPORTED = ('visibilityState' in document);\n\nfunction isWindowVisible() {\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\n}\n/**\n * Returns whether the window is currently visible to the user.\n */\n\n\nexport default function useIsWindowVisible() {\n  const [focused, setFocused] = useState(isWindowVisible());\n  const listener = useCallback(() => {\n    setFocused(isWindowVisible());\n  }, [setFocused]);\n  useEffect(() => {\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\n    document.addEventListener('visibilitychange', listener);\n    return () => {\n      document.removeEventListener('visibilitychange', listener);\n    };\n  }, [listener]);\n  return focused;\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/hooks/useIsWindowVisible.ts"],"names":["useCallback","useEffect","useState","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","useIsWindowVisible","focused","setFocused","listener","undefined","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAEA,MAAMC,0BAA0B,IAAG,qBAAqBC,QAAxB,CAAhC;;AAEA,SAASC,eAAT,GAA2B;AACzB,SAAO,CAACF,0BAAD,IAA+BC,QAAQ,CAACE,eAAT,KAA6B,QAAnE;AACD;AAED;AACA;AACA;;;AACA,eAAe,SAASC,kBAAT,GAAuC;AACpD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAUG,eAAe,EAAzB,CAAtC;AACA,QAAMK,QAAQ,GAAGV,WAAW,CAAC,MAAM;AACjCS,IAAAA,UAAU,CAACJ,eAAe,EAAhB,CAAV;AACD,GAF2B,EAEzB,CAACI,UAAD,CAFyB,CAA5B;AAIAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACE,0BAAL,EAAiC,OAAOQ,SAAP;AAEjCP,IAAAA,QAAQ,CAACQ,gBAAT,CAA0B,kBAA1B,EAA8CF,QAA9C;AACA,WAAO,MAAM;AACXN,MAAAA,QAAQ,CAACS,mBAAT,CAA6B,kBAA7B,EAAiDH,QAAjD;AACD,KAFD;AAGD,GAPQ,EAON,CAACA,QAAD,CAPM,CAAT;AASA,SAAOF,OAAP;AACD","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\n\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document\n\nfunction isWindowVisible() {\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden'\n}\n\n/**\n * Returns whether the window is currently visible to the user.\n */\nexport default function useIsWindowVisible(): boolean {\n  const [focused, setFocused] = useState<boolean>(isWindowVisible())\n  const listener = useCallback(() => {\n    setFocused(isWindowVisible())\n  }, [setFocused])\n\n  useEffect(() => {\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined\n\n    document.addEventListener('visibilitychange', listener)\n    return () => {\n      document.removeEventListener('visibilitychange', listener)\n    }\n  }, [listener])\n\n  return focused\n}\n"]},"metadata":{},"sourceType":"module"}