{"ast":null,"code":"var _jsxFileName = \"/Users/sidshekhar/Documents/interface/src/components/PurchaseForm/input.tsx\";\nimport React from \"react\";\nimport { useContext, useEffect } from \"react\";\nimport { MouseoverTooltip } from \"../Tooltip\";\nimport styled from 'styled-components';\nimport { FormContext } from './';\nexport const StyledInput = styled.input`\n  color: ${({\n  error,\n  theme\n}) => error ? theme.red1 : theme.text1};\n  position: relative;\n  display: flex;\n  padding: 16px;\n  margin-bottom: 8px;\n  align-items: center;\n  width: 100%;\n  autocomplete: off;\n  flex: 0 0 100%;\n  white-space: nowrap;\n  background: transparent;\n  border-radius: 8px;\n  color: ${({\n  theme\n}) => theme.text1};\n  border-style: solid;\n  border: 1px solid ${({\n  error,\n  theme\n}) => error ? theme.red1 : theme.bg2};\n  background: ${({\n  theme\n}) => theme.bg1};\n  -webkit-appearance: none;\n  font-size: 24px;\n\n  ::placeholder {\n    color: ${({\n  theme\n}) => theme.text4};\n  }\n\n  transition: border 100ms;\n\n  :focus {\n    border: 1px solid ${({\n  theme\n}) => theme.bg3} !important;\n    outline: none;\n  }\n\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n`;\nexport default function TextInput({\n  name,\n  type,\n  validators,\n  onChange,\n  onError,\n  value,\n  label,\n  placeholder\n}) {\n  const hasError = errors => errors && errors.length !== 0;\n\n  const {\n    registerInput\n  } = useContext(FormContext);\n  useEffect(() => {\n    registerInput({\n      name: name,\n      validators: validators // eslint-disable-next-line\n\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(FormContext.Consumer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, context => /*#__PURE__*/React.createElement(MouseoverTooltip, {\n    text: hasError(context.errors[name]) ? context.errors[name].join('\\n') : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, label), /*#__PURE__*/React.createElement(StyledInput, {\n    name: name,\n    type: type,\n    error: hasError(context.errors[name]),\n    className: \"form-control\",\n    placeholder: placeholder,\n    onBlur: () => {\n      context.validateField(name);\n\n      if (onError) {\n        onError(hasError(context.errors[name]));\n      }\n    },\n    onChange: event => {\n      const val = event.target.value;\n      context.setFieldValue(name, val);\n\n      if (onChange) {\n        onChange(val);\n      }\n    },\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/components/PurchaseForm/input.tsx"],"names":["React","useContext","useEffect","MouseoverTooltip","styled","FormContext","StyledInput","input","error","theme","red1","text1","bg2","bg1","text4","bg3","TextInput","name","type","validators","onChange","onError","value","label","placeholder","hasError","errors","length","registerInput","context","join","validateField","event","val","target","setFieldValue"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport {useContext, useEffect} from \"react\"\nimport {MouseoverTooltip} from \"../Tooltip\";\nimport styled from 'styled-components'\nimport {Validator, FormContext} from './'\n\nexport const StyledInput = styled.input<{ error?: boolean }>`\n  color: ${({error, theme}) => (error ? theme.red1 : theme.text1)};\n  position: relative;\n  display: flex;\n  padding: 16px;\n  margin-bottom: 8px;\n  align-items: center;\n  width: 100%;\n  autocomplete: off;\n  flex: 0 0 100%;\n  white-space: nowrap;\n  background: transparent;\n  border-radius: 8px;\n  color: ${({theme}) => theme.text1};\n  border-style: solid;\n  border: 1px solid ${({error, theme}) => (error ? theme.red1 : theme.bg2)};\n  background: ${({theme}) => theme.bg1};\n  -webkit-appearance: none;\n  font-size: 24px;\n\n  ::placeholder {\n    color: ${({theme}) => theme.text4};\n  }\n\n  transition: border 100ms;\n\n  :focus {\n    border: 1px solid ${({theme}) => theme.bg3} !important;\n    outline: none;\n  }\n\n  -webkit-appearance: textfield;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n`\n\ninterface InputProps {\n  name: string,\n  type: string,\n  validators?: Validator[],\n  onChange?: (val: string) => void,\n  onError?: (hasError: boolean) => void,\n  value?: string,\n  label?: string,\n  placeholder?: string,\n}\n\nexport default function TextInput({\n                                    name,\n                                    type,\n                                    validators,\n                                    onChange,\n                                    onError,\n                                    value,\n                                    label,\n                                    placeholder\n                                  }: InputProps) {\n\n  const hasError = (errors: string[]): boolean => (errors && (errors).length !== 0)\n  const {registerInput} = useContext(FormContext)\n\n  useEffect(\n    () => {\n      registerInput({\n        name: name,\n        validators: validators\n        // eslint-disable-next-line\n      })}, []\n  );\n\n  return (\n    <FormContext.Consumer>\n      {(context) =>\n        <MouseoverTooltip text={hasError(context.errors[name]) ? context.errors[name].join('\\n') : \"\"}>\n          <label>{label}</label>\n          <StyledInput\n            name={name}\n            type={type}\n            error={hasError(context.errors[name])}\n            className=\"form-control\"\n            placeholder={placeholder}\n            onBlur={() => {\n              context.validateField(name)\n              if (onError) {\n                onError(hasError(context.errors[name]))\n              }\n            }}\n            onChange={event => {\n              const val = event.target.value;\n              context.setFieldValue(name, val)\n              if (onChange) {\n                onChange(val)\n              }\n            }}\n            value={value}\n          />\n        </MouseoverTooltip>}\n    </FormContext.Consumer>)\n\n\n}"]},"metadata":{},"sourceType":"module"}