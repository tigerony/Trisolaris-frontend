{"ast":null,"code":"var _jsxFileName = \"/Users/sidshekhar/Documents/interface/src/pages/Earn/Manage.tsx\";\nimport React, { useCallback, useState } from 'react';\nimport { AutoColumn } from '../../components/Column';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport { JSBI, TokenAmount, CAVAX, WAVAX } from '@pangolindex/sdk';\nimport DoubleCurrencyLogo from '../../components/DoubleLogo';\nimport { useCurrency } from '../../hooks/Tokens';\nimport { useWalletModalToggle } from '../../state/application/hooks';\nimport { TYPE } from '../../theme';\nimport { RowBetween } from '../../components/Row';\nimport { CardSection, DataCard, CardNoise, CardBGImage } from '../../components/earn/styled';\nimport { ButtonPrimary, ButtonEmpty } from '../../components/Button';\nimport StakingModal from '../../components/earn/StakingModal';\nimport { useStakingInfo } from '../../state/stake/hooks';\nimport UnstakingModal from '../../components/earn/UnstakingModal';\nimport ClaimRewardModal from '../../components/earn/ClaimRewardModal';\nimport { useTokenBalance } from '../../state/wallet/hooks';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useColor } from '../../hooks/useColor';\nimport { CountUp } from 'use-count-up';\nimport { wrappedCurrency } from '../../utils/wrappedCurrency';\nimport { currencyId } from '../../utils/currencyId';\nimport { useTotalSupply } from '../../data/TotalSupply';\nimport { usePair } from '../../data/Reserves';\nimport usePrevious from '../../hooks/usePrevious'; // import useUSDCPrice from '../../utils/useUSDCPrice'\n\nimport { BIG_INT_ZERO, PNG } from '../../constants';\nimport { useTranslation } from 'react-i18next';\nconst PageWrapper = styled(AutoColumn)`\n  max-width: 640px;\n  width: 100%;\n`;\nconst PositionInfo = styled(AutoColumn)`\n  position: relative;\n  max-width: 640px;\n  width: 100%;\n  opacity: ${({\n  dim\n}) => dim ? 0.6 : 1};\n`;\nconst BottomSection = styled(AutoColumn)`\n  border-radius: 12px;\n  width: 100%;\n  position: relative;\n`;\nconst StyledDataCard = styled(DataCard)`\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #1e1a31 0%, #3d51a5 100%);\n  z-index: 2;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n  background: ${({\n  theme,\n  bgColor,\n  showBackground\n}) => `radial-gradient(91.85% 100% at 1.84% 0%, ${bgColor} 0%,  ${showBackground ? theme.black : theme.bg5} 100%) `};\n`;\nconst StyledBottomCard = styled(DataCard)`\n  background: ${({\n  theme\n}) => theme.bg3};\n  opacity: ${({\n  dim\n}) => dim ? 0.4 : 1};\n  margin-top: -40px;\n  padding: 0 1.25rem 1rem 1.25rem;\n  padding-top: 32px;\n  z-index: 1;\n`;\nconst PoolData = styled(DataCard)`\n  background: none;\n  border: 1px solid ${({\n  theme\n}) => theme.bg4};\n  padding: 1rem;\n  z-index: 1;\n`;\nconst VoteCard = styled(DataCard)`\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #27ae60 0%, #000000 100%);\n  overflow: hidden;\n`;\nconst DataRow = styled(RowBetween)`\n  justify-content: center;\n  gap: 12px;\n\n  ${({\n  theme\n}) => theme.mediaWidth.upToSmall`\n     flex-direction: column;\n     gap: 12px;\n   `};\n`;\nexport default function Manage({\n  match: {\n    params: {\n      currencyIdA,\n      currencyIdB,\n      version\n    }\n  }\n}) {\n  var _useStakingInfo, _stakingInfo$stakedAm, _stakingInfo$stakedAm2, _stakingInfo$stakedAm3, _stakingInfo$earnedAm, _stakingInfo$earnedAm2, _usePrevious, _valueOfTotalStakedAm, _valueOfTotalStakedAm2, _stakingInfo$totalRew, _stakingInfo$totalRew2, _stakingInfo$totalRew3, _stakingInfo$stakedAm4, _stakingInfo$stakedAm5, _stakingInfo$stakedAm6, _stakingInfo$earnedAm3, _stakingInfo$rewardRa, _stakingInfo$rewardRa2, _stakingInfo$rewardRa3, _stakingInfo$stakedAm7, _stakingInfo$stakedAm8;\n\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React(); // get currencies and pair\n\n  const [currencyA, currencyB] = [useCurrency(currencyIdA), useCurrency(currencyIdB)];\n  const tokenA = wrappedCurrency(currencyA !== null && currencyA !== void 0 ? currencyA : undefined, chainId);\n  const tokenB = wrappedCurrency(currencyB !== null && currencyB !== void 0 ? currencyB : undefined, chainId);\n  const [, stakingTokenPair] = usePair(tokenA, tokenB);\n  const stakingInfo = (_useStakingInfo = useStakingInfo(Number(version), stakingTokenPair)) === null || _useStakingInfo === void 0 ? void 0 : _useStakingInfo[0];\n  const avaxPool = currencyA === CAVAX || currencyB === CAVAX;\n  let valueOfTotalStakedAmountInWavax; // let valueOfTotalStakedAmountInUSDC: CurrencyAmount | undefined\n\n  let backgroundColor;\n  let token;\n  const totalSupplyOfStakingToken = useTotalSupply(stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm === void 0 ? void 0 : _stakingInfo$stakedAm.token);\n  const [, avaxPngTokenPair] = usePair(CAVAX, PNG[chainId ? chainId : 43114]); // let usdToken: Token | undefined\n\n  if (avaxPool) {\n    token = currencyA === CAVAX ? tokenB : tokenA;\n    const wavax = currencyA === CAVAX ? tokenA : tokenB; // let returnOverMonth: Percent = new Percent('0')\n\n    if (totalSupplyOfStakingToken && stakingTokenPair && wavax) {\n      // take the total amount of LP tokens staked, multiply by AVAX value of all LP tokens, divide by all LP tokens\n      valueOfTotalStakedAmountInWavax = new TokenAmount(wavax, JSBI.divide(JSBI.multiply(JSBI.multiply(stakingInfo.totalStakedAmount.raw, stakingTokenPair.reserveOf(wavax).raw), JSBI.BigInt(2) // this is b/c the value of LP shares are ~double the value of the wavax they entitle owner to\n      ), totalSupplyOfStakingToken.raw));\n    } // get the USD value of staked wavax\n    // usdToken = wavax\n\n  } else {\n    let png;\n\n    if (tokenA && tokenA.equals(PNG[tokenA.chainId])) {\n      token = tokenB;\n      png = tokenA;\n    } else {\n      token = tokenA;\n      png = tokenB;\n    }\n\n    if (totalSupplyOfStakingToken && stakingTokenPair && avaxPngTokenPair && tokenB && png) {\n      const oneToken = JSBI.BigInt(1000000000000000000);\n      const avaxPngRatio = JSBI.divide(JSBI.multiply(oneToken, avaxPngTokenPair.reserveOf(WAVAX[tokenB.chainId]).raw), avaxPngTokenPair.reserveOf(png).raw);\n      const valueOfPngInAvax = JSBI.divide(JSBI.multiply(stakingTokenPair.reserveOf(png).raw, avaxPngRatio), oneToken);\n      valueOfTotalStakedAmountInWavax = new TokenAmount(WAVAX[tokenB.chainId], JSBI.divide(JSBI.multiply(JSBI.multiply(stakingInfo.totalStakedAmount.raw, valueOfPngInAvax), JSBI.BigInt(2) // this is b/c the value of LP shares are ~double the value of the wavax they entitle owner to\n      ), totalSupplyOfStakingToken.raw));\n    } // usdToken = png\n\n  } // get the color of the token\n\n\n  backgroundColor = useColor(token); // const USDPrice = useUSDCPrice(usdToken)\n  // valueOfTotalStakedAmountInUSDC =\n  // \t\tvalueOfTotalStakedAmountInWavax && USDPrice?.quote(valueOfTotalStakedAmountInWavax)\n  // detect existing unstaked LP position to show add button if none found\n\n  const userLiquidityUnstaked = useTokenBalance(account !== null && account !== void 0 ? account : undefined, stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm2 = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm2 === void 0 ? void 0 : _stakingInfo$stakedAm2.token);\n  const showAddLiquidityButton = Boolean((stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm3 = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm3 === void 0 ? void 0 : _stakingInfo$stakedAm3.equalTo('0')) && (userLiquidityUnstaked === null || userLiquidityUnstaked === void 0 ? void 0 : userLiquidityUnstaked.equalTo('0'))); // toggle for staking modal and unstaking modal\n\n  const [showStakingModal, setShowStakingModal] = useState(false);\n  const [showUnstakingModal, setShowUnstakingModal] = useState(false);\n  const [showClaimRewardModal, setShowClaimRewardModal] = useState(false); // fade cards if nothing staked or nothing earned yet\n\n  const disableTop = !(stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount) || stakingInfo.stakedAmount.equalTo(JSBI.BigInt(0)); // get WAVAX value of staked LP tokens\n  // let valueOfTotalStakedAmountInWAVAX: TokenAmount | undefined\n  // if (totalSupplyOfStakingToken && stakingTokenPair && stakingInfo && WAVAX) {\n  // \t// take the total amount of LP tokens staked, multiply by AVAX value of all LP tokens, divide by all LP tokens\n  // \tvalueOfTotalStakedAmountInWAVAX = new TokenAmount(\n  // \t\tWAVAX,\n  // \t\tJSBI.divide(\n  // \t\t\tJSBI.multiply(\n  // \t\t\t\tJSBI.multiply(stakingInfo.totalStakedAmount.raw, stakingTokenPair.reserveOf(WAVAX).raw),\n  // \t\t\t\tJSBI.BigInt(2) // this is b/c the value of LP shares are ~double the value of the WAVAX they entitle owner to\n  // \t\t\t),\n  // \t\t\ttotalSupplyOfStakingToken.raw\n  // \t\t)\n  // \t)\n  // }\n\n  const countUpAmount = (_stakingInfo$earnedAm = stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$earnedAm2 = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm2 === void 0 ? void 0 : _stakingInfo$earnedAm2.toFixed(6)) !== null && _stakingInfo$earnedAm !== void 0 ? _stakingInfo$earnedAm : '0';\n  const countUpAmountPrevious = (_usePrevious = usePrevious(countUpAmount)) !== null && _usePrevious !== void 0 ? _usePrevious : '0';\n  const toggleWalletModal = useWalletModalToggle();\n  const {\n    t\n  } = useTranslation();\n  const handleDepositClick = useCallback(() => {\n    if (account) {\n      setShowStakingModal(true);\n    } else {\n      toggleWalletModal();\n    }\n  }, [account, toggleWalletModal]);\n  return /*#__PURE__*/React.createElement(PageWrapper, {\n    gap: \"lg\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    style: {\n      gap: '24px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.mediumHeader, {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, currencyA === null || currencyA === void 0 ? void 0 : currencyA.symbol, \"-\", currencyB === null || currencyB === void 0 ? void 0 : currencyB.symbol, \" \", t('earnPage.liquidityMining')), /*#__PURE__*/React.createElement(DoubleCurrencyLogo, {\n    currency0: currencyA !== null && currencyA !== void 0 ? currencyA : undefined,\n    currency1: currencyB !== null && currencyB !== void 0 ? currencyB : undefined,\n    size: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(DataRow, {\n    style: {\n      gap: '24px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PoolData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }, t('earnPage.totalStaked')), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 24,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  }, `${(_valueOfTotalStakedAm = (_valueOfTotalStakedAm2 = valueOfTotalStakedAmountInWavax) === null || _valueOfTotalStakedAm2 === void 0 ? void 0 : _valueOfTotalStakedAm2.toSignificant(4, {\n    groupSeparator: ','\n  })) !== null && _valueOfTotalStakedAm !== void 0 ? _valueOfTotalStakedAm : '-'} AVAX`))), /*#__PURE__*/React.createElement(PoolData, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 13\n    }\n  }, t('earnPage.poolRate')), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 24,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }, (_stakingInfo$totalRew = stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$totalRew2 = stakingInfo.totalRewardRate) === null || _stakingInfo$totalRew2 === void 0 ? void 0 : (_stakingInfo$totalRew3 = _stakingInfo$totalRew2.multiply((60 * 60 * 24 * 7).toString())) === null || _stakingInfo$totalRew3 === void 0 ? void 0 : _stakingInfo$totalRew3.toFixed(0, {\n    groupSeparator: ','\n  })) !== null && _stakingInfo$totalRew !== void 0 ? _stakingInfo$totalRew : '-', t('earnPage.pngPerWeek'))))), showAddLiquidityButton && /*#__PURE__*/React.createElement(VoteCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardBGImage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardNoise, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 17\n    }\n  }, t('earnPage.step1'))), /*#__PURE__*/React.createElement(RowBetween, {\n    style: {\n      marginBottom: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontSize: 14,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 17\n    }\n  }, t('earnPage.pglTokenRequired', {\n    poolHandle: (currencyA === null || currencyA === void 0 ? void 0 : currencyA.symbol) + '-' + (currencyB === null || currencyB === void 0 ? void 0 : currencyB.symbol)\n  }))), /*#__PURE__*/React.createElement(ButtonPrimary, {\n    padding: \"8px\",\n    width: 'fit-content',\n    as: Link,\n    to: `/add/${currencyA && currencyId(currencyA)}/${currencyB && currencyId(currencyB)}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 15\n    }\n  }, t('earnPage.addPoolLiquidity', {\n    poolHandle: (currencyA === null || currencyA === void 0 ? void 0 : currencyA.symbol) + '-' + (currencyB === null || currencyB === void 0 ? void 0 : currencyB.symbol)\n  })))), /*#__PURE__*/React.createElement(CardBGImage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(CardNoise, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }\n  })), stakingInfo && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StakingModal, {\n    isOpen: showStakingModal,\n    onDismiss: () => setShowStakingModal(false),\n    stakingInfo: stakingInfo,\n    userLiquidityUnstaked: userLiquidityUnstaked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(UnstakingModal, {\n    isOpen: showUnstakingModal,\n    onDismiss: () => setShowUnstakingModal(false),\n    stakingInfo: stakingInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ClaimRewardModal, {\n    isOpen: showClaimRewardModal,\n    onDismiss: () => setShowClaimRewardModal(false),\n    stakingInfo: stakingInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(PositionInfo, {\n    gap: \"lg\",\n    justify: \"center\",\n    dim: showAddLiquidityButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BottomSection, {\n    gap: \"lg\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StyledDataCard, {\n    disabled: disableTop,\n    bgColor: backgroundColor,\n    showBackground: !showAddLiquidityButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardBGImage, {\n    desaturate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(CardNoise, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 19\n    }\n  }, t('earnPage.liquidityDeposits'))), /*#__PURE__*/React.createElement(RowBetween, {\n    style: {\n      alignItems: 'baseline'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontSize: 36,\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 19\n    }\n  }, (_stakingInfo$stakedAm4 = stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm5 = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm5 === void 0 ? void 0 : _stakingInfo$stakedAm5.toSignificant(6)) !== null && _stakingInfo$stakedAm4 !== void 0 ? _stakingInfo$stakedAm4 : '-'), /*#__PURE__*/React.createElement(TYPE.white, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 19\n    }\n  }, \"PGL \", currencyA === null || currencyA === void 0 ? void 0 : currencyA.symbol, \"-\", currencyB === null || currencyB === void 0 ? void 0 : currencyB.symbol))))), /*#__PURE__*/React.createElement(StyledBottomCard, {\n    dim: stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm6 = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm6 === void 0 ? void 0 : _stakingInfo$stakedAm6.equalTo(JSBI.BigInt(0)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardBGImage, {\n    desaturate: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(CardNoise, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.black, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 19\n    }\n  }, t('earnPage.unclaimedPng'))), (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.earnedAmount) && JSBI.notEqual(BIG_INT_ZERO, stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$earnedAm3 = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm3 === void 0 ? void 0 : _stakingInfo$earnedAm3.raw) && /*#__PURE__*/React.createElement(ButtonEmpty, {\n    padding: \"8px\",\n    borderRadius: \"8px\",\n    width: \"fit-content\",\n    onClick: () => setShowClaimRewardModal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 19\n    }\n  }, t('earnPage.claim'))), /*#__PURE__*/React.createElement(RowBetween, {\n    style: {\n      alignItems: 'baseline'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.largeHeader, {\n    fontSize: 36,\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CountUp, {\n    key: countUpAmount,\n    isCounting: true,\n    decimalPlaces: 4,\n    start: parseFloat(countUpAmountPrevious),\n    end: parseFloat(countUpAmount),\n    thousandsSeparator: ',',\n    duration: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(TYPE.black, {\n    fontSize: 16,\n    fontWeight: 500,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"wizard-icon\",\n    style: {\n      marginRight: '8px '\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 19\n    }\n  }, \"\\u26A1\"), (_stakingInfo$rewardRa = stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$rewardRa2 = stakingInfo.rewardRate) === null || _stakingInfo$rewardRa2 === void 0 ? void 0 : (_stakingInfo$rewardRa3 = _stakingInfo$rewardRa2.multiply((60 * 60 * 24 * 7).toString())) === null || _stakingInfo$rewardRa3 === void 0 ? void 0 : _stakingInfo$rewardRa3.toSignificant(4, {\n    groupSeparator: ','\n  })) !== null && _stakingInfo$rewardRa !== void 0 ? _stakingInfo$rewardRa : '-', t('earnPage.pngPerWeek')))))), /*#__PURE__*/React.createElement(TYPE.main, {\n    style: {\n      textAlign: 'center'\n    },\n    fontSize: 14,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"wizard-icon\",\n    style: {\n      marginRight: '8px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 11\n    }\n  }, \"\\u2B50\\uFE0F\"), t('earnPage.automagically')), !showAddLiquidityButton && /*#__PURE__*/React.createElement(DataRow, {\n    style: {\n      marginBottom: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ButtonPrimary, {\n    padding: \"8px\",\n    borderRadius: \"8px\",\n    width: \"160px\",\n    onClick: handleDepositClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 13\n    }\n  }, (stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm7 = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm7 === void 0 ? void 0 : _stakingInfo$stakedAm7.greaterThan(JSBI.BigInt(0))) ? t('earnPage.deposit') : t('earnPage.depositPglTokens')), (stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$stakedAm8 = stakingInfo.stakedAmount) === null || _stakingInfo$stakedAm8 === void 0 ? void 0 : _stakingInfo$stakedAm8.greaterThan(JSBI.BigInt(0))) && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ButtonPrimary, {\n    padding: \"8px\",\n    borderRadius: \"8px\",\n    width: \"160px\",\n    onClick: () => setShowUnstakingModal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 17\n    }\n  }, \"Withdraw\"))), !userLiquidityUnstaked ? null : userLiquidityUnstaked.equalTo('0') ? null : /*#__PURE__*/React.createElement(TYPE.main, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 11\n    }\n  }, userLiquidityUnstaked.toSignificant(6), \" \", t('earnPage.pglTokenAvailable'))));\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/pages/Earn/Manage.tsx"],"names":["React","useCallback","useState","AutoColumn","styled","Link","JSBI","TokenAmount","CAVAX","WAVAX","DoubleCurrencyLogo","useCurrency","useWalletModalToggle","TYPE","RowBetween","CardSection","DataCard","CardNoise","CardBGImage","ButtonPrimary","ButtonEmpty","StakingModal","useStakingInfo","UnstakingModal","ClaimRewardModal","useTokenBalance","useActiveWeb3React","useColor","CountUp","wrappedCurrency","currencyId","useTotalSupply","usePair","usePrevious","BIG_INT_ZERO","PNG","useTranslation","PageWrapper","PositionInfo","dim","BottomSection","StyledDataCard","theme","bgColor","showBackground","black","bg5","StyledBottomCard","bg3","PoolData","bg4","VoteCard","DataRow","mediaWidth","upToSmall","Manage","match","params","currencyIdA","currencyIdB","version","account","chainId","currencyA","currencyB","tokenA","undefined","tokenB","stakingTokenPair","stakingInfo","Number","avaxPool","valueOfTotalStakedAmountInWavax","backgroundColor","token","totalSupplyOfStakingToken","stakedAmount","avaxPngTokenPair","wavax","divide","multiply","totalStakedAmount","raw","reserveOf","BigInt","png","equals","oneToken","avaxPngRatio","valueOfPngInAvax","userLiquidityUnstaked","showAddLiquidityButton","Boolean","equalTo","showStakingModal","setShowStakingModal","showUnstakingModal","setShowUnstakingModal","showClaimRewardModal","setShowClaimRewardModal","disableTop","countUpAmount","earnedAmount","toFixed","countUpAmountPrevious","toggleWalletModal","t","handleDepositClick","gap","margin","symbol","toSignificant","groupSeparator","totalRewardRate","toString","marginBottom","poolHandle","alignItems","notEqual","parseFloat","marginRight","rewardRate","textAlign","greaterThan"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,SAASC,IAAT,EAAeC,WAAf,EAA4BC,KAA5B,EAA0CC,KAA1C,QAAuD,kBAAvD;AAEA,OAAOC,kBAAP,MAA+B,6BAA/B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,oBAAT,QAAqC,+BAArC;AACA,SAASC,IAAT,QAAqB,aAArB;AAEA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,WAAT,EAAsBC,QAAtB,EAAgCC,SAAhC,EAA2CC,WAA3C,QAA8D,8BAA9D;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,yBAA3C;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,OAAOC,gBAAP,MAA6B,wCAA7B;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,SAASC,kBAAT,QAAmC,aAAnC;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAEA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,OAAOC,WAAP,MAAwB,yBAAxB,C,CACA;;AACA,SAASC,YAAT,EAAuBC,GAAvB,QAAkC,iBAAlC;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,MAAMC,WAAW,GAAGjC,MAAM,CAACD,UAAD,CAAa;AACvC;AACA;AACA,CAHA;AAKA,MAAMmC,YAAY,GAAGlC,MAAM,CAACD,UAAD,CAA2B;AACtD;AACA;AACA;AACA,aAAa,CAAC;AAAEoC,EAAAA;AAAF,CAAD,KAAcA,GAAG,GAAG,GAAH,GAAS,CAAG;AAC1C,CALA;AAOA,MAAMC,aAAa,GAAGpC,MAAM,CAACD,UAAD,CAAa;AACzC;AACA;AACA;AACA,CAJA;AAMA,MAAMsC,cAAc,GAAGrC,MAAM,CAACY,QAAD,CAAoD;AACjF;AACA;AACA;AACA,gBAAgB,CAAC;AAAE0B,EAAAA,KAAF;AAASC,EAAAA,OAAT;AAAkBC,EAAAA;AAAlB,CAAD,KACX,4CAA2CD,OAAQ,SAAQC,cAAc,GAAGF,KAAK,CAACG,KAAT,GAAiBH,KAAK,CAACI,GAAI,SAAS;AAClH,CANA;AAQA,MAAMC,gBAAgB,GAAG3C,MAAM,CAACY,QAAD,CAAyB;AACxD,gBAAgB,CAAC;AAAE0B,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACM,GAAI;AACzC,aAAa,CAAC;AAAET,EAAAA;AAAF,CAAD,KAAcA,GAAG,GAAG,GAAH,GAAS,CAAG;AAC1C;AACA;AACA;AACA;AACA,CAPA;AASA,MAAMU,QAAQ,GAAG7C,MAAM,CAACY,QAAD,CAAW;AAClC;AACA,sBAAsB,CAAC;AAAE0B,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACQ,GAAI;AAC/C;AACA;AACA,CALA;AAOA,MAAMC,QAAQ,GAAG/C,MAAM,CAACY,QAAD,CAAW;AAClC;AACA;AACA,CAHA;AAKA,MAAMoC,OAAO,GAAGhD,MAAM,CAACU,UAAD,CAAa;AACnC;AACA;AACA;AACA,IAAI,CAAC;AAAE4B,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACW,UAAN,CAAiBC,SAAU;AAC9C;AACA;AACA,IAAK;AACL,CARA;AAUA,eAAe,SAASC,MAAT,CAAgB;AAC7BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,WAAF;AAAeC,MAAAA,WAAf;AAA4BC,MAAAA;AAA5B;AADH;AADsB,CAAhB,EAIwE;AAAA;;AACrF,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBpC,kBAAkB,EAA/C,CADqF,CAGrF;;AACA,QAAM,CAACqC,SAAD,EAAYC,SAAZ,IAAyB,CAACrD,WAAW,CAAC+C,WAAD,CAAZ,EAA2B/C,WAAW,CAACgD,WAAD,CAAtC,CAA/B;AACA,QAAMM,MAAM,GAAGpC,eAAe,CAACkC,SAAD,aAACA,SAAD,cAACA,SAAD,GAAcG,SAAd,EAAyBJ,OAAzB,CAA9B;AACA,QAAMK,MAAM,GAAGtC,eAAe,CAACmC,SAAD,aAACA,SAAD,cAACA,SAAD,GAAcE,SAAd,EAAyBJ,OAAzB,CAA9B;AAEA,QAAM,GAAGM,gBAAH,IAAuBpC,OAAO,CAACiC,MAAD,EAASE,MAAT,CAApC;AACA,QAAME,WAAW,sBAAG/C,cAAc,CAACgD,MAAM,CAACV,OAAD,CAAP,EAAkBQ,gBAAlB,CAAjB,oDAAG,gBAAoD,CAApD,CAApB;AAEA,QAAMG,QAAQ,GAAGR,SAAS,KAAKvD,KAAd,IAAuBwD,SAAS,KAAKxD,KAAtD;AAEA,MAAIgE,+BAAJ,CAbqF,CAcrF;;AACA,MAAIC,eAAJ;AACA,MAAIC,KAAJ;AACA,QAAMC,yBAAyB,GAAG5C,cAAc,CAACsC,WAAD,aAACA,WAAD,gDAACA,WAAW,CAAEO,YAAd,0DAAC,sBAA2BF,KAA5B,CAAhD;AACA,QAAM,GAAGG,gBAAH,IAAuB7C,OAAO,CAACxB,KAAD,EAAQ2B,GAAG,CAAC2B,OAAO,GAAGA,OAAH,GAAa,KAArB,CAAX,CAApC,CAlBqF,CAmBrF;;AACA,MAAIS,QAAJ,EAAc;AACZG,IAAAA,KAAK,GAAGX,SAAS,KAAKvD,KAAd,GAAsB2D,MAAtB,GAA+BF,MAAvC;AACA,UAAMa,KAAK,GAAGf,SAAS,KAAKvD,KAAd,GAAsByD,MAAtB,GAA+BE,MAA7C,CAFY,CAIZ;;AACA,QAAIQ,yBAAyB,IAAIP,gBAA7B,IAAiDU,KAArD,EAA4D;AAC1D;AACAN,MAAAA,+BAA+B,GAAG,IAAIjE,WAAJ,CAChCuE,KADgC,EAEhCxE,IAAI,CAACyE,MAAL,CACEzE,IAAI,CAAC0E,QAAL,CACE1E,IAAI,CAAC0E,QAAL,CAAcX,WAAW,CAACY,iBAAZ,CAA8BC,GAA5C,EAAiDd,gBAAgB,CAACe,SAAjB,CAA2BL,KAA3B,EAAkCI,GAAnF,CADF,EAEE5E,IAAI,CAAC8E,MAAL,CAAY,CAAZ,CAFF,CAEiB;AAFjB,OADF,EAKET,yBAAyB,CAACO,GAL5B,CAFgC,CAAlC;AAUD,KAjBW,CAmBZ;AACA;;AACD,GArBD,MAqBO;AACL,QAAIG,GAAJ;;AACA,QAAIpB,MAAM,IAAIA,MAAM,CAACqB,MAAP,CAAcnD,GAAG,CAAC8B,MAAM,CAACH,OAAR,CAAjB,CAAd,EAAkD;AAChDY,MAAAA,KAAK,GAAGP,MAAR;AACAkB,MAAAA,GAAG,GAAGpB,MAAN;AACD,KAHD,MAGO;AACLS,MAAAA,KAAK,GAAGT,MAAR;AACAoB,MAAAA,GAAG,GAAGlB,MAAN;AACD;;AAED,QAAIQ,yBAAyB,IAAIP,gBAA7B,IAAiDS,gBAAjD,IAAqEV,MAArE,IAA+EkB,GAAnF,EAAwF;AACtF,YAAME,QAAQ,GAAGjF,IAAI,CAAC8E,MAAL,CAAY,mBAAZ,CAAjB;AACA,YAAMI,YAAY,GAAGlF,IAAI,CAACyE,MAAL,CACnBzE,IAAI,CAAC0E,QAAL,CAAcO,QAAd,EAAwBV,gBAAgB,CAACM,SAAjB,CAA2B1E,KAAK,CAAC0D,MAAM,CAACL,OAAR,CAAhC,EAAkDoB,GAA1E,CADmB,EAEnBL,gBAAgB,CAACM,SAAjB,CAA2BE,GAA3B,EAAgCH,GAFb,CAArB;AAKA,YAAMO,gBAAgB,GAAGnF,IAAI,CAACyE,MAAL,CAAYzE,IAAI,CAAC0E,QAAL,CAAcZ,gBAAgB,CAACe,SAAjB,CAA2BE,GAA3B,EAAgCH,GAA9C,EAAmDM,YAAnD,CAAZ,EAA8ED,QAA9E,CAAzB;AAEAf,MAAAA,+BAA+B,GAAG,IAAIjE,WAAJ,CAChCE,KAAK,CAAC0D,MAAM,CAACL,OAAR,CAD2B,EAEhCxD,IAAI,CAACyE,MAAL,CACEzE,IAAI,CAAC0E,QAAL,CACE1E,IAAI,CAAC0E,QAAL,CAAcX,WAAW,CAACY,iBAAZ,CAA8BC,GAA5C,EAAiDO,gBAAjD,CADF,EAEEnF,IAAI,CAAC8E,MAAL,CAAY,CAAZ,CAFF,CAEiB;AAFjB,OADF,EAKET,yBAAyB,CAACO,GAL5B,CAFgC,CAAlC;AAUD,KA7BI,CA8BL;;AACD,GAxEoF,CA0ErF;;;AACAT,EAAAA,eAAe,GAAG9C,QAAQ,CAAC+C,KAAD,CAA1B,CA3EqF,CA6ErF;AACA;AACA;AAEA;;AACA,QAAMgB,qBAAqB,GAAGjE,eAAe,CAACoC,OAAD,aAACA,OAAD,cAACA,OAAD,GAAYK,SAAZ,EAAuBG,WAAvB,aAAuBA,WAAvB,iDAAuBA,WAAW,CAAEO,YAApC,2DAAuB,uBAA2BF,KAAlD,CAA7C;AACA,QAAMiB,sBAAsB,GAAGC,OAAO,CAAC,CAAAvB,WAAW,SAAX,IAAAA,WAAW,WAAX,sCAAAA,WAAW,CAAEO,YAAb,kFAA2BiB,OAA3B,CAAmC,GAAnC,OAA2CH,qBAA3C,aAA2CA,qBAA3C,uBAA2CA,qBAAqB,CAAEG,OAAvB,CAA+B,GAA/B,CAA3C,CAAD,CAAtC,CAnFqF,CAqFrF;;AACA,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0C7F,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAAC8F,kBAAD,EAAqBC,qBAArB,IAA8C/F,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACgG,oBAAD,EAAuBC,uBAAvB,IAAkDjG,QAAQ,CAAC,KAAD,CAAhE,CAxFqF,CA0FrF;;AACA,QAAMkG,UAAU,GAAG,EAAC/B,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAEO,YAAd,KAA8BP,WAAW,CAACO,YAAZ,CAAyBiB,OAAzB,CAAiCvF,IAAI,CAAC8E,MAAL,CAAY,CAAZ,CAAjC,CAAjD,CA3FqF,CA6FrF;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMiB,aAAa,4BAAGhC,WAAH,aAAGA,WAAH,iDAAGA,WAAW,CAAEiC,YAAhB,2DAAG,uBAA2BC,OAA3B,CAAmC,CAAnC,CAAH,yEAA4C,GAA/D;AACA,QAAMC,qBAAqB,mBAAGvE,WAAW,CAACoE,aAAD,CAAd,uDAAiC,GAA5D;AAEA,QAAMI,iBAAiB,GAAG7F,oBAAoB,EAA9C;AACA,QAAM;AAAE8F,IAAAA;AAAF,MAAQtE,cAAc,EAA5B;AAEA,QAAMuE,kBAAkB,GAAG1G,WAAW,CAAC,MAAM;AAC3C,QAAI4D,OAAJ,EAAa;AACXkC,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,KAFD,MAEO;AACLU,MAAAA,iBAAiB;AAClB;AACF,GANqC,EAMnC,CAAC5C,OAAD,EAAU4C,iBAAV,CANmC,CAAtC;AAQA,sBACE,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAC,IAAjB;AAAsB,IAAA,OAAO,EAAC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAE;AAAEG,MAAAA,GAAG,EAAE;AAAP,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,YAAN;AAAmB,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG9C,SADH,aACGA,SADH,uBACGA,SAAS,CAAE+C,MADd,OACuB9C,SADvB,aACuBA,SADvB,uBACuBA,SAAS,CAAE8C,MADlC,OAC2CJ,CAAC,CAAC,0BAAD,CAD5C,CADF,eAIE,oBAAC,kBAAD;AAAoB,IAAA,SAAS,EAAE3C,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAeG,SAA5C;AAAuD,IAAA,SAAS,EAAEF,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAeE,SAA/E;AAA0F,IAAA,IAAI,EAAE,EAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF,eAQE,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAE;AAAE0C,MAAAA,GAAG,EAAE;AAAP,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCH,CAAC,CAAC,sBAAD,CAAnC,CADF,eAEE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,QAAQ,EAAE,EAArB;AAAyB,IAAA,UAAU,EAAE,GAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,GAAD,mDAAGlC,+BAAH,2DAAG,uBAAiCuC,aAAjC,CAA+C,CAA/C,EAAkD;AAAEC,IAAAA,cAAc,EAAE;AAAlB,GAAlD,CAAH,yEAAiF,GAAI,OADxF,CAFF,CADF,CADF,eAYE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,KAAK,EAAE;AAAEH,MAAAA,MAAM,EAAE;AAAV,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCH,CAAC,CAAC,mBAAD,CAAnC,CADF,eAEE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,QAAQ,EAAE,EAArB;AAAyB,IAAA,UAAU,EAAE,GAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BACGrC,WADH,aACGA,WADH,iDACGA,WAAW,CAAE4C,eADhB,qFACG,uBACGjC,QADH,CACY,CAAC,KAAK,EAAL,GAAU,EAAV,GAAe,CAAhB,EAAmBkC,QAAnB,EADZ,CADH,2DACG,uBAEGX,OAFH,CAEW,CAFX,EAEc;AAAES,IAAAA,cAAc,EAAE;AAAlB,GAFd,CADH,yEAG6C,GAH7C,EAIGN,CAAC,CAAC,qBAAD,CAJJ,CAFF,CADF,CAZF,CARF,EAiCGf,sBAAsB,iBACrB,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,UAAU,EAAE,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8Be,CAAC,CAAC,gBAAD,CAA/B,CADF,CADF,eAIE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAE;AAAES,MAAAA,YAAY,EAAE;AAAhB,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,QAAQ,EAAE,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,CAAC,CAAC,2BAAD,EAA8B;AAAEU,IAAAA,UAAU,EAAE,CAAArD,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAE+C,MAAX,IAAoB,GAApB,IAA0B9C,SAA1B,aAA0BA,SAA1B,uBAA0BA,SAAS,CAAE8C,MAArC;AAAd,GAA9B,CADJ,CADF,CAJF,eASE,oBAAC,aAAD;AACE,IAAA,OAAO,EAAC,KADV;AAEE,IAAA,KAAK,EAAE,aAFT;AAGE,IAAA,EAAE,EAAEzG,IAHN;AAIE,IAAA,EAAE,EAAG,QAAO0D,SAAS,IAAIjC,UAAU,CAACiC,SAAD,CAAY,IAAGC,SAAS,IAAIlC,UAAU,CAACkC,SAAD,CAAY,EAJvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG0C,CAAC,CAAC,2BAAD,EAA8B;AAAEU,IAAAA,UAAU,EAAE,CAAArD,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAE+C,MAAX,IAAoB,GAApB,IAA0B9C,SAA1B,aAA0BA,SAA1B,uBAA0BA,SAAS,CAAE8C,MAArC;AAAd,GAA9B,CANJ,CATF,CADF,CAHF,eAuBE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvBF,eAwBE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBF,CAlCJ,EA8DGzC,WAAW,iBACV,uDACE,oBAAC,YAAD;AACE,IAAA,MAAM,EAAEyB,gBADV;AAEE,IAAA,SAAS,EAAE,MAAMC,mBAAmB,CAAC,KAAD,CAFtC;AAGE,IAAA,WAAW,EAAE1B,WAHf;AAIE,IAAA,qBAAqB,EAAEqB,qBAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE,oBAAC,cAAD;AACE,IAAA,MAAM,EAAEM,kBADV;AAEE,IAAA,SAAS,EAAE,MAAMC,qBAAqB,CAAC,KAAD,CAFxC;AAGE,IAAA,WAAW,EAAE5B,WAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAYE,oBAAC,gBAAD;AACE,IAAA,MAAM,EAAE6B,oBADV;AAEE,IAAA,SAAS,EAAE,MAAMC,uBAAuB,CAAC,KAAD,CAF1C;AAGE,IAAA,WAAW,EAAE9B,WAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CA/DJ,eAmFE,oBAAC,YAAD;AAAc,IAAA,GAAG,EAAC,IAAlB;AAAuB,IAAA,OAAO,EAAC,QAA/B;AAAwC,IAAA,GAAG,EAAEsB,sBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAe,IAAA,GAAG,EAAC,IAAnB;AAAwB,IAAA,OAAO,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AAAgB,IAAA,QAAQ,EAAES,UAA1B;AAAsC,IAAA,OAAO,EAAE3B,eAA/C;AAAgE,IAAA,cAAc,EAAE,CAACkB,sBAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,UAAU,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,UAAU,EAAE,GAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8Be,CAAC,CAAC,4BAAD,CAA/B,CADF,CADF,eAIE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAE;AAAEW,MAAAA,UAAU,EAAE;AAAd,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,QAAQ,EAAE,EAAtB;AAA0B,IAAA,UAAU,EAAE,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACGhD,WADH,aACGA,WADH,iDACGA,WAAW,CAAEO,YADhB,2DACG,uBAA2BmC,aAA3B,CAAyC,CAAzC,CADH,2EACkD,GADlD,CADF,eAIE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACOhD,SADP,aACOA,SADP,uBACOA,SAAS,CAAE+C,MADlB,OAC2B9C,SAD3B,aAC2BA,SAD3B,uBAC2BA,SAAS,CAAE8C,MADtC,CAJF,CAJF,CAHF,CADF,CADF,eAoBE,oBAAC,gBAAD;AAAkB,IAAA,GAAG,EAAEzC,WAAF,aAAEA,WAAF,iDAAEA,WAAW,CAAEO,YAAf,2DAAE,uBAA2BiB,OAA3B,CAAmCvF,IAAI,CAAC8E,MAAL,CAAY,CAAZ,CAAnC,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,UAAU,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,UAAD;AAAY,IAAA,GAAG,EAAC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAasB,CAAC,CAAC,uBAAD,CAAd,CADF,CADF,EAIG,CAAArC,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEiC,YAAb,KAA6BhG,IAAI,CAACgH,QAAL,CAAcpF,YAAd,EAA4BmC,WAA5B,aAA4BA,WAA5B,iDAA4BA,WAAW,CAAEiC,YAAzC,2DAA4B,uBAA2BpB,GAAvD,CAA7B,iBACC,oBAAC,WAAD;AACE,IAAA,OAAO,EAAC,KADV;AAEE,IAAA,YAAY,EAAC,KAFf;AAGE,IAAA,KAAK,EAAC,aAHR;AAIE,IAAA,OAAO,EAAE,MAAMiB,uBAAuB,CAAC,IAAD,CAJxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGO,CAAC,CAAC,gBAAD,CANJ,CALJ,CADF,eAgBE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAE;AAAEW,MAAAA,UAAU,EAAE;AAAd,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,WAAN;AAAkB,IAAA,QAAQ,EAAE,EAA5B;AAAgC,IAAA,UAAU,EAAE,GAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD;AACE,IAAA,GAAG,EAAEhB,aADP;AAEE,IAAA,UAAU,MAFZ;AAGE,IAAA,aAAa,EAAE,CAHjB;AAIE,IAAA,KAAK,EAAEkB,UAAU,CAACf,qBAAD,CAJnB;AAKE,IAAA,GAAG,EAAEe,UAAU,CAAClB,aAAD,CALjB;AAME,IAAA,kBAAkB,EAAE,GANtB;AAOE,IAAA,QAAQ,EAAE,CAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAYE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,QAAQ,EAAE,EAAtB;AAA0B,IAAA,UAAU,EAAE,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,IAAI,EAAC,KAAX;AAAiB,kBAAW,aAA5B;AAA0C,IAAA,KAAK,EAAE;AAAEmB,MAAAA,WAAW,EAAE;AAAf,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,2BAIGnD,WAJH,aAIGA,WAJH,iDAIGA,WAAW,CAAEoD,UAJhB,qFAIG,uBACGzC,QADH,CACY,CAAC,KAAK,EAAL,GAAU,EAAV,GAAe,CAAhB,EAAmBkC,QAAnB,EADZ,CAJH,2DAIG,uBAEGH,aAFH,CAEiB,CAFjB,EAEoB;AAAEC,IAAAA,cAAc,EAAE;AAAlB,GAFpB,CAJH,yEAMmD,GANnD,EAOGN,CAAC,CAAC,qBAAD,CAPJ,CAZF,CAhBF,CAHF,CApBF,CADF,eAiEE,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,KAAK,EAAE;AAAEgB,MAAAA,SAAS,EAAE;AAAb,KAAlB;AAA2C,IAAA,QAAQ,EAAE,EAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,IAAI,EAAC,KAAX;AAAiB,kBAAW,aAA5B;AAA0C,IAAA,KAAK,EAAE;AAAEF,MAAAA,WAAW,EAAE;AAAf,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAIGd,CAAC,CAAC,wBAAD,CAJJ,CAjEF,EAwEG,CAACf,sBAAD,iBACC,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAE;AAAEwB,MAAAA,YAAY,EAAE;AAAhB,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAC,KAAvB;AAA6B,IAAA,YAAY,EAAC,KAA1C;AAAgD,IAAA,KAAK,EAAC,OAAtD;AAA8D,IAAA,OAAO,EAAER,kBAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAAtC,WAAW,SAAX,IAAAA,WAAW,WAAX,sCAAAA,WAAW,CAAEO,YAAb,kFAA2B+C,WAA3B,CAAuCrH,IAAI,CAAC8E,MAAL,CAAY,CAAZ,CAAvC,KACGsB,CAAC,CAAC,kBAAD,CADJ,GAEGA,CAAC,CAAC,2BAAD,CAHP,CADF,EAOG,CAAArC,WAAW,SAAX,IAAAA,WAAW,WAAX,sCAAAA,WAAW,CAAEO,YAAb,kFAA2B+C,WAA3B,CAAuCrH,IAAI,CAAC8E,MAAL,CAAY,CAAZ,CAAvC,mBACC,uDACE,oBAAC,aAAD;AACE,IAAA,OAAO,EAAC,KADV;AAEE,IAAA,YAAY,EAAC,KAFf;AAGE,IAAA,KAAK,EAAC,OAHR;AAIE,IAAA,OAAO,EAAE,MAAMa,qBAAqB,CAAC,IAAD,CAJtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CARJ,CAzEJ,EA8FG,CAACP,qBAAD,GAAyB,IAAzB,GAAgCA,qBAAqB,CAACG,OAAtB,CAA8B,GAA9B,IAAqC,IAArC,gBAC/B,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,qBAAqB,CAACqB,aAAtB,CAAoC,CAApC,CADH,OAC4CL,CAAC,CAAC,4BAAD,CAD7C,CA/FJ,CAnFF,CADF;AA0LD","sourcesContent":["import React, { useCallback, useState } from 'react'\nimport { AutoColumn } from '../../components/Column'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\n\nimport { JSBI, TokenAmount, CAVAX, Token, WAVAX } from '@pangolindex/sdk'\nimport { RouteComponentProps } from 'react-router-dom'\nimport DoubleCurrencyLogo from '../../components/DoubleLogo'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { useWalletModalToggle } from '../../state/application/hooks'\nimport { TYPE } from '../../theme'\n\nimport { RowBetween } from '../../components/Row'\nimport { CardSection, DataCard, CardNoise, CardBGImage } from '../../components/earn/styled'\nimport { ButtonPrimary, ButtonEmpty } from '../../components/Button'\nimport StakingModal from '../../components/earn/StakingModal'\nimport { useStakingInfo } from '../../state/stake/hooks'\nimport UnstakingModal from '../../components/earn/UnstakingModal'\nimport ClaimRewardModal from '../../components/earn/ClaimRewardModal'\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useColor } from '../../hooks/useColor'\nimport { CountUp } from 'use-count-up'\n\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\nimport { currencyId } from '../../utils/currencyId'\nimport { useTotalSupply } from '../../data/TotalSupply'\nimport { usePair } from '../../data/Reserves'\nimport usePrevious from '../../hooks/usePrevious'\n// import useUSDCPrice from '../../utils/useUSDCPrice'\nimport { BIG_INT_ZERO, PNG } from '../../constants'\nimport { useTranslation } from 'react-i18next'\n\nconst PageWrapper = styled(AutoColumn)`\n  max-width: 640px;\n  width: 100%;\n`\n\nconst PositionInfo = styled(AutoColumn)<{ dim: any }>`\n  position: relative;\n  max-width: 640px;\n  width: 100%;\n  opacity: ${({ dim }) => (dim ? 0.6 : 1)};\n`\n\nconst BottomSection = styled(AutoColumn)`\n  border-radius: 12px;\n  width: 100%;\n  position: relative;\n`\n\nconst StyledDataCard = styled(DataCard)<{ bgColor?: any; showBackground?: any }>`\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #1e1a31 0%, #3d51a5 100%);\n  z-index: 2;\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n  background: ${({ theme, bgColor, showBackground }) =>\n    `radial-gradient(91.85% 100% at 1.84% 0%, ${bgColor} 0%,  ${showBackground ? theme.black : theme.bg5} 100%) `};\n`\n\nconst StyledBottomCard = styled(DataCard)<{ dim: any }>`\n  background: ${({ theme }) => theme.bg3};\n  opacity: ${({ dim }) => (dim ? 0.4 : 1)};\n  margin-top: -40px;\n  padding: 0 1.25rem 1rem 1.25rem;\n  padding-top: 32px;\n  z-index: 1;\n`\n\nconst PoolData = styled(DataCard)`\n  background: none;\n  border: 1px solid ${({ theme }) => theme.bg4};\n  padding: 1rem;\n  z-index: 1;\n`\n\nconst VoteCard = styled(DataCard)`\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #27ae60 0%, #000000 100%);\n  overflow: hidden;\n`\n\nconst DataRow = styled(RowBetween)`\n  justify-content: center;\n  gap: 12px;\n\n  ${({ theme }) => theme.mediaWidth.upToSmall`\n     flex-direction: column;\n     gap: 12px;\n   `};\n`\n\nexport default function Manage({\n  match: {\n    params: { currencyIdA, currencyIdB, version }\n  }\n}: RouteComponentProps<{ currencyIdA: string; currencyIdB: string; version: string }>) {\n  const { account, chainId } = useActiveWeb3React()\n\n  // get currencies and pair\n  const [currencyA, currencyB] = [useCurrency(currencyIdA), useCurrency(currencyIdB)]\n  const tokenA = wrappedCurrency(currencyA ?? undefined, chainId)\n  const tokenB = wrappedCurrency(currencyB ?? undefined, chainId)\n\n  const [, stakingTokenPair] = usePair(tokenA, tokenB)\n  const stakingInfo = useStakingInfo(Number(version), stakingTokenPair)?.[0]\n\n  const avaxPool = currencyA === CAVAX || currencyB === CAVAX\n\n  let valueOfTotalStakedAmountInWavax: TokenAmount | undefined\n  // let valueOfTotalStakedAmountInUSDC: CurrencyAmount | undefined\n  let backgroundColor: string\n  let token: Token | undefined\n  const totalSupplyOfStakingToken = useTotalSupply(stakingInfo?.stakedAmount?.token)\n  const [, avaxPngTokenPair] = usePair(CAVAX, PNG[chainId ? chainId : 43114])\n  // let usdToken: Token | undefined\n  if (avaxPool) {\n    token = currencyA === CAVAX ? tokenB : tokenA\n    const wavax = currencyA === CAVAX ? tokenA : tokenB\n\n    // let returnOverMonth: Percent = new Percent('0')\n    if (totalSupplyOfStakingToken && stakingTokenPair && wavax) {\n      // take the total amount of LP tokens staked, multiply by AVAX value of all LP tokens, divide by all LP tokens\n      valueOfTotalStakedAmountInWavax = new TokenAmount(\n        wavax,\n        JSBI.divide(\n          JSBI.multiply(\n            JSBI.multiply(stakingInfo.totalStakedAmount.raw, stakingTokenPair.reserveOf(wavax).raw),\n            JSBI.BigInt(2) // this is b/c the value of LP shares are ~double the value of the wavax they entitle owner to\n          ),\n          totalSupplyOfStakingToken.raw\n        )\n      )\n    }\n\n    // get the USD value of staked wavax\n    // usdToken = wavax\n  } else {\n    let png\n    if (tokenA && tokenA.equals(PNG[tokenA.chainId])) {\n      token = tokenB\n      png = tokenA\n    } else {\n      token = tokenA\n      png = tokenB\n    }\n\n    if (totalSupplyOfStakingToken && stakingTokenPair && avaxPngTokenPair && tokenB && png) {\n      const oneToken = JSBI.BigInt(1000000000000000000)\n      const avaxPngRatio = JSBI.divide(\n        JSBI.multiply(oneToken, avaxPngTokenPair.reserveOf(WAVAX[tokenB.chainId]).raw),\n        avaxPngTokenPair.reserveOf(png).raw\n      )\n\n      const valueOfPngInAvax = JSBI.divide(JSBI.multiply(stakingTokenPair.reserveOf(png).raw, avaxPngRatio), oneToken)\n\n      valueOfTotalStakedAmountInWavax = new TokenAmount(\n        WAVAX[tokenB.chainId],\n        JSBI.divide(\n          JSBI.multiply(\n            JSBI.multiply(stakingInfo.totalStakedAmount.raw, valueOfPngInAvax),\n            JSBI.BigInt(2) // this is b/c the value of LP shares are ~double the value of the wavax they entitle owner to\n          ),\n          totalSupplyOfStakingToken.raw\n        )\n      )\n    }\n    // usdToken = png\n  }\n\n  // get the color of the token\n  backgroundColor = useColor(token)\n\n  // const USDPrice = useUSDCPrice(usdToken)\n  // valueOfTotalStakedAmountInUSDC =\n  // \t\tvalueOfTotalStakedAmountInWavax && USDPrice?.quote(valueOfTotalStakedAmountInWavax)\n\n  // detect existing unstaked LP position to show add button if none found\n  const userLiquidityUnstaked = useTokenBalance(account ?? undefined, stakingInfo?.stakedAmount?.token)\n  const showAddLiquidityButton = Boolean(stakingInfo?.stakedAmount?.equalTo('0') && userLiquidityUnstaked?.equalTo('0'))\n\n  // toggle for staking modal and unstaking modal\n  const [showStakingModal, setShowStakingModal] = useState(false)\n  const [showUnstakingModal, setShowUnstakingModal] = useState(false)\n  const [showClaimRewardModal, setShowClaimRewardModal] = useState(false)\n\n  // fade cards if nothing staked or nothing earned yet\n  const disableTop = !stakingInfo?.stakedAmount || stakingInfo.stakedAmount.equalTo(JSBI.BigInt(0))\n\n  // get WAVAX value of staked LP tokens\n\n  // let valueOfTotalStakedAmountInWAVAX: TokenAmount | undefined\n  // if (totalSupplyOfStakingToken && stakingTokenPair && stakingInfo && WAVAX) {\n  // \t// take the total amount of LP tokens staked, multiply by AVAX value of all LP tokens, divide by all LP tokens\n  // \tvalueOfTotalStakedAmountInWAVAX = new TokenAmount(\n  // \t\tWAVAX,\n  // \t\tJSBI.divide(\n  // \t\t\tJSBI.multiply(\n  // \t\t\t\tJSBI.multiply(stakingInfo.totalStakedAmount.raw, stakingTokenPair.reserveOf(WAVAX).raw),\n  // \t\t\t\tJSBI.BigInt(2) // this is b/c the value of LP shares are ~double the value of the WAVAX they entitle owner to\n  // \t\t\t),\n  // \t\t\ttotalSupplyOfStakingToken.raw\n  // \t\t)\n  // \t)\n  // }\n\n  const countUpAmount = stakingInfo?.earnedAmount?.toFixed(6) ?? '0'\n  const countUpAmountPrevious = usePrevious(countUpAmount) ?? '0'\n\n  const toggleWalletModal = useWalletModalToggle()\n  const { t } = useTranslation()\n\n  const handleDepositClick = useCallback(() => {\n    if (account) {\n      setShowStakingModal(true)\n    } else {\n      toggleWalletModal()\n    }\n  }, [account, toggleWalletModal])\n\n  return (\n    <PageWrapper gap=\"lg\" justify=\"center\">\n      <RowBetween style={{ gap: '24px' }}>\n        <TYPE.mediumHeader style={{ margin: 0 }}>\n          {currencyA?.symbol}-{currencyB?.symbol} {t('earnPage.liquidityMining')}\n        </TYPE.mediumHeader>\n        <DoubleCurrencyLogo currency0={currencyA ?? undefined} currency1={currencyB ?? undefined} size={24} />\n      </RowBetween>\n\n      <DataRow style={{ gap: '24px' }}>\n        <PoolData>\n          <AutoColumn gap=\"sm\">\n            <TYPE.body style={{ margin: 0 }}>{t('earnPage.totalStaked')}</TYPE.body>\n            <TYPE.body fontSize={24} fontWeight={500}>\n              {`${valueOfTotalStakedAmountInWavax?.toSignificant(4, { groupSeparator: ',' }) ?? '-'} AVAX`}\n              {/* {valueOfTotalStakedAmountInUSDC\n\t\t\t\t\t\t\t? `$${valueOfTotalStakedAmountInUSDC.toFixed(0, { groupSeparator: ',' })}`\n\t\t\t\t\t\t\t: `${valueOfTotalStakedAmountInWavax?.toSignificant(4, { groupSeparator: ',' }) ?? '-'} AVAX`} */}\n            </TYPE.body>\n          </AutoColumn>\n        </PoolData>\n        <PoolData>\n          <AutoColumn gap=\"sm\">\n            <TYPE.body style={{ margin: 0 }}>{t('earnPage.poolRate')}</TYPE.body>\n            <TYPE.body fontSize={24} fontWeight={500}>\n              {stakingInfo?.totalRewardRate\n                ?.multiply((60 * 60 * 24 * 7).toString())\n                ?.toFixed(0, { groupSeparator: ',' }) ?? '-'}\n              {t('earnPage.pngPerWeek')}\n            </TYPE.body>\n          </AutoColumn>\n        </PoolData>\n      </DataRow>\n\n      {showAddLiquidityButton && (\n        <VoteCard>\n          <CardBGImage />\n          <CardNoise />\n          <CardSection>\n            <AutoColumn gap=\"md\">\n              <RowBetween>\n                <TYPE.white fontWeight={600}>{t('earnPage.step1')}</TYPE.white>\n              </RowBetween>\n              <RowBetween style={{ marginBottom: '1rem' }}>\n                <TYPE.white fontSize={14}>\n                  {t('earnPage.pglTokenRequired', { poolHandle: currencyA?.symbol + '-' + currencyB?.symbol })}\n                </TYPE.white>\n              </RowBetween>\n              <ButtonPrimary\n                padding=\"8px\"\n                width={'fit-content'}\n                as={Link}\n                to={`/add/${currencyA && currencyId(currencyA)}/${currencyB && currencyId(currencyB)}`}\n              >\n                {t('earnPage.addPoolLiquidity', { poolHandle: currencyA?.symbol + '-' + currencyB?.symbol })}\n              </ButtonPrimary>\n            </AutoColumn>\n          </CardSection>\n          <CardBGImage />\n          <CardNoise />\n        </VoteCard>\n      )}\n\n      {stakingInfo && (\n        <>\n          <StakingModal\n            isOpen={showStakingModal}\n            onDismiss={() => setShowStakingModal(false)}\n            stakingInfo={stakingInfo}\n            userLiquidityUnstaked={userLiquidityUnstaked}\n          />\n          <UnstakingModal\n            isOpen={showUnstakingModal}\n            onDismiss={() => setShowUnstakingModal(false)}\n            stakingInfo={stakingInfo}\n          />\n          <ClaimRewardModal\n            isOpen={showClaimRewardModal}\n            onDismiss={() => setShowClaimRewardModal(false)}\n            stakingInfo={stakingInfo}\n          />\n        </>\n      )}\n\n      <PositionInfo gap=\"lg\" justify=\"center\" dim={showAddLiquidityButton}>\n        <BottomSection gap=\"lg\" justify=\"center\">\n          <StyledDataCard disabled={disableTop} bgColor={backgroundColor} showBackground={!showAddLiquidityButton}>\n            <CardSection>\n              <CardBGImage desaturate />\n              <CardNoise />\n              <AutoColumn gap=\"md\">\n                <RowBetween>\n                  <TYPE.white fontWeight={600}>{t('earnPage.liquidityDeposits')}</TYPE.white>\n                </RowBetween>\n                <RowBetween style={{ alignItems: 'baseline' }}>\n                  <TYPE.white fontSize={36} fontWeight={600}>\n                    {stakingInfo?.stakedAmount?.toSignificant(6) ?? '-'}\n                  </TYPE.white>\n                  <TYPE.white>\n                    PGL {currencyA?.symbol}-{currencyB?.symbol}\n                  </TYPE.white>\n                </RowBetween>\n              </AutoColumn>\n            </CardSection>\n          </StyledDataCard>\n          <StyledBottomCard dim={stakingInfo?.stakedAmount?.equalTo(JSBI.BigInt(0))}>\n            <CardBGImage desaturate />\n            <CardNoise />\n            <AutoColumn gap=\"sm\">\n              <RowBetween>\n                <div>\n                  <TYPE.black>{t('earnPage.unclaimedPng')}</TYPE.black>\n                </div>\n                {stakingInfo?.earnedAmount && JSBI.notEqual(BIG_INT_ZERO, stakingInfo?.earnedAmount?.raw) && (\n                  <ButtonEmpty\n                    padding=\"8px\"\n                    borderRadius=\"8px\"\n                    width=\"fit-content\"\n                    onClick={() => setShowClaimRewardModal(true)}\n                  >\n                    {t('earnPage.claim')}\n                  </ButtonEmpty>\n                )}\n              </RowBetween>\n              <RowBetween style={{ alignItems: 'baseline' }}>\n                <TYPE.largeHeader fontSize={36} fontWeight={600}>\n                  <CountUp\n                    key={countUpAmount}\n                    isCounting\n                    decimalPlaces={4}\n                    start={parseFloat(countUpAmountPrevious)}\n                    end={parseFloat(countUpAmount)}\n                    thousandsSeparator={','}\n                    duration={1}\n                  />\n                </TYPE.largeHeader>\n                <TYPE.black fontSize={16} fontWeight={500}>\n                  <span role=\"img\" aria-label=\"wizard-icon\" style={{ marginRight: '8px ' }}>\n                    ⚡\n                  </span>\n                  {stakingInfo?.rewardRate\n                    ?.multiply((60 * 60 * 24 * 7).toString())\n                    ?.toSignificant(4, { groupSeparator: ',' }) ?? '-'}\n                  {t('earnPage.pngPerWeek')}\n                </TYPE.black>\n              </RowBetween>\n            </AutoColumn>\n          </StyledBottomCard>\n        </BottomSection>\n        <TYPE.main style={{ textAlign: 'center' }} fontSize={14}>\n          <span role=\"img\" aria-label=\"wizard-icon\" style={{ marginRight: '8px' }}>\n            ⭐️\n          </span>\n          {t('earnPage.automagically')}\n        </TYPE.main>\n\n        {!showAddLiquidityButton && (\n          <DataRow style={{ marginBottom: '1rem' }}>\n            <ButtonPrimary padding=\"8px\" borderRadius=\"8px\" width=\"160px\" onClick={handleDepositClick}>\n              {stakingInfo?.stakedAmount?.greaterThan(JSBI.BigInt(0))\n                ? t('earnPage.deposit')\n                : t('earnPage.depositPglTokens')}\n            </ButtonPrimary>\n\n            {stakingInfo?.stakedAmount?.greaterThan(JSBI.BigInt(0)) && (\n              <>\n                <ButtonPrimary\n                  padding=\"8px\"\n                  borderRadius=\"8px\"\n                  width=\"160px\"\n                  onClick={() => setShowUnstakingModal(true)}\n                >\n                  Withdraw\n                </ButtonPrimary>\n              </>\n            )}\n          </DataRow>\n        )}\n        {!userLiquidityUnstaked ? null : userLiquidityUnstaked.equalTo('0') ? null : (\n          <TYPE.main>\n            {userLiquidityUnstaked.toSignificant(6)} {t('earnPage.pglTokenAvailable')}\n          </TYPE.main>\n        )}\n      </PositionInfo>\n    </PageWrapper>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}