{"ast":null,"code":"import { useEffect, useState } from 'react';\nconst isClient = typeof window === 'object';\n\nfunction getSize() {\n  return {\n    width: isClient ? window.innerWidth : undefined,\n    height: isClient ? window.innerHeight : undefined\n  };\n} // https://usehooks.com/useWindowSize/\n\n\nexport function useWindowSize() {\n  const [windowSize, setWindowSize] = useState(getSize);\n  useEffect(() => {\n    function handleResize() {\n      setWindowSize(getSize());\n    }\n\n    if (isClient) {\n      window.addEventListener('resize', handleResize);\n      return () => {\n        window.removeEventListener('resize', handleResize);\n      };\n    }\n\n    return undefined;\n  }, []);\n  return windowSize;\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/hooks/useWindowSize.ts"],"names":["useEffect","useState","isClient","window","getSize","width","innerWidth","undefined","height","innerHeight","useWindowSize","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,MAAMC,QAAQ,GAAG,OAAOC,MAAP,KAAkB,QAAnC;;AAEA,SAASC,OAAT,GAAmB;AACjB,SAAO;AACLC,IAAAA,KAAK,EAAEH,QAAQ,GAAGC,MAAM,CAACG,UAAV,GAAuBC,SADjC;AAELC,IAAAA,MAAM,EAAEN,QAAQ,GAAGC,MAAM,CAACM,WAAV,GAAwBF;AAFnC,GAAP;AAID,C,CAED;;;AACA,OAAO,SAASG,aAAT,GAAyB;AAC9B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAACG,OAAD,CAA5C;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,aAASa,YAAT,GAAwB;AACtBD,MAAAA,aAAa,CAACR,OAAO,EAAR,CAAb;AACD;;AAED,QAAIF,QAAJ,EAAc;AACZC,MAAAA,MAAM,CAACW,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AACA,aAAO,MAAM;AACXV,QAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC;AACD,OAFD;AAGD;;AACD,WAAON,SAAP;AACD,GAZQ,EAYN,EAZM,CAAT;AAcA,SAAOI,UAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react'\n\nconst isClient = typeof window === 'object'\n\nfunction getSize() {\n  return {\n    width: isClient ? window.innerWidth : undefined,\n    height: isClient ? window.innerHeight : undefined\n  }\n}\n\n// https://usehooks.com/useWindowSize/\nexport function useWindowSize() {\n  const [windowSize, setWindowSize] = useState(getSize)\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowSize(getSize())\n    }\n\n    if (isClient) {\n      window.addEventListener('resize', handleResize)\n      return () => {\n        window.removeEventListener('resize', handleResize)\n      }\n    }\n    return undefined\n  }, [])\n\n  return windowSize\n}\n"]},"metadata":{},"sourceType":"module"}