{"ast":null,"code":"var _jsxFileName = \"/Users/sidshekhar/Documents/interface/src/components/swap/ConfirmSwapModal.tsx\";\nimport { currencyEquals } from '@pangolindex/sdk';\nimport React, { useCallback, useMemo } from 'react';\nimport TransactionConfirmationModal, { ConfirmationModalContent, TransactionErrorContent } from '../TransactionConfirmationModal';\nimport SwapModalFooter from './SwapModalFooter';\nimport SwapModalHeader from './SwapModalHeader';\nimport { useTranslation } from 'react-i18next';\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */\n\nfunction tradeMeaningfullyDiffers(tradeA, tradeB) {\n  return tradeA.tradeType !== tradeB.tradeType || !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) || !tradeA.inputAmount.equalTo(tradeB.inputAmount) || !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) || !tradeA.outputAmount.equalTo(tradeB.outputAmount);\n}\n\nexport default function ConfirmSwapModal({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  recipient,\n  swapErrorMessage,\n  isOpen,\n  attemptingTxn,\n  txHash\n}) {\n  var _trade$inputAmount, _trade$inputAmount2, _trade$inputAmount2$c, _trade$outputAmount, _trade$outputAmount2, _trade$outputAmount2$;\n\n  const showAcceptChanges = useMemo(() => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)), [originalTrade, trade]);\n  const {\n    t\n  } = useTranslation();\n  const modalHeader = useCallback(() => {\n    return trade ? /*#__PURE__*/React.createElement(SwapModalHeader, {\n      trade: trade,\n      allowedSlippage: allowedSlippage,\n      recipient: recipient,\n      showAcceptChanges: showAcceptChanges,\n      onAcceptChanges: onAcceptChanges,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }) : null;\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade]);\n  const modalBottom = useCallback(() => {\n    return trade ? /*#__PURE__*/React.createElement(SwapModalFooter, {\n      onConfirm: onConfirm,\n      trade: trade,\n      disabledConfirm: showAcceptChanges,\n      swapErrorMessage: swapErrorMessage,\n      allowedSlippage: allowedSlippage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }) : null;\n  }, [allowedSlippage, onConfirm, showAcceptChanges, swapErrorMessage, trade]); // text to show while loading\n\n  const pendingText = `Swapping ${trade === null || trade === void 0 ? void 0 : (_trade$inputAmount = trade.inputAmount) === null || _trade$inputAmount === void 0 ? void 0 : _trade$inputAmount.toSignificant(6)} ${trade === null || trade === void 0 ? void 0 : (_trade$inputAmount2 = trade.inputAmount) === null || _trade$inputAmount2 === void 0 ? void 0 : (_trade$inputAmount2$c = _trade$inputAmount2.currency) === null || _trade$inputAmount2$c === void 0 ? void 0 : _trade$inputAmount2$c.symbol} for ${trade === null || trade === void 0 ? void 0 : (_trade$outputAmount = trade.outputAmount) === null || _trade$outputAmount === void 0 ? void 0 : _trade$outputAmount.toSignificant(6)} ${trade === null || trade === void 0 ? void 0 : (_trade$outputAmount2 = trade.outputAmount) === null || _trade$outputAmount2 === void 0 ? void 0 : (_trade$outputAmount2$ = _trade$outputAmount2.currency) === null || _trade$outputAmount2$ === void 0 ? void 0 : _trade$outputAmount2$.symbol}`;\n  const confirmationContent = useCallback(() => swapErrorMessage ? /*#__PURE__*/React.createElement(TransactionErrorContent, {\n    onDismiss: onDismiss,\n    message: swapErrorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(ConfirmationModalContent, {\n    title: t('swap.confirmSwap'),\n    onDismiss: onDismiss,\n    topContent: modalHeader,\n    bottomContent: modalBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }), [onDismiss, modalBottom, modalHeader, swapErrorMessage, t]);\n  return /*#__PURE__*/React.createElement(TransactionConfirmationModal, {\n    isOpen: isOpen,\n    onDismiss: onDismiss,\n    attemptingTxn: attemptingTxn,\n    hash: txHash,\n    content: confirmationContent,\n    pendingText: pendingText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/components/swap/ConfirmSwapModal.tsx"],"names":["currencyEquals","React","useCallback","useMemo","TransactionConfirmationModal","ConfirmationModalContent","TransactionErrorContent","SwapModalFooter","SwapModalHeader","useTranslation","tradeMeaningfullyDiffers","tradeA","tradeB","tradeType","inputAmount","currency","equalTo","outputAmount","ConfirmSwapModal","trade","originalTrade","onAcceptChanges","allowedSlippage","onConfirm","onDismiss","recipient","swapErrorMessage","isOpen","attemptingTxn","txHash","showAcceptChanges","Boolean","t","modalHeader","modalBottom","pendingText","toSignificant","symbol","confirmationContent"],"mappings":"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","sourcesContent":["import { currencyEquals, Trade } from '@pangolindex/sdk'\nimport React, { useCallback, useMemo } from 'react'\nimport TransactionConfirmationModal, {\n  ConfirmationModalContent,\n  TransactionErrorContent\n} from '../TransactionConfirmationModal'\nimport SwapModalFooter from './SwapModalFooter'\nimport SwapModalHeader from './SwapModalHeader'\nimport { useTranslation } from 'react-i18next'\n\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param tradeA trade A\n * @param tradeB trade B\n */\nfunction tradeMeaningfullyDiffers(tradeA: Trade, tradeB: Trade): boolean {\n  return (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\n    !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) ||\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\n  )\n}\n\nexport default function ConfirmSwapModal({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  recipient,\n  swapErrorMessage,\n  isOpen,\n  attemptingTxn,\n  txHash\n}: {\n  isOpen: boolean\n  trade: Trade | undefined\n  originalTrade: Trade | undefined\n  attemptingTxn: boolean\n  txHash: string | undefined\n  recipient: string | null\n  allowedSlippage: number\n  onAcceptChanges: () => void\n  onConfirm: () => void\n  swapErrorMessage: string | undefined\n  onDismiss: () => void\n}) {\n  const showAcceptChanges = useMemo(\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\n    [originalTrade, trade]\n  )\n  const { t } = useTranslation()\n\n  const modalHeader = useCallback(() => {\n    return trade ? (\n      <SwapModalHeader\n        trade={trade}\n        allowedSlippage={allowedSlippage}\n        recipient={recipient}\n        showAcceptChanges={showAcceptChanges}\n        onAcceptChanges={onAcceptChanges}\n      />\n    ) : null\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade])\n\n  const modalBottom = useCallback(() => {\n    return trade ? (\n      <SwapModalFooter\n        onConfirm={onConfirm}\n        trade={trade}\n        disabledConfirm={showAcceptChanges}\n        swapErrorMessage={swapErrorMessage}\n        allowedSlippage={allowedSlippage}\n      />\n    ) : null\n  }, [allowedSlippage, onConfirm, showAcceptChanges, swapErrorMessage, trade])\n\n  // text to show while loading\n  const pendingText = `Swapping ${trade?.inputAmount?.toSignificant(6)} ${\n    trade?.inputAmount?.currency?.symbol\n  } for ${trade?.outputAmount?.toSignificant(6)} ${trade?.outputAmount?.currency?.symbol}`\n\n  const confirmationContent = useCallback(\n    () =>\n      swapErrorMessage ? (\n        <TransactionErrorContent onDismiss={onDismiss} message={swapErrorMessage} />\n      ) : (\n        <ConfirmationModalContent\n          title={t('swap.confirmSwap')}\n          onDismiss={onDismiss}\n          topContent={modalHeader}\n          bottomContent={modalBottom}\n        />\n      ),\n    [onDismiss, modalBottom, modalHeader, swapErrorMessage, t]\n  )\n\n  return (\n    <TransactionConfirmationModal\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      content={confirmationContent}\n      pendingText={pendingText}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}