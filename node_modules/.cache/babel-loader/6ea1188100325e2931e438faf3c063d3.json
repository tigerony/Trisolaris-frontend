{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { getVersionUpgrade, VersionUpgrade } from '@pangolindex/token-lists';\nimport { DEFAULT_LIST_OF_LISTS, DEFAULT_TOKEN_LIST_URL, STABLECOIN_TOKEN_LIST } from '../../constants/lists';\nimport { updateVersion } from '../global/actions';\nimport { acceptListUpdate, addList, fetchTokenList, removeList, selectList } from './actions';\nconst NEW_LIST_STATE = {\n  error: null,\n  current: null,\n  loadingRequestId: null,\n  pendingUpdate: null\n};\nconst initialState = {\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\n  byUrl: { ...DEFAULT_LIST_OF_LISTS.reduce((memo, listUrl) => {\n      memo[listUrl] = NEW_LIST_STATE;\n      return memo;\n    }, {})\n  },\n  selectedListUrl: [DEFAULT_TOKEN_LIST_URL]\n};\nexport default createReducer(initialState, builder => builder.addCase(fetchTokenList.pending, (state, {\n  payload: {\n    requestId,\n    url\n  }\n}) => {\n  state.byUrl[url] = {\n    current: null,\n    pendingUpdate: null,\n    ...state.byUrl[url],\n    loadingRequestId: requestId,\n    error: null\n  };\n}).addCase(fetchTokenList.fulfilled, (state, {\n  payload: {\n    requestId,\n    tokenList,\n    url\n  }\n}) => {\n  var _state$byUrl$url, _state$byUrl$url2;\n\n  const current = (_state$byUrl$url = state.byUrl[url]) === null || _state$byUrl$url === void 0 ? void 0 : _state$byUrl$url.current;\n  const loadingRequestId = (_state$byUrl$url2 = state.byUrl[url]) === null || _state$byUrl$url2 === void 0 ? void 0 : _state$byUrl$url2.loadingRequestId; // no-op if update does nothing\n\n  if (current) {\n    const upgradeType = getVersionUpgrade(current.version, tokenList.version);\n    if (upgradeType === VersionUpgrade.NONE) return;\n\n    if (loadingRequestId === null || loadingRequestId === requestId) {\n      state.byUrl[url] = { ...state.byUrl[url],\n        loadingRequestId: null,\n        error: null,\n        current: current,\n        pendingUpdate: tokenList\n      };\n    }\n  } else {\n    state.byUrl[url] = { ...state.byUrl[url],\n      loadingRequestId: null,\n      error: null,\n      current: tokenList,\n      pendingUpdate: null\n    };\n  }\n}).addCase(fetchTokenList.rejected, (state, {\n  payload: {\n    url,\n    requestId,\n    errorMessage\n  }\n}) => {\n  var _state$byUrl$url3;\n\n  if (((_state$byUrl$url3 = state.byUrl[url]) === null || _state$byUrl$url3 === void 0 ? void 0 : _state$byUrl$url3.loadingRequestId) !== requestId) {\n    // no-op since it's not the latest request\n    return;\n  }\n\n  state.byUrl[url] = { ...state.byUrl[url],\n    loadingRequestId: null,\n    error: errorMessage,\n    current: null,\n    pendingUpdate: null\n  };\n}).addCase(selectList, (state, {\n  payload: {\n    url,\n    shouldSelect\n  }\n}) => {\n  const existingSelectedListUrl = [].concat(state.selectedListUrl || []);\n\n  if (shouldSelect) {\n    // if user want to select the list, then just push it into selected array\n    existingSelectedListUrl.push(url);\n    state.selectedListUrl = existingSelectedListUrl;\n  } else {\n    let index = existingSelectedListUrl.indexOf(url);\n\n    if (index !== -1) {\n      if ((existingSelectedListUrl === null || existingSelectedListUrl === void 0 ? void 0 : existingSelectedListUrl.length) === 1) {\n        // if user want to deselect the list and if there is only one item in the list\n        // and user is trying to unselect default list then select stable coin list ( because we always want to keep atleast one list selected )\n        // otherwise select default list url\n        const newSelectedListUrl = url === DEFAULT_TOKEN_LIST_URL ? STABLECOIN_TOKEN_LIST : DEFAULT_TOKEN_LIST_URL;\n        state.selectedListUrl = [newSelectedListUrl];\n      } else {\n        existingSelectedListUrl.splice(index, 1);\n        state.selectedListUrl = existingSelectedListUrl;\n      }\n    }\n  } // automatically adds list\n\n\n  if (!state.byUrl[url]) {\n    state.byUrl[url] = NEW_LIST_STATE;\n  }\n}).addCase(addList, (state, {\n  payload: url\n}) => {\n  if (!state.byUrl[url]) {\n    state.byUrl[url] = NEW_LIST_STATE;\n  }\n}).addCase(removeList, (state, {\n  payload: url\n}) => {\n  if (state.byUrl[url]) {\n    delete state.byUrl[url];\n  }\n\n  const existingList = [].concat(state.selectedListUrl || []);\n  let index = existingList.indexOf(url);\n\n  if (index !== -1) {\n    if ((existingList === null || existingList === void 0 ? void 0 : existingList.length) === 1) {\n      // if user want to remove the list and if there is only one item in the selected list\n      // and user is trying to remove default list then select first list from all lists ( because we always want to keep atleast one list selected )\n      // otherwise select default list url\n      const newSelectedListUrl = url === DEFAULT_TOKEN_LIST_URL ? Object.keys(state.byUrl)[0] : DEFAULT_TOKEN_LIST_URL;\n      state.selectedListUrl = [newSelectedListUrl];\n    } else {\n      existingList.splice(index, 1);\n      state.selectedListUrl = existingList;\n    }\n  }\n}).addCase(acceptListUpdate, (state, {\n  payload: url\n}) => {\n  var _state$byUrl$url4;\n\n  if (!((_state$byUrl$url4 = state.byUrl[url]) === null || _state$byUrl$url4 === void 0 ? void 0 : _state$byUrl$url4.pendingUpdate)) {\n    throw new Error('accept list update called without pending update');\n  }\n\n  state.byUrl[url] = { ...state.byUrl[url],\n    pendingUpdate: null,\n    current: state.byUrl[url].pendingUpdate\n  };\n}).addCase(updateVersion, state => {\n  // state loaded from localStorage, but new lists have never been initialized\n  if (!state.lastInitializedDefaultListOfLists) {\n    state.byUrl = initialState.byUrl;\n    state.selectedListUrl = [DEFAULT_TOKEN_LIST_URL];\n  } else if (state.lastInitializedDefaultListOfLists) {\n    const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce((s, l) => s.add(l), new Set());\n    const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce((s, l) => s.add(l), new Set());\n    DEFAULT_LIST_OF_LISTS.forEach(listUrl => {\n      if (!lastInitializedSet.has(listUrl)) {\n        state.byUrl[listUrl] = NEW_LIST_STATE;\n      }\n    });\n    state.lastInitializedDefaultListOfLists.forEach(listUrl => {\n      if (!newListOfListsSet.has(listUrl)) {\n        delete state.byUrl[listUrl];\n      }\n    });\n  }\n\n  state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS;\n\n  if (!state.selectedListUrl) {\n    state.selectedListUrl = [DEFAULT_TOKEN_LIST_URL];\n\n    if (!state.byUrl[DEFAULT_TOKEN_LIST_URL]) {\n      state.byUrl[DEFAULT_TOKEN_LIST_URL] = NEW_LIST_STATE;\n    }\n  }\n}));","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/state/lists/reducer.ts"],"names":["createReducer","getVersionUpgrade","VersionUpgrade","DEFAULT_LIST_OF_LISTS","DEFAULT_TOKEN_LIST_URL","STABLECOIN_TOKEN_LIST","updateVersion","acceptListUpdate","addList","fetchTokenList","removeList","selectList","NEW_LIST_STATE","error","current","loadingRequestId","pendingUpdate","initialState","lastInitializedDefaultListOfLists","byUrl","reduce","memo","listUrl","selectedListUrl","builder","addCase","pending","state","payload","requestId","url","fulfilled","tokenList","upgradeType","version","NONE","rejected","errorMessage","shouldSelect","existingSelectedListUrl","concat","push","index","indexOf","length","newSelectedListUrl","splice","existingList","Object","keys","Error","lastInitializedSet","s","l","add","Set","newListOfListsSet","forEach","has"],"mappings":"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","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { getVersionUpgrade, VersionUpgrade } from '@pangolindex/token-lists'\nimport { TokenList } from '@pangolindex/token-lists/dist/types'\nimport { DEFAULT_LIST_OF_LISTS, DEFAULT_TOKEN_LIST_URL, STABLECOIN_TOKEN_LIST } from '../../constants/lists'\nimport { updateVersion } from '../global/actions'\nimport { acceptListUpdate, addList, fetchTokenList, removeList, selectList } from './actions'\n\nexport interface ListsState {\n  readonly byUrl: {\n    readonly [url: string]: {\n      readonly current: TokenList | null\n      readonly pendingUpdate: TokenList | null\n      readonly loadingRequestId: string | null\n      readonly error: string | null\n    }\n  }\n  // this contains the default list of lists from the last time the updateVersion was called, i.e. the app was reloaded\n  readonly lastInitializedDefaultListOfLists?: string[]\n  readonly selectedListUrl: string[] | undefined\n}\n\ntype ListState = ListsState['byUrl'][string]\n\nconst NEW_LIST_STATE: ListState = {\n  error: null,\n  current: null,\n  loadingRequestId: null,\n  pendingUpdate: null\n}\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer U> ? U[] : T[P] }\n\nconst initialState: ListsState = {\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\n  byUrl: {\n    ...DEFAULT_LIST_OF_LISTS.reduce<Mutable<ListsState['byUrl']>>((memo, listUrl) => {\n      memo[listUrl] = NEW_LIST_STATE\n      return memo\n    }, {})\n  },\n  selectedListUrl: [DEFAULT_TOKEN_LIST_URL]\n}\n\nexport default createReducer(initialState, builder =>\n  builder\n    .addCase(fetchTokenList.pending, (state, { payload: { requestId, url } }) => {\n      state.byUrl[url] = {\n        current: null,\n        pendingUpdate: null,\n        ...state.byUrl[url],\n        loadingRequestId: requestId,\n        error: null\n      }\n    })\n    .addCase(fetchTokenList.fulfilled, (state, { payload: { requestId, tokenList, url } }) => {\n      const current = state.byUrl[url]?.current\n      const loadingRequestId = state.byUrl[url]?.loadingRequestId\n\n      // no-op if update does nothing\n      if (current) {\n        const upgradeType = getVersionUpgrade(current.version, tokenList.version)\n        if (upgradeType === VersionUpgrade.NONE) return\n        if (loadingRequestId === null || loadingRequestId === requestId) {\n          state.byUrl[url] = {\n            ...state.byUrl[url],\n            loadingRequestId: null,\n            error: null,\n            current: current,\n            pendingUpdate: tokenList\n          }\n        }\n      } else {\n        state.byUrl[url] = {\n          ...state.byUrl[url],\n          loadingRequestId: null,\n          error: null,\n          current: tokenList,\n          pendingUpdate: null\n        }\n      }\n    })\n    .addCase(fetchTokenList.rejected, (state, { payload: { url, requestId, errorMessage } }) => {\n      if (state.byUrl[url]?.loadingRequestId !== requestId) {\n        // no-op since it's not the latest request\n        return\n      }\n\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        loadingRequestId: null,\n        error: errorMessage,\n        current: null,\n        pendingUpdate: null\n      }\n    })\n    .addCase(selectList, (state, { payload: { url, shouldSelect } }) => {\n      const existingSelectedListUrl = ([] as string[]).concat(state.selectedListUrl || [])\n      if (shouldSelect) {\n        // if user want to select the list, then just push it into selected array\n        existingSelectedListUrl.push(url)\n        state.selectedListUrl = existingSelectedListUrl\n      } else {\n        let index = existingSelectedListUrl.indexOf(url)\n\n        if (index !== -1) {\n          if (existingSelectedListUrl?.length === 1) {\n            // if user want to deselect the list and if there is only one item in the list\n            // and user is trying to unselect default list then select stable coin list ( because we always want to keep atleast one list selected )\n            // otherwise select default list url\n            const newSelectedListUrl = url === DEFAULT_TOKEN_LIST_URL ? STABLECOIN_TOKEN_LIST : DEFAULT_TOKEN_LIST_URL\n            state.selectedListUrl = [newSelectedListUrl]\n          } else {\n            existingSelectedListUrl.splice(index, 1)\n            state.selectedListUrl = existingSelectedListUrl\n          }\n        }\n      }\n\n      // automatically adds list\n      if (!state.byUrl[url]) {\n        state.byUrl[url] = NEW_LIST_STATE\n      }\n    })\n    .addCase(addList, (state, { payload: url }) => {\n      if (!state.byUrl[url]) {\n        state.byUrl[url] = NEW_LIST_STATE\n      }\n    })\n    .addCase(removeList, (state, { payload: url }) => {\n      if (state.byUrl[url]) {\n        delete state.byUrl[url]\n      }\n\n      const existingList = ([] as string[]).concat(state.selectedListUrl || [])\n      let index = existingList.indexOf(url)\n\n      if (index !== -1) {\n        if (existingList?.length === 1) {\n          // if user want to remove the list and if there is only one item in the selected list\n          // and user is trying to remove default list then select first list from all lists ( because we always want to keep atleast one list selected )\n          // otherwise select default list url\n          const newSelectedListUrl =\n            url === DEFAULT_TOKEN_LIST_URL ? Object.keys(state.byUrl)[0] : DEFAULT_TOKEN_LIST_URL\n          state.selectedListUrl = [newSelectedListUrl]\n        } else {\n          existingList.splice(index, 1)\n          state.selectedListUrl = existingList\n        }\n      }\n    })\n    .addCase(acceptListUpdate, (state, { payload: url }) => {\n      if (!state.byUrl[url]?.pendingUpdate) {\n        throw new Error('accept list update called without pending update')\n      }\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        pendingUpdate: null,\n        current: state.byUrl[url].pendingUpdate\n      }\n    })\n    .addCase(updateVersion, state => {\n      // state loaded from localStorage, but new lists have never been initialized\n      if (!state.lastInitializedDefaultListOfLists) {\n        state.byUrl = initialState.byUrl\n        state.selectedListUrl = [DEFAULT_TOKEN_LIST_URL]\n      } else if (state.lastInitializedDefaultListOfLists) {\n        const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce<Set<string>>(\n          (s, l) => s.add(l),\n          new Set()\n        )\n        const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce<Set<string>>((s, l) => s.add(l), new Set())\n\n        DEFAULT_LIST_OF_LISTS.forEach(listUrl => {\n          if (!lastInitializedSet.has(listUrl)) {\n            state.byUrl[listUrl] = NEW_LIST_STATE\n          }\n        })\n\n        state.lastInitializedDefaultListOfLists.forEach(listUrl => {\n          if (!newListOfListsSet.has(listUrl)) {\n            delete state.byUrl[listUrl]\n          }\n        })\n      }\n\n      state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS\n\n      if (!state.selectedListUrl) {\n        state.selectedListUrl = [DEFAULT_TOKEN_LIST_URL]\n        if (!state.byUrl[DEFAULT_TOKEN_LIST_URL]) {\n          state.byUrl[DEFAULT_TOKEN_LIST_URL] = NEW_LIST_STATE\n        }\n      }\n    })\n)\n"]},"metadata":{},"sourceType":"module"}