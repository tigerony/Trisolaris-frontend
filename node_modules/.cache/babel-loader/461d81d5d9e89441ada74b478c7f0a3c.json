{"ast":null,"code":"var _jsxFileName = \"/Users/sidshekhar/Documents/interface/src/components/earn/ClaimRewardModal.tsx\";\nimport React, { useState } from 'react';\nimport Modal from '../Modal';\nimport { AutoColumn } from '../Column';\nimport styled from 'styled-components';\nimport { RowBetween } from '../Row';\nimport { TYPE, CloseIcon } from '../../theme';\nimport { ButtonError } from '../Button';\nimport { useStakingContract } from '../../hooks/useContract';\nimport { SubmittedView, LoadingView } from '../ModalViews';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport { useActiveWeb3React } from '../../hooks';\nimport { useTranslation } from 'react-i18next';\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n  padding: 1rem;\n`;\nexport default function ClaimRewardModal({\n  isOpen,\n  onDismiss,\n  stakingInfo\n}) {\n  var _stakingInfo$earnedAm, _error2, _stakingInfo$earnedAm2;\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const {\n    t\n  } = useTranslation(); // monitor call to help UI loading state\n\n  const addTransaction = useTransactionAdder();\n  const [hash, setHash] = useState();\n  const [attempting, setAttempting] = useState(false);\n\n  function wrappedOnDismiss() {\n    setHash(undefined);\n    setAttempting(false);\n    onDismiss();\n  }\n\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress);\n\n  async function onClaimReward() {\n    if (stakingContract && (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n      setAttempting(true);\n      await stakingContract.getReward({\n        gasLimit: 350000\n      }).then(response => {\n        addTransaction(response, {\n          summary: t('earn.claimAccumulated')\n        });\n        setHash(response.hash);\n      }).catch(error => {\n        setAttempting(false);\n        console.log(error);\n      });\n    }\n  }\n\n  let error;\n\n  if (!account) {\n    error = t('earn.connectWallet');\n  }\n\n  if (!(stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount)) {\n    var _error;\n\n    error = (_error = error) !== null && _error !== void 0 ? _error : t('earn.enterAmount');\n  }\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpen,\n    onDismiss: wrappedOnDismiss,\n    maxHeight: 90,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 3\n    }\n  }, !attempting && !hash && /*#__PURE__*/React.createElement(ContentWrapper, {\n    gap: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.mediumHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, t('earn.claim')), /*#__PURE__*/React.createElement(CloseIcon, {\n    onClick: wrappedOnDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  })), (stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.earnedAmount) && /*#__PURE__*/React.createElement(AutoColumn, {\n    justify: \"center\",\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    fontWeight: 600,\n    fontSize: 36,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 8\n    }\n  }, stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$earnedAm = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm === void 0 ? void 0 : _stakingInfo$earnedAm.toSignificant(6)), /*#__PURE__*/React.createElement(TYPE.body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 8\n    }\n  }, t('earn.unclaimedPng'))), /*#__PURE__*/React.createElement(TYPE.subHeader, {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 6\n    }\n  }, t('earn.liquidityRemainsPool')), /*#__PURE__*/React.createElement(ButtonError, {\n    disabled: !!error,\n    error: !!error && !!(stakingInfo === null || stakingInfo === void 0 ? void 0 : stakingInfo.stakedAmount),\n    onClick: onClaimReward,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 6\n    }\n  }, (_error2 = error) !== null && _error2 !== void 0 ? _error2 : t('earn.unclaimedPng'))), attempting && !hash && /*#__PURE__*/React.createElement(LoadingView, {\n    onDismiss: wrappedOnDismiss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"12px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, t('earn.claimingPng', {\n    \"amount\": stakingInfo === null || stakingInfo === void 0 ? void 0 : (_stakingInfo$earnedAm2 = stakingInfo.earnedAmount) === null || _stakingInfo$earnedAm2 === void 0 ? void 0 : _stakingInfo$earnedAm2.toSignificant(6)\n  })))), hash && /*#__PURE__*/React.createElement(SubmittedView, {\n    onDismiss: wrappedOnDismiss,\n    hash: hash,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"12px\",\n    justify: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.largeHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, t('earn.transactionSubmitted')), /*#__PURE__*/React.createElement(TYPE.body, {\n    fontSize: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, t('earn.claimedPng')))));\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/components/earn/ClaimRewardModal.tsx"],"names":["React","useState","Modal","AutoColumn","styled","RowBetween","TYPE","CloseIcon","ButtonError","useStakingContract","SubmittedView","LoadingView","useTransactionAdder","useActiveWeb3React","useTranslation","ContentWrapper","ClaimRewardModal","isOpen","onDismiss","stakingInfo","account","t","addTransaction","hash","setHash","attempting","setAttempting","wrappedOnDismiss","undefined","stakingContract","stakingRewardAddress","onClaimReward","stakedAmount","getReward","gasLimit","then","response","summary","catch","error","console","log","earnedAmount","toSignificant","textAlign"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Modal from '../Modal'\nimport { AutoColumn } from '../Column'\nimport styled from 'styled-components'\nimport { RowBetween } from '../Row'\nimport { TYPE, CloseIcon } from '../../theme'\nimport { ButtonError } from '../Button'\nimport { StakingInfo } from '../../state/stake/hooks'\nimport { useStakingContract } from '../../hooks/useContract'\nimport { SubmittedView, LoadingView } from '../ModalViews'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { useActiveWeb3React } from '../../hooks'\nimport { useTranslation } from 'react-i18next'\n\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n  padding: 1rem;\n`\n\ninterface StakingModalProps {\n  isOpen: boolean\n  onDismiss: () => void\n  stakingInfo: StakingInfo\n}\n\nexport default function ClaimRewardModal({ isOpen, onDismiss, stakingInfo }: StakingModalProps) {\n  const { account } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  // monitor call to help UI loading state\n  const addTransaction = useTransactionAdder()\n  const [hash, setHash] = useState<string | undefined>()\n  const [attempting, setAttempting] = useState(false)\n\n  function wrappedOnDismiss() {\n    setHash(undefined)\n    setAttempting(false)\n    onDismiss()\n  }\n\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress)\n\n  async function onClaimReward() {\n    if (stakingContract && stakingInfo?.stakedAmount) {\n      setAttempting(true)\n      await stakingContract\n        .getReward({ gasLimit: 350000 })\n        .then((response: TransactionResponse) => {\n          addTransaction(response, {\n            summary: t('earn.claimAccumulated')\n          })\n          setHash(response.hash)\n        })\n        .catch((error: any) => {\n          setAttempting(false)\n          console.log(error)\n        })\n    }\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = t('earn.connectWallet')\n  }\n  if (!stakingInfo?.stakedAmount) {\n    error = error ?? t('earn.enterAmount')\n  }\n\n\treturn (\n\t\t<Modal isOpen={isOpen} onDismiss={wrappedOnDismiss} maxHeight={90}>\n\t\t\t{!attempting && !hash && (\n\t\t\t\t<ContentWrapper gap=\"lg\">\n\t\t\t\t\t<RowBetween>\n\t\t\t\t\t\t<TYPE.mediumHeader>{t('earn.claim')}</TYPE.mediumHeader>\n\t\t\t\t\t\t<CloseIcon onClick={wrappedOnDismiss} />\n\t\t\t\t\t</RowBetween>\n\t\t\t\t\t{stakingInfo?.earnedAmount && (\n\t\t\t\t\t\t<AutoColumn justify=\"center\" gap=\"md\">\n\t\t\t\t\t\t\t<TYPE.body fontWeight={600} fontSize={36}>\n\t\t\t\t\t\t\t\t{stakingInfo?.earnedAmount?.toSignificant(6)}\n\t\t\t\t\t\t\t</TYPE.body>\n\t\t\t\t\t\t\t<TYPE.body>{t('earn.unclaimedPng')}</TYPE.body>\n\t\t\t\t\t\t</AutoColumn>\n\t\t\t\t\t)}\n\t\t\t\t\t<TYPE.subHeader style={{ textAlign: 'center' }}>\n\t\t\t\t\t\t{t('earn.liquidityRemainsPool')}\n\t\t\t\t\t</TYPE.subHeader>\n\t\t\t\t\t<ButtonError disabled={!!error} error={!!error && !!stakingInfo?.stakedAmount} onClick={onClaimReward}>\n\t\t\t\t\t\t{error ?? t('earn.unclaimedPng')}\n\t\t\t\t\t</ButtonError>\n\t\t\t\t</ContentWrapper>\n\t\t\t)}\n\t\t\t{attempting && !hash && (\n\t\t\t\t<LoadingView onDismiss={wrappedOnDismiss}>\n\t\t\t\t\t<AutoColumn gap=\"12px\" justify={'center'}>\n\t\t\t\t\t\t<TYPE.body fontSize={20}>{t('earn.claimingPng', {\"amount\": stakingInfo?.earnedAmount?.toSignificant(6)})}</TYPE.body>\n\t\t\t\t\t</AutoColumn>\n\t\t\t\t</LoadingView>\n\t\t\t)}\n\t\t\t{hash && (\n\t\t\t\t<SubmittedView onDismiss={wrappedOnDismiss} hash={hash}>\n\t\t\t\t\t<AutoColumn gap=\"12px\" justify={'center'}>\n\t\t\t\t\t\t<TYPE.largeHeader>{t('earn.transactionSubmitted')}</TYPE.largeHeader>\n\t\t\t\t\t\t<TYPE.body fontSize={20}>{t('earn.claimedPng')}</TYPE.body>\n\t\t\t\t\t</AutoColumn>\n\t\t\t\t</SubmittedView>\n\t\t\t)}\n\t\t</Modal>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}