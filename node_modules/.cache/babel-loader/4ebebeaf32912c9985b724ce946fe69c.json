{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from 'react';\n/**\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\n * @param value value that is rapidly changing\n * @param onChange change handler that should receive the debounced updates to the value\n * @param debouncedMs how long we should wait for changes to be applied\n */\n\nexport default function useDebouncedChangeHandler(value, onChange, debouncedMs = 100) {\n  const [inner, setInner] = useState(() => value);\n  const timer = useRef();\n  const onChangeInner = useCallback(newValue => {\n    setInner(newValue);\n\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n\n    timer.current = setTimeout(() => {\n      onChange(newValue);\n      timer.current = undefined;\n    }, debouncedMs);\n  }, [debouncedMs, onChange]);\n  useEffect(() => {\n    if (timer.current) {\n      clearTimeout(timer.current);\n      timer.current = undefined;\n    }\n\n    setInner(value);\n  }, [value]);\n  return [inner, onChangeInner];\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/utils/useDebouncedChangeHandler.tsx"],"names":["useCallback","useEffect","useRef","useState","useDebouncedChangeHandler","value","onChange","debouncedMs","inner","setInner","timer","onChangeInner","newValue","current","clearTimeout","setTimeout","undefined"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,QAAzC,QAAyD,OAAzD;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,yBAAT,CACbC,KADa,EAEbC,QAFa,EAGbC,WAAW,GAAG,GAHD,EAIY;AACzB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAI,MAAME,KAAV,CAAlC;AACA,QAAMK,KAAK,GAAGR,MAAM,EAApB;AAEA,QAAMS,aAAa,GAAGX,WAAW,CAC9BY,QAAD,IAAiB;AACfH,IAAAA,QAAQ,CAACG,QAAD,CAAR;;AACA,QAAIF,KAAK,CAACG,OAAV,EAAmB;AACjBC,MAAAA,YAAY,CAACJ,KAAK,CAACG,OAAP,CAAZ;AACD;;AACDH,IAAAA,KAAK,CAACG,OAAN,GAAgBE,UAAU,CAAC,MAAM;AAC/BT,MAAAA,QAAQ,CAACM,QAAD,CAAR;AACAF,MAAAA,KAAK,CAACG,OAAN,GAAgBG,SAAhB;AACD,KAHyB,EAGvBT,WAHuB,CAA1B;AAID,GAV8B,EAW/B,CAACA,WAAD,EAAcD,QAAd,CAX+B,CAAjC;AAcAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,KAAK,CAACG,OAAV,EAAmB;AACjBC,MAAAA,YAAY,CAACJ,KAAK,CAACG,OAAP,CAAZ;AACAH,MAAAA,KAAK,CAACG,OAAN,GAAgBG,SAAhB;AACD;;AACDP,IAAAA,QAAQ,CAACJ,KAAD,CAAR;AACD,GANQ,EAMN,CAACA,KAAD,CANM,CAAT;AAQA,SAAO,CAACG,KAAD,EAAQG,aAAR,CAAP;AACD","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react'\n\n/**\n * Easy way to debounce the handling of a rapidly changing value, e.g. a changing slider input\n * @param value value that is rapidly changing\n * @param onChange change handler that should receive the debounced updates to the value\n * @param debouncedMs how long we should wait for changes to be applied\n */\nexport default function useDebouncedChangeHandler<T>(\n  value: T,\n  onChange: (newValue: T) => void,\n  debouncedMs = 100\n): [T, (value: T) => void] {\n  const [inner, setInner] = useState<T>(() => value)\n  const timer = useRef<ReturnType<typeof setTimeout>>()\n\n  const onChangeInner = useCallback(\n    (newValue: T) => {\n      setInner(newValue)\n      if (timer.current) {\n        clearTimeout(timer.current)\n      }\n      timer.current = setTimeout(() => {\n        onChange(newValue)\n        timer.current = undefined\n      }, debouncedMs)\n    },\n    [debouncedMs, onChange]\n  )\n\n  useEffect(() => {\n    if (timer.current) {\n      clearTimeout(timer.current)\n      timer.current = undefined\n    }\n    setInner(value)\n  }, [value])\n\n  return [inner, onChangeInner]\n}\n"]},"metadata":{},"sourceType":"module"}