{"ast":null,"code":"import { useEffect, useRef } from 'react';\nexport function useOnClickOutside(node, handler) {\n  const handlerRef = useRef(handler);\n  useEffect(() => {\n    handlerRef.current = handler;\n  }, [handler]);\n  useEffect(() => {\n    const handleClickOutside = e => {\n      var _node$current$contain, _node$current;\n\n      if ((_node$current$contain = (_node$current = node.current) === null || _node$current === void 0 ? void 0 : _node$current.contains(e.target)) !== null && _node$current$contain !== void 0 ? _node$current$contain : false) {\n        return;\n      }\n\n      if (handlerRef.current) handlerRef.current();\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [node]);\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/hooks/useOnClickOutside.tsx"],"names":["useEffect","useRef","useOnClickOutside","node","handler","handlerRef","current","handleClickOutside","e","contains","target","document","addEventListener","removeEventListener"],"mappings":"AAAA,SAAoBA,SAApB,EAA+BC,MAA/B,QAA6C,OAA7C;AAEA,OAAO,SAASC,iBAAT,CACLC,IADK,EAELC,OAFK,EAGL;AACA,QAAMC,UAAU,GAAGJ,MAAM,CAA2BG,OAA3B,CAAzB;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,UAAU,CAACC,OAAX,GAAqBF,OAArB;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,kBAAkB,GAAIC,CAAD,IAAmB;AAAA;;AAC5C,oDAAIL,IAAI,CAACG,OAAT,kDAAI,cAAcG,QAAd,CAAuBD,CAAC,CAACE,MAAzB,CAAJ,yEAAgD,KAAhD,EAAuD;AACrD;AACD;;AACD,UAAIL,UAAU,CAACC,OAAf,EAAwBD,UAAU,CAACC,OAAX;AACzB,KALD;;AAOAK,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCL,kBAAvC;AAEA,WAAO,MAAM;AACXI,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CN,kBAA1C;AACD,KAFD;AAGD,GAbQ,EAaN,CAACJ,IAAD,CAbM,CAAT;AAcD","sourcesContent":["import { RefObject, useEffect, useRef } from 'react'\n\nexport function useOnClickOutside<T extends HTMLElement>(\n  node: RefObject<T | undefined>,\n  handler: undefined | (() => void)\n) {\n  const handlerRef = useRef<undefined | (() => void)>(handler)\n  useEffect(() => {\n    handlerRef.current = handler\n  }, [handler])\n\n  useEffect(() => {\n    const handleClickOutside = (e: MouseEvent) => {\n      if (node.current?.contains(e.target as Node) ?? false) {\n        return\n      }\n      if (handlerRef.current) handlerRef.current()\n    }\n\n    document.addEventListener('mousedown', handleClickOutside)\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n    }\n  }, [node])\n}\n"]},"metadata":{},"sourceType":"module"}