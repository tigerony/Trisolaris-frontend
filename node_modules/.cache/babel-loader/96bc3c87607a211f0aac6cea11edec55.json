{"ast":null,"code":"var _jsxFileName = \"/Users/sidshekhar/Documents/interface/src/components/Settings/index.tsx\";\nimport React, { useContext, useRef, useState } from 'react';\nimport { Settings, X } from 'react-feather';\nimport { Text } from 'rebass';\nimport styled, { ThemeContext } from 'styled-components';\nimport { useOnClickOutside } from '../../hooks/useOnClickOutside';\nimport { ApplicationModal } from '../../state/application/actions';\nimport { useModalOpen, useToggleSettingsMenu } from '../../state/application/hooks';\nimport { useDarkModeManager, useExpertModeManager, useUserTransactionTTL, useUserSlippageTolerance } from '../../state/user/hooks';\nimport { TYPE } from '../../theme';\nimport { ButtonError } from '../Button';\nimport { AutoColumn } from '../Column';\nimport Modal from '../Modal';\nimport QuestionHelper from '../QuestionHelper';\nimport { RowBetween, RowFixed } from '../Row';\nimport Toggle from '../Toggle';\nimport TransactionSettings from '../TransactionSettings';\nimport { useTranslation } from 'react-i18next';\nimport { StyledMenu, StyledMenuButton, MenuFlyout } from \"../StyledMenu\";\nconst StyledMenuIcon = styled(Settings)`\n  height: 20px;\n  width: 20px;\n\n  > * {\n    stroke: ${({\n  theme\n}) => theme.text1};\n  }\n`;\nconst StyledCloseIcon = styled(X)`\n  height: 20px;\n  width: 20px;\n\n  :hover {\n    cursor: pointer;\n  }\n\n  > * {\n    stroke: ${({\n  theme\n}) => theme.text1};\n  }\n`;\nconst EmojiWrapper = styled.div`\n  position: absolute;\n  bottom: -6px;\n  right: 0px;\n  font-size: 14px;\n`;\nconst Break = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: ${({\n  theme\n}) => theme.bg3};\n`;\nconst ModalContentWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem 0;\n  background-color: ${({\n  theme\n}) => theme.bg2};\n  border-radius: 20px;\n`;\nconst SettingsMenuFlyout = styled(MenuFlyout)`\n\n  ${({\n  theme\n}) => theme.mediaWidth.upToExtraSmall`\n    min-width: 18.125rem;\n    right: -46px;\n  `};\n\n  ${({\n  theme\n}) => theme.mediaWidth.upToMedium`\n    min-width: 18.125rem;\n    top: -22rem;\n  `};\n`;\nexport default function SettingsTab() {\n  const node = useRef();\n  const open = useModalOpen(ApplicationModal.SETTINGS);\n  const toggle = useToggleSettingsMenu();\n  const theme = useContext(ThemeContext);\n  const [userSlippageTolerance, setUserslippageTolerance] = useUserSlippageTolerance();\n  const [ttl, setTtl] = useUserTransactionTTL();\n  const [expertMode, toggleExpertMode] = useExpertModeManager();\n  const [darkMode, toggleDarkMode] = useDarkModeManager(); // show confirmation view before turning on\n\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  useOnClickOutside(node, open ? toggle : undefined);\n  const {\n    t\n  } = useTranslation();\n  return (\n    /*#__PURE__*/\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/30451\n    React.createElement(StyledMenu, {\n      ref: node,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      isOpen: showConfirmation,\n      onDismiss: () => setShowConfirmation(false),\n      maxHeight: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ModalContentWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AutoColumn, {\n      gap: \"lg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(RowBetween, {\n      style: {\n        padding: '0 2rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Text, {\n      fontWeight: 500,\n      fontSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }, t('settings.areYouSure')), /*#__PURE__*/React.createElement(StyledCloseIcon, {\n      onClick: () => setShowConfirmation(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Break, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(AutoColumn, {\n      gap: \"lg\",\n      style: {\n        padding: '0 2rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      fontWeight: 500,\n      fontSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, t('settings.expertInfo')), /*#__PURE__*/React.createElement(Text, {\n      fontWeight: 600,\n      fontSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }\n    }, t('settings.expertWarningCAPS')), /*#__PURE__*/React.createElement(ButtonError, {\n      error: true,\n      padding: '12px',\n      onClick: () => {\n        if (window.prompt(t('settings.confirmExpertMode')) === t('settings.confirm')) {\n          toggleExpertMode();\n          setShowConfirmation(false);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      fontSize: 20,\n      fontWeight: 500,\n      id: \"confirm-expert-mode\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }, t('settings.turnOnExpertMode'))))))), /*#__PURE__*/React.createElement(StyledMenuButton, {\n      onClick: toggle,\n      id: \"open-settings-dialog-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(StyledMenuIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }), expertMode ? /*#__PURE__*/React.createElement(EmojiWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"wizard-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }, \"\\uD83E\\uDDD9\")) : null), open && /*#__PURE__*/React.createElement(SettingsMenuFlyout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AutoColumn, {\n      gap: \"md\",\n      style: {\n        padding: '1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      fontWeight: 600,\n      fontSize: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }\n    }, t('settings.transactionSettings')), /*#__PURE__*/React.createElement(TransactionSettings, {\n      rawSlippage: userSlippageTolerance,\n      setRawSlippage: setUserslippageTolerance,\n      deadline: ttl,\n      setDeadline: setTtl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Text, {\n      fontWeight: 600,\n      fontSize: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, t('settings.interfaceSettings')), /*#__PURE__*/React.createElement(RowBetween, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(RowFixed, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TYPE.black, {\n      fontWeight: 400,\n      fontSize: 14,\n      color: theme.text2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }\n    }, t('settings.toggleExpertMode')), /*#__PURE__*/React.createElement(QuestionHelper, {\n      text: t('settings.expertModeHelper'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(Toggle, {\n      id: \"toggle-expert-mode-button\",\n      isActive: expertMode,\n      toggle: expertMode ? () => {\n        toggleExpertMode();\n        setShowConfirmation(false);\n      } : () => {\n        toggle();\n        setShowConfirmation(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(RowBetween, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(RowFixed, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(TYPE.black, {\n      fontWeight: 400,\n      fontSize: 14,\n      color: theme.text2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }, t('settings.toggleDarkMode'))), /*#__PURE__*/React.createElement(Toggle, {\n      isActive: darkMode,\n      toggle: toggleDarkMode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 15\n      }\n    })))))\n  );\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/components/Settings/index.tsx"],"names":["React","useContext","useRef","useState","Settings","X","Text","styled","ThemeContext","useOnClickOutside","ApplicationModal","useModalOpen","useToggleSettingsMenu","useDarkModeManager","useExpertModeManager","useUserTransactionTTL","useUserSlippageTolerance","TYPE","ButtonError","AutoColumn","Modal","QuestionHelper","RowBetween","RowFixed","Toggle","TransactionSettings","useTranslation","StyledMenu","StyledMenuButton","MenuFlyout","StyledMenuIcon","theme","text1","StyledCloseIcon","EmojiWrapper","div","Break","bg3","ModalContentWrapper","bg2","SettingsMenuFlyout","mediaWidth","upToExtraSmall","upToMedium","SettingsTab","node","open","SETTINGS","toggle","userSlippageTolerance","setUserslippageTolerance","ttl","setTtl","expertMode","toggleExpertMode","darkMode","toggleDarkMode","showConfirmation","setShowConfirmation","undefined","t","padding","window","prompt","text2"],"mappings":"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","sourcesContent":["import React, {useContext, useRef, useState} from 'react'\nimport {Settings, X} from 'react-feather'\nimport {Text} from 'rebass'\nimport styled, {ThemeContext} from 'styled-components'\nimport {useOnClickOutside} from '../../hooks/useOnClickOutside'\nimport {ApplicationModal} from '../../state/application/actions'\nimport {useModalOpen, useToggleSettingsMenu} from '../../state/application/hooks'\nimport {\n  useDarkModeManager,\n  useExpertModeManager,\n  useUserTransactionTTL,\n  useUserSlippageTolerance\n} from '../../state/user/hooks'\nimport {TYPE} from '../../theme'\nimport {ButtonError} from '../Button'\nimport {AutoColumn} from '../Column'\nimport Modal from '../Modal'\nimport QuestionHelper from '../QuestionHelper'\nimport {RowBetween, RowFixed} from '../Row'\nimport Toggle from '../Toggle'\nimport TransactionSettings from '../TransactionSettings'\nimport {useTranslation} from 'react-i18next'\nimport {StyledMenu, StyledMenuButton, MenuFlyout} from \"../StyledMenu\";\n\nconst StyledMenuIcon = styled(Settings)`\n  height: 20px;\n  width: 20px;\n\n  > * {\n    stroke: ${({theme}) => theme.text1};\n  }\n`\n\nconst StyledCloseIcon = styled(X)`\n  height: 20px;\n  width: 20px;\n\n  :hover {\n    cursor: pointer;\n  }\n\n  > * {\n    stroke: ${({theme}) => theme.text1};\n  }\n`\n\nconst EmojiWrapper = styled.div`\n  position: absolute;\n  bottom: -6px;\n  right: 0px;\n  font-size: 14px;\n`\n\nconst Break = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: ${({theme}) => theme.bg3};\n`\n\nconst ModalContentWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 2rem 0;\n  background-color: ${({theme}) => theme.bg2};\n  border-radius: 20px;\n`\n\nconst SettingsMenuFlyout = styled(MenuFlyout)`\n\n  ${({ theme }) => theme.mediaWidth.upToExtraSmall`\n    min-width: 18.125rem;\n    right: -46px;\n  `};\n\n  ${({ theme }) => theme.mediaWidth.upToMedium`\n    min-width: 18.125rem;\n    top: -22rem;\n  `};\n`\n\nexport default function SettingsTab() {\n  const node = useRef<HTMLDivElement>()\n  const open = useModalOpen(ApplicationModal.SETTINGS)\n  const toggle = useToggleSettingsMenu()\n\n  const theme = useContext(ThemeContext)\n  const [userSlippageTolerance, setUserslippageTolerance] = useUserSlippageTolerance()\n\n  const [ttl, setTtl] = useUserTransactionTTL()\n\n  const [expertMode, toggleExpertMode] = useExpertModeManager()\n\n  const [darkMode, toggleDarkMode] = useDarkModeManager()\n\n  // show confirmation view before turning on\n  const [showConfirmation, setShowConfirmation] = useState(false)\n\n  useOnClickOutside(node, open ? toggle : undefined)\n\n  const {t} = useTranslation()\n  return (\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/30451\n    <StyledMenu ref={node as any}>\n      <Modal isOpen={showConfirmation} onDismiss={() => setShowConfirmation(false)} maxHeight={100}>\n        <ModalContentWrapper>\n          <AutoColumn gap=\"lg\">\n            <RowBetween style={{padding: '0 2rem'}}>\n              <div/>\n              <Text fontWeight={500} fontSize={20}>\n                {t('settings.areYouSure')}\n              </Text>\n              <StyledCloseIcon onClick={() => setShowConfirmation(false)}/>\n            </RowBetween>\n            <Break/>\n            <AutoColumn gap=\"lg\" style={{padding: '0 2rem'}}>\n              <Text fontWeight={500} fontSize={20}>\n                {t('settings.expertInfo')}\n              </Text>\n              <Text fontWeight={600} fontSize={20}>\n                {t('settings.expertWarningCAPS')}\n              </Text>\n              <ButtonError\n                error={true}\n                padding={'12px'}\n                onClick={() => {\n                  if (window.prompt(t('settings.confirmExpertMode')) === t('settings.confirm')) {\n                    toggleExpertMode()\n                    setShowConfirmation(false)\n                  }\n                }}\n              >\n                <Text fontSize={20} fontWeight={500} id=\"confirm-expert-mode\">\n                  {t('settings.turnOnExpertMode')}\n                </Text>\n              </ButtonError>\n            </AutoColumn>\n          </AutoColumn>\n        </ModalContentWrapper>\n      </Modal>\n      <StyledMenuButton onClick={toggle} id=\"open-settings-dialog-button\">\n        <StyledMenuIcon/>\n        {expertMode ? (\n          <EmojiWrapper>\n            <span role=\"img\" aria-label=\"wizard-icon\">\n              🧙\n            </span>\n          </EmojiWrapper>\n        ) : null}\n      </StyledMenuButton>\n      {open && (\n        <SettingsMenuFlyout>\n          <AutoColumn gap=\"md\" style={{padding: '1rem'}}>\n            <Text fontWeight={600} fontSize={14}>\n              {t('settings.transactionSettings')}\n            </Text>\n            <TransactionSettings\n              rawSlippage={userSlippageTolerance}\n              setRawSlippage={setUserslippageTolerance}\n              deadline={ttl}\n              setDeadline={setTtl}\n            />\n            <Text fontWeight={600} fontSize={14}>\n              {t('settings.interfaceSettings')}\n            </Text>\n            <RowBetween>\n              <RowFixed>\n                <TYPE.black fontWeight={400} fontSize={14} color={theme.text2}>\n                  {t('settings.toggleExpertMode')}\n                </TYPE.black>\n                <QuestionHelper text={t('settings.expertModeHelper')}/>\n              </RowFixed>\n              <Toggle\n                id=\"toggle-expert-mode-button\"\n                isActive={expertMode}\n                toggle={\n                  expertMode\n                    ? () => {\n                      toggleExpertMode()\n                      setShowConfirmation(false)\n                    }\n                    : () => {\n                      toggle()\n                      setShowConfirmation(true)\n                    }\n                }\n              />\n            </RowBetween>\n            <RowBetween>\n              <RowFixed>\n                <TYPE.black fontWeight={400} fontSize={14} color={theme.text2}>\n                  {t('settings.toggleDarkMode')}\n                </TYPE.black>\n              </RowFixed>\n              <Toggle isActive={darkMode} toggle={toggleDarkMode}/>\n            </RowBetween>\n          </AutoColumn>\n        </SettingsMenuFlyout>\n      )}\n    </StyledMenu>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}