{"ast":null,"code":"var _jsxFileName = \"/Users/sidshekhar/Documents/interface/src/components/Header/Polling.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { TYPE, ExternalLink } from '../../theme';\nimport { useBlockNumber } from '../../state/application/hooks';\nimport { getEtherscanLink } from '../../utils';\nimport { useActiveWeb3React } from '../../hooks';\nconst StyledPolling = styled.div`\n  position: fixed;\n  display: flex;\n  right: 0;\n  bottom: 0;\n  padding: 1rem;\n  color: white;\n  transition: opacity 0.25s ease;\n  color: ${({\n  theme\n}) => theme.green1};\n  :hover {\n    opacity: 1;\n  }\n\n  ${({\n  theme\n}) => theme.mediaWidth.upToMedium`\n    display: none;\n  `}\n`;\nconst StyledPollingDot = styled.div`\n  width: 8px;\n  height: 8px;\n  min-height: 8px;\n  min-width: 8px;\n  margin-left: 0.5rem;\n  margin-top: 3px;\n  border-radius: 50%;\n  position: relative;\n  background-color: ${({\n  theme\n}) => theme.green1};\n`;\nconst rotate360 = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\nconst Spinner = styled.div`\n  animation: ${rotate360} 1s cubic-bezier(0.83, 0, 0.17, 1) infinite;\n  transform: translateZ(0);\n\n  border-top: 1px solid transparent;\n  border-right: 1px solid transparent;\n  border-bottom: 1px solid transparent;\n  border-left: 2px solid ${({\n  theme\n}) => theme.green1};\n  background: transparent;\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  position: relative;\n\n  left: -3px;\n  top: -3px;\n`;\nexport default function Polling() {\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const blockNumber = useBlockNumber();\n  const [isMounted, setIsMounted] = useState(true);\n  useEffect(() => {\n    const timer1 = setTimeout(() => setIsMounted(true), 1000); // this will clear Timeout when component unmount like in willComponentUnmount\n\n    return () => {\n      setIsMounted(false);\n      clearTimeout(timer1);\n    };\n  }, [blockNumber] //useEffect will run only one time\n  //if you pass a value to array, like this [data] than clearTimeout will run every time this value changes (useEffect re-run)\n  );\n  return /*#__PURE__*/React.createElement(ExternalLink, {\n    href: chainId && blockNumber ? getEtherscanLink(chainId, blockNumber.toString(), 'block') : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(StyledPolling, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.small, {\n    style: {\n      opacity: isMounted ? '0.2' : '0.6'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, blockNumber), /*#__PURE__*/React.createElement(StyledPollingDot, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, !isMounted && /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 42\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/components/Header/Polling.tsx"],"names":["React","useState","useEffect","styled","keyframes","TYPE","ExternalLink","useBlockNumber","getEtherscanLink","useActiveWeb3React","StyledPolling","div","theme","green1","mediaWidth","upToMedium","StyledPollingDot","rotate360","Spinner","Polling","chainId","blockNumber","isMounted","setIsMounted","timer1","setTimeout","clearTimeout","toString","opacity"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,IAAiBC,SAAjB,QAAkC,mBAAlC;AACA,SAASC,IAAT,EAAeC,YAAf,QAAmC,aAAnC;AAEA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,kBAAT,QAAmC,aAAnC;AAEA,MAAMC,aAAa,GAAGP,MAAM,CAACQ,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,MAAO;AACvC;AACA;AACA;AACA;AACA,IAAI,CAAC;AAAED,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACE,UAAN,CAAiBC,UAAW;AAC/C;AACA,GAAI;AACJ,CAhBA;AAiBA,MAAMC,gBAAgB,GAAGb,MAAM,CAACQ,GAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,MAAO;AAClD,CAVA;AAYA,MAAMI,SAAS,GAAGb,SAAU;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,MAAMc,OAAO,GAAGf,MAAM,CAACQ,GAAI;AAC3B,eAAeM,SAAU;AACzB;AACA;AACA;AACA;AACA;AACA,2BAA2B,CAAC;AAAEL,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,MAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBA;AAkBA,eAAe,SAASM,OAAT,GAAmB;AAChC,QAAM;AAAEC,IAAAA;AAAF,MAAcX,kBAAkB,EAAtC;AAEA,QAAMY,WAAW,GAAGd,cAAc,EAAlC;AAEA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,IAAD,CAA1C;AAEAC,EAAAA,SAAS,CACP,MAAM;AACJ,UAAMsB,MAAM,GAAGC,UAAU,CAAC,MAAMF,YAAY,CAAC,IAAD,CAAnB,EAA2B,IAA3B,CAAzB,CADI,CAGJ;;AACA,WAAO,MAAM;AACXA,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAG,MAAAA,YAAY,CAACF,MAAD,CAAZ;AACD,KAHD;AAID,GATM,EAUP,CAACH,WAAD,CAVO,CAUO;AACd;AAXO,GAAT;AAcA,sBACE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAED,OAAO,IAAIC,WAAX,GAAyBb,gBAAgB,CAACY,OAAD,EAAUC,WAAW,CAACM,QAAZ,EAAV,EAAkC,OAAlC,CAAzC,GAAsF,EAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAEN,SAAS,GAAG,KAAH,GAAW;AAA/B,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4DD,WAA5D,CADF,eAEE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmB,CAACC,SAAD,iBAAc,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjC,CAFF,CADF,CADF;AAQD","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { TYPE, ExternalLink } from '../../theme'\n\nimport { useBlockNumber } from '../../state/application/hooks'\nimport { getEtherscanLink } from '../../utils'\nimport { useActiveWeb3React } from '../../hooks'\n\nconst StyledPolling = styled.div`\n  position: fixed;\n  display: flex;\n  right: 0;\n  bottom: 0;\n  padding: 1rem;\n  color: white;\n  transition: opacity 0.25s ease;\n  color: ${({ theme }) => theme.green1};\n  :hover {\n    opacity: 1;\n  }\n\n  ${({ theme }) => theme.mediaWidth.upToMedium`\n    display: none;\n  `}\n`\nconst StyledPollingDot = styled.div`\n  width: 8px;\n  height: 8px;\n  min-height: 8px;\n  min-width: 8px;\n  margin-left: 0.5rem;\n  margin-top: 3px;\n  border-radius: 50%;\n  position: relative;\n  background-color: ${({ theme }) => theme.green1};\n`\n\nconst rotate360 = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst Spinner = styled.div`\n  animation: ${rotate360} 1s cubic-bezier(0.83, 0, 0.17, 1) infinite;\n  transform: translateZ(0);\n\n  border-top: 1px solid transparent;\n  border-right: 1px solid transparent;\n  border-bottom: 1px solid transparent;\n  border-left: 2px solid ${({ theme }) => theme.green1};\n  background: transparent;\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  position: relative;\n\n  left: -3px;\n  top: -3px;\n`\n\nexport default function Polling() {\n  const { chainId } = useActiveWeb3React()\n\n  const blockNumber = useBlockNumber()\n\n  const [isMounted, setIsMounted] = useState(true)\n\n  useEffect(\n    () => {\n      const timer1 = setTimeout(() => setIsMounted(true), 1000)\n\n      // this will clear Timeout when component unmount like in willComponentUnmount\n      return () => {\n        setIsMounted(false)\n        clearTimeout(timer1)\n      }\n    },\n    [blockNumber] //useEffect will run only one time\n    //if you pass a value to array, like this [data] than clearTimeout will run every time this value changes (useEffect re-run)\n  )\n\n  return (\n    <ExternalLink href={chainId && blockNumber ? getEtherscanLink(chainId, blockNumber.toString(), 'block') : ''}>\n      <StyledPolling>\n        <TYPE.small style={{ opacity: isMounted ? '0.2' : '0.6' }}>{blockNumber}</TYPE.small>\n        <StyledPollingDot>{!isMounted && <Spinner />}</StyledPollingDot>\n      </StyledPolling>\n    </ExternalLink>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}