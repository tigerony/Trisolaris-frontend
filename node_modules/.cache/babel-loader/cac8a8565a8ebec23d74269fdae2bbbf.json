{"ast":null,"code":"var _jsxFileName = \"/Users/sidshekhar/Documents/interface/src/components/WalletModal/PendingView.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport Option from './Option';\nimport { SUPPORTED_WALLETS } from '../../constants';\nimport { injected } from '../../connectors';\nimport { darken } from 'polished';\nimport Loader from '../Loader';\nimport { useTranslation } from 'react-i18next';\nconst PendingSection = styled.div`\n  ${({\n  theme\n}) => theme.flexColumnNoWrap};\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  & > * {\n    width: 100%;\n  }\n`;\nconst StyledLoader = styled(Loader)`\n  margin-right: 1rem;\n`;\nconst LoadingMessage = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap};\n  align-items: center;\n  justify-content: flex-start;\n  border-radius: 12px;\n  margin-bottom: 20px;\n  color: ${({\n  theme,\n  error\n}) => error ? theme.red1 : 'inherit'};\n  border: 1px solid ${({\n  theme,\n  error\n}) => error ? theme.red1 : theme.text4};\n\n  & > * {\n    padding: 1rem;\n  }\n`;\nconst ErrorGroup = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap};\n  align-items: center;\n  justify-content: flex-start;\n`;\nconst ErrorButton = styled.div`\n  border-radius: 8px;\n  font-size: 12px;\n  color: ${({\n  theme\n}) => theme.text1};\n  background-color: ${({\n  theme\n}) => theme.bg4};\n  margin-left: 1rem;\n  padding: 0.5rem;\n  font-weight: 600;\n  user-select: none;\n\n  &:hover {\n    cursor: pointer;\n    background-color: ${({\n  theme\n}) => darken(0.1, theme.text4)};\n  }\n`;\nconst LoadingWrapper = styled.div`\n  ${({\n  theme\n}) => theme.flexRowNoWrap};\n  align-items: center;\n  justify-content: center;\n`;\nexport default function PendingView({\n  connector,\n  error = false,\n  setPendingError,\n  tryActivation\n}) {\n  var _window, _window$ethereum;\n\n  const isMetamask = (_window = window) === null || _window === void 0 ? void 0 : (_window$ethereum = _window.ethereum) === null || _window$ethereum === void 0 ? void 0 : _window$ethereum.isMetaMask;\n  const {\n    t\n  } = useTranslation();\n  return /*#__PURE__*/React.createElement(PendingSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LoadingMessage, {\n    error: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(LoadingWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, error ? /*#__PURE__*/React.createElement(ErrorGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }\n  }, t('walletModal.errorConnecting'), \".\"), /*#__PURE__*/React.createElement(ErrorButton, {\n    onClick: () => {\n      setPendingError(false);\n      connector && tryActivation(connector);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, t('walletModal.tryAgain'))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledLoader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }), t('walletModal.initializing')))), Object.keys(SUPPORTED_WALLETS).map(key => {\n    const option = SUPPORTED_WALLETS[key];\n\n    if (option.connector === connector) {\n      if (option.connector === injected) {\n        if (isMetamask && option.name !== 'MetaMask') {\n          return null;\n        }\n\n        if (!isMetamask && option.name === 'MetaMask') {\n          return null;\n        }\n      }\n\n      return /*#__PURE__*/React.createElement(Option, {\n        id: `connect-${key}`,\n        key: key,\n        clickable: false,\n        color: option.color,\n        header: option.name,\n        subheader: option.description,\n        icon: require('../../assets/images/' + option.iconName),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }\n      });\n    }\n\n    return null;\n  }));\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/components/WalletModal/PendingView.tsx"],"names":["React","styled","Option","SUPPORTED_WALLETS","injected","darken","Loader","useTranslation","PendingSection","div","theme","flexColumnNoWrap","StyledLoader","LoadingMessage","flexRowNoWrap","error","red1","text4","ErrorGroup","ErrorButton","text1","bg4","LoadingWrapper","PendingView","connector","setPendingError","tryActivation","isMetamask","window","ethereum","isMetaMask","t","Object","keys","map","key","option","name","color","description","require","iconName"],"mappings":"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","sourcesContent":["import { AbstractConnector } from '@web3-react/abstract-connector'\nimport React from 'react'\nimport styled from 'styled-components'\nimport Option from './Option'\nimport { SUPPORTED_WALLETS } from '../../constants'\nimport { injected } from '../../connectors'\nimport { darken } from 'polished'\nimport Loader from '../Loader'\nimport { useTranslation } from 'react-i18next'\n\nconst PendingSection = styled.div`\n  ${({ theme }) => theme.flexColumnNoWrap};\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  & > * {\n    width: 100%;\n  }\n`\n\nconst StyledLoader = styled(Loader)`\n  margin-right: 1rem;\n`\n\nconst LoadingMessage = styled.div<{ error?: boolean }>`\n  ${({ theme }) => theme.flexRowNoWrap};\n  align-items: center;\n  justify-content: flex-start;\n  border-radius: 12px;\n  margin-bottom: 20px;\n  color: ${({ theme, error }) => (error ? theme.red1 : 'inherit')};\n  border: 1px solid ${({ theme, error }) => (error ? theme.red1 : theme.text4)};\n\n  & > * {\n    padding: 1rem;\n  }\n`\n\nconst ErrorGroup = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  align-items: center;\n  justify-content: flex-start;\n`\n\nconst ErrorButton = styled.div`\n  border-radius: 8px;\n  font-size: 12px;\n  color: ${({ theme }) => theme.text1};\n  background-color: ${({ theme }) => theme.bg4};\n  margin-left: 1rem;\n  padding: 0.5rem;\n  font-weight: 600;\n  user-select: none;\n\n  &:hover {\n    cursor: pointer;\n    background-color: ${({ theme }) => darken(0.1, theme.text4)};\n  }\n`\n\nconst LoadingWrapper = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  align-items: center;\n  justify-content: center;\n`\n\nexport default function PendingView({\n  connector,\n  error = false,\n  setPendingError,\n  tryActivation\n}: {\n  connector?: AbstractConnector\n  error?: boolean\n  setPendingError: (error: boolean) => void\n  tryActivation: (connector: AbstractConnector) => void\n}) {\n  const isMetamask = window?.ethereum?.isMetaMask\n  const { t } = useTranslation()\n\n  return (\n    <PendingSection>\n      <LoadingMessage error={error}>\n        <LoadingWrapper>\n          {error ? (\n            <ErrorGroup>\n              <div>{t('walletModal.errorConnecting')}.</div>\n              <ErrorButton\n                onClick={() => {\n                  setPendingError(false)\n                  connector && tryActivation(connector)\n                }}\n              >\n                {t('walletModal.tryAgain')}\n              </ErrorButton>\n            </ErrorGroup>\n          ) : (\n            <>\n              <StyledLoader />\n              {t('walletModal.initializing')}\n            </>\n          )}\n        </LoadingWrapper>\n      </LoadingMessage>\n      {Object.keys(SUPPORTED_WALLETS).map(key => {\n        const option = SUPPORTED_WALLETS[key]\n        if (option.connector === connector) {\n          if (option.connector === injected) {\n            if (isMetamask && option.name !== 'MetaMask') {\n              return null\n            }\n            if (!isMetamask && option.name === 'MetaMask') {\n              return null\n            }\n          }\n          return (\n            <Option\n              id={`connect-${key}`}\n              key={key}\n              clickable={false}\n              color={option.color}\n              header={option.name}\n              subheader={option.description}\n              icon={require('../../assets/images/' + option.iconName)}\n            />\n          )\n        }\n        return null\n      })}\n    </PendingSection>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}