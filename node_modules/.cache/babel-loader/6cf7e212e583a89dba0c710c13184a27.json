{"ast":null,"code":"import { useWeb3React as useWeb3ReactCore } from '@web3-react/core';\nimport { useEffect, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { injected } from '../connectors';\nimport { NetworkContextName } from '../constants';\nexport function useActiveWeb3React() {\n  const context = useWeb3ReactCore();\n  const contextNetwork = useWeb3ReactCore(NetworkContextName);\n  return context.active ? context : contextNetwork;\n}\nexport function useEagerConnect() {\n  const {\n    activate,\n    active\n  } = useWeb3ReactCore(); // specifically using useWeb3ReactCore because of what this hook does\n\n  const [tried, setTried] = useState(false);\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true);\n        });\n      } else {\n        if (isMobile && window.ethereum) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true);\n          });\n        } else {\n          setTried(true);\n        }\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  useEffect(() => {\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n  return tried;\n}\n/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */\n\nexport function useInactiveListener(suppress = false) {\n  const {\n    active,\n    error,\n    activate\n  } = useWeb3ReactCore(); // specifically using useWeb3React because of what this hook does\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch(error => {\n          console.error('Failed to activate after chain changed', error);\n        });\n      };\n\n      const handleAccountsChanged = accounts => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch(error => {\n            console.error('Failed to activate after accounts changed', error);\n          });\n        }\n      };\n\n      ethereum.on('chainChanged', handleChainChanged);\n      ethereum.on('accountsChanged', handleAccountsChanged);\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged);\n          ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        }\n      };\n    }\n\n    return undefined;\n  }, [active, error, suppress, activate]);\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/hooks/index.ts"],"names":["useWeb3React","useWeb3ReactCore","useEffect","useState","isMobile","injected","NetworkContextName","useActiveWeb3React","context","contextNetwork","active","useEagerConnect","activate","tried","setTried","isAuthorized","then","undefined","catch","window","ethereum","useInactiveListener","suppress","error","on","handleChainChanged","console","handleAccountsChanged","accounts","length","removeListener"],"mappings":"AAEA,SAASA,YAAY,IAAIC,gBAAzB,QAAiD,kBAAjD;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,kBAAT,QAAmC,cAAnC;AAEA,OAAO,SAASC,kBAAT,GAA+F;AACpG,QAAMC,OAAO,GAAGP,gBAAgB,EAAhC;AACA,QAAMQ,cAAc,GAAGR,gBAAgB,CAAeK,kBAAf,CAAvC;AACA,SAAOE,OAAO,CAACE,MAAR,GAAiBF,OAAjB,GAA2BC,cAAlC;AACD;AAED,OAAO,SAASE,eAAT,GAA2B;AAChC,QAAM;AAAEC,IAAAA,QAAF;AAAYF,IAAAA;AAAZ,MAAuBT,gBAAgB,EAA7C,CADgC,CACgB;;AAChD,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,QAAQ,CAACU,YAAT,GAAwBC,IAAxB,CAA6BD,YAAY,IAAI;AAC3C,UAAIA,YAAJ,EAAkB;AAChBH,QAAAA,QAAQ,CAACP,QAAD,EAAWY,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA0C,MAAM;AAC9CJ,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,SAFD;AAGD,OAJD,MAIO;AACL,YAAIV,QAAQ,IAAIe,MAAM,CAACC,QAAvB,EAAiC;AAC/BR,UAAAA,QAAQ,CAACP,QAAD,EAAWY,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA0C,MAAM;AAC9CJ,YAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,WAFD;AAGD,SAJD,MAIO;AACLA,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF;AACF,KAdD;AAeD,GAhBQ,EAgBN,CAACF,QAAD,CAhBM,CAAT,CAJgC,CAoBjB;AAEf;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,MAAJ,EAAY;AACVI,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GAJQ,EAIN,CAACJ,MAAD,CAJM,CAAT;AAMA,SAAOG,KAAP;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASQ,mBAAT,CAA6BC,QAAQ,GAAG,KAAxC,EAA+C;AACpD,QAAM;AAAEZ,IAAAA,MAAF;AAAUa,IAAAA,KAAV;AAAiBX,IAAAA;AAAjB,MAA8BX,gBAAgB,EAApD,CADoD,CACG;;AAEvDC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM;AAAEkB,MAAAA;AAAF,QAAeD,MAArB;;AAEA,QAAIC,QAAQ,IAAIA,QAAQ,CAACI,EAArB,IAA2B,CAACd,MAA5B,IAAsC,CAACa,KAAvC,IAAgD,CAACD,QAArD,EAA+D;AAC7D,YAAMG,kBAAkB,GAAG,MAAM;AAC/B;AACAb,QAAAA,QAAQ,CAACP,QAAD,EAAWY,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA0CK,KAAK,IAAI;AACjDG,UAAAA,OAAO,CAACH,KAAR,CAAc,wCAAd,EAAwDA,KAAxD;AACD,SAFD;AAGD,OALD;;AAOA,YAAMI,qBAAqB,GAAIC,QAAD,IAAwB;AACpD,YAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAtB,EAAyB;AACvB;AACAjB,UAAAA,QAAQ,CAACP,QAAD,EAAWY,SAAX,EAAsB,IAAtB,CAAR,CAAoCC,KAApC,CAA0CK,KAAK,IAAI;AACjDG,YAAAA,OAAO,CAACH,KAAR,CAAc,2CAAd,EAA2DA,KAA3D;AACD,WAFD;AAGD;AACF,OAPD;;AASAH,MAAAA,QAAQ,CAACI,EAAT,CAAY,cAAZ,EAA4BC,kBAA5B;AACAL,MAAAA,QAAQ,CAACI,EAAT,CAAY,iBAAZ,EAA+BG,qBAA/B;AAEA,aAAO,MAAM;AACX,YAAIP,QAAQ,CAACU,cAAb,EAA6B;AAC3BV,UAAAA,QAAQ,CAACU,cAAT,CAAwB,cAAxB,EAAwCL,kBAAxC;AACAL,UAAAA,QAAQ,CAACU,cAAT,CAAwB,iBAAxB,EAA2CH,qBAA3C;AACD;AACF,OALD;AAMD;;AACD,WAAOV,SAAP;AACD,GA/BQ,EA+BN,CAACP,MAAD,EAASa,KAAT,EAAgBD,QAAhB,EAA0BV,QAA1B,CA/BM,CAAT;AAgCD","sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\nimport { ChainId } from '@pangolindex/sdk'\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\nimport { useEffect, useState } from 'react'\nimport { isMobile } from 'react-device-detect'\nimport { injected } from '../connectors'\nimport { NetworkContextName } from '../constants'\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> & { chainId?: ChainId } {\n  const context = useWeb3ReactCore<Web3Provider>()\n  const contextNetwork = useWeb3ReactCore<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3ReactCore() // specifically using useWeb3ReactCore because of what this hook does\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then(isAuthorized => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        if (isMobile && window.ethereum) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true)\n          })\n        } else {\n          setTried(true)\n        }\n      }\n    })\n  }, [activate]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (active) {\n      setTried(true)\n    }\n  }, [active])\n\n  return tried\n}\n\n/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3ReactCore() // specifically using useWeb3React because of what this hook does\n\n  useEffect(() => {\n    const { ethereum } = window\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch(error => {\n          console.error('Failed to activate after chain changed', error)\n        })\n      }\n\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch(error => {\n            console.error('Failed to activate after accounts changed', error)\n          })\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n    return undefined\n  }, [active, error, suppress, activate])\n}\n"]},"metadata":{},"sourceType":"module"}