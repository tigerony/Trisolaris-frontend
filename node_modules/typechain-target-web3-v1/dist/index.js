"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts_generator_1 = require("ts-generator");
const path_1 = require("path");
const typechain_1 = require("typechain");
const generation_1 = require("./generation");
const DEFAULT_OUT_PATH = "./types/web3-v1-contracts/";
class Web3V1 extends ts_generator_1.TsGeneratorPlugin {
    constructor(ctx) {
        super(ctx);
        this.name = "Web3-v1";
        const { cwd, rawConfig } = ctx;
        this.outDirAbs = path_1.resolve(cwd, rawConfig.outDir || DEFAULT_OUT_PATH);
    }
    transformFile(file) {
        const abi = typechain_1.extractAbi(file.contents);
        const isEmptyAbi = abi.length === 0;
        if (isEmptyAbi) {
            return;
        }
        const name = typechain_1.getFilename(file.path);
        const contract = typechain_1.parse(abi, name);
        return {
            path: path_1.join(this.outDirAbs, `${name}.d.ts`),
            contents: generation_1.codegen(contract),
        };
    }
    afterRun() {
        return [
            {
                path: path_1.join(this.outDirAbs, "types.d.ts"),
                contents: `
  import BN from "bn.js";
  import { EventLog } from "web3-core/types";
  import { EventEmitter } from "events";
  // @ts-ignore
  import PromiEvent from "web3/promiEvent";

  interface EstimateGasOptions {
    from?: string;
    gas?: number;
    value?: number | string | BN;
  }

  interface EventOptions {
    filter?: object;
    fromBlock?: BlockType;
    topics?: string[];
  }

  export type Callback<T> = (error: Error, result: T) => void;
  export interface TransactionObject<T> {
    arguments: any[];
    call(options?: EstimateGasOptions): Promise<T>;
    send(options?: EstimateGasOptions): PromiEvent<T>;
    estimateGas(options?: EstimateGasOptions): Promise<number>;
    encodeABI(): string;
  }
  export interface ContractEventLog<T> extends EventLog {
    returnValues: T;
  }
  export interface ContractEventEmitter<T> extends EventEmitter {
    on(event: 'connected', listener: (subscriptionId: string) => void): this;
    on(event: "data" | "changed", listener: (event: ContractEventLog<T>) => void): this;
    on(event: "error", listener: (error: Error) => void): this;
  }
  export type ContractEvent<T> = (
    options?: EventOptions,
    cb?: Callback<ContractEventLog<T>>,
  ) => ContractEventEmitter<T>;

  export interface Tx {
    nonce?: string | number;
    chainId?: string | number;
    from?: string;
    to?: string;
    data?: string;
    value?: string | number;
    gas?: string | number;
    gasPrice?: string | number;
  }

  export interface TransactionObject<T> {
    arguments: any[];
    call(tx?: Tx): Promise<T>;
    send(tx?: Tx): PromiEvent<T>;
    estimateGas(tx?: Tx): Promise<number>;
    encodeABI(): string;
  }

  export type BlockType = "latest" | "pending" | "genesis" | number;`,
            },
        ];
    }
}
exports.default = Web3V1;
