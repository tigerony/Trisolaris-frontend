{"ast":null,"code":"var _jsxFileName = \"/Users/sidshekhar/Documents/interface/src/pages/Earn/Migrate.tsx\";\nimport React, { useState } from 'react';\nimport { AutoColumn } from '../../components/Column';\nimport styled from 'styled-components';\nimport { useCurrency } from '../../hooks/Tokens';\nimport { ExternalLink, TYPE } from '../../theme';\nimport { RowBetween } from '../../components/Row';\nimport { CardSection, DataCard } from '../../components/earn/styled';\nimport { ButtonPrimary } from '../../components/Button';\nimport { useStakingInfo } from '../../state/stake/hooks';\nimport { useTokenBalance } from '../../state/wallet/hooks';\nimport { useActiveWeb3React } from '../../hooks';\nimport { PairState, usePair } from '../../data/Reserves';\nimport StakingModal from '../../components/earn/StakingModal';\nimport UnstakingModal from '../../components/earn/UnstakingModal';\nimport Confetti from '../../components/Confetti';\nimport BridgeMigratorModal from '../../components/earn/BridgeMigratorModal';\nimport Loader from '../../components/Loader';\nimport { ChainId, WAVAX } from '@pangolindex/sdk';\nimport { PNG } from '../../constants';\nimport { ErrorText } from '../../components/swap/styleds';\nimport { injected } from '../../connectors';\nconst PageWrapper = styled(AutoColumn)`\n  max-width: 640px;\n  width: 100%;\n`;\nconst StepCard = styled(DataCard)`\n  background: #22242A;\n  overflow: hidden;\n`;\nconst SuccessCard = styled(DataCard)`\n  background: green;\n  overflow: hidden;\n`;\nconst ErrorCard = styled(DataCard)`\n  background: darkred;\n  overflow: hidden;\n`;\nexport default function Migrate({\n  match: {\n    params: {\n      currencyIdFromA,\n      currencyIdFromB,\n      versionFrom,\n      currencyIdToA,\n      currencyIdToB,\n      versionTo\n    }\n  }\n}) {\n  var _useStakingInfo, _useStakingInfo2, _pglFrom$liquidityTok, _pglTo$liquidityToken, _stakingInfoFrom$stak, _stakingInfoFrom$stak2, _stakingInfoFrom$stak3, _pglFrom$token, _pglFrom$token2, _pglFromBalance$toSig, _pglFrom$token3, _pglFrom$token4, _pglTo$token, _pglTo$token2, _pglToBalance$toSigni, _pglTo$token3, _pglTo$token4, _currencyFromA$symbol, _currencyFromB$symbol, _currencyToA$symbol, _currencyToB$symbol;\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const currencyFromA = useCurrency(currencyIdFromA);\n  const currencyFromB = useCurrency(currencyIdFromB);\n  const currencyToA = useCurrency(currencyIdToA);\n  const currencyToB = useCurrency(currencyIdToB);\n  const [pglFromStatus, pglFrom] = usePair(currencyFromA !== null && currencyFromA !== void 0 ? currencyFromA : undefined, currencyFromB !== null && currencyFromB !== void 0 ? currencyFromB : undefined);\n  const [pglToStatus, pglTo] = usePair(currencyToA !== null && currencyToA !== void 0 ? currencyToA : undefined, currencyToB !== null && currencyToB !== void 0 ? currencyToB : undefined);\n  const canZap = (pglFrom === null || pglFrom === void 0 ? void 0 : pglFrom.involvesToken(PNG[ChainId.AVALANCHE])) && (pglTo === null || pglTo === void 0 ? void 0 : pglTo.involvesToken(PNG[ChainId.AVALANCHE])) || (pglFrom === null || pglFrom === void 0 ? void 0 : pglFrom.involvesToken(WAVAX[ChainId.AVALANCHE])) && (pglTo === null || pglTo === void 0 ? void 0 : pglTo.involvesToken(WAVAX[ChainId.AVALANCHE]));\n  const stakingInfoFrom = (_useStakingInfo = useStakingInfo(Number(versionFrom), pglFrom)) === null || _useStakingInfo === void 0 ? void 0 : _useStakingInfo[0];\n  const stakingInfoTo = (_useStakingInfo2 = useStakingInfo(Number(versionTo), pglTo)) === null || _useStakingInfo2 === void 0 ? void 0 : _useStakingInfo2[0];\n  const pglFromBalance = useTokenBalance(account !== null && account !== void 0 ? account : undefined, pglFrom === null || pglFrom === void 0 ? void 0 : pglFrom.liquidityToken);\n  const pglToBalance = useTokenBalance(account !== null && account !== void 0 ? account : undefined, pglTo === null || pglTo === void 0 ? void 0 : pglTo.liquidityToken);\n  const arePairsDifferent = (pglFrom === null || pglFrom === void 0 ? void 0 : (_pglFrom$liquidityTok = pglFrom.liquidityToken) === null || _pglFrom$liquidityTok === void 0 ? void 0 : _pglFrom$liquidityTok.address) !== (pglTo === null || pglTo === void 0 ? void 0 : (_pglTo$liquidityToken = pglTo.liquidityToken) === null || _pglTo$liquidityToken === void 0 ? void 0 : _pglTo$liquidityToken.address); // Step 1: Detect if old LP tokens are staked\n\n  const requiresUnstake = stakingInfoFrom === null || stakingInfoFrom === void 0 ? void 0 : (_stakingInfoFrom$stak = stakingInfoFrom.stakedAmount) === null || _stakingInfoFrom$stak === void 0 ? void 0 : _stakingInfoFrom$stak.greaterThan('0'); // Step 2: Detect if old LP is currently held and cannot be migrated directly to the new staking contract\n\n  const requiresConvert = !requiresUnstake && arePairsDifferent && (pglFromBalance === null || pglFromBalance === void 0 ? void 0 : pglFromBalance.greaterThan('0')); // Step 3: Detect if new LP has been minted and not staked\n\n  const requiresStake = !requiresUnstake && !requiresConvert && !!stakingInfoTo && (pglToBalance === null || pglToBalance === void 0 ? void 0 : pglToBalance.greaterThan('0')); // Detect if all steps have been completed\n\n  const requiresNothing = !!pglFromBalance && !!pglToBalance && !requiresUnstake && !requiresConvert && !requiresStake;\n  const [showStakingModal, setShowStakingModal] = useState(false);\n  const [showMigrateModal, setShowMigrateModal] = useState(false);\n  const [showUnstakingModal, setShowUnstakingModal] = useState(false);\n\n  const addTokenButton = token => {\n    if (!token) return;\n    if (token.equals(PNG[ChainId.AVALANCHE])) return;\n    if (token.equals(WAVAX[ChainId.AVALANCHE])) return;\n    return /*#__PURE__*/React.createElement(ButtonPrimary, {\n      width: '250',\n      onClick: () => {\n        injected.getProvider().then(provider => {\n          provider.request({\n            method: 'wallet_watchAsset',\n            params: {\n              type: 'ERC20',\n              options: {\n                address: token.address,\n                symbol: token.symbol,\n                decimals: token.decimals,\n                image: `https://raw.githubusercontent.com/pangolindex/tokens/main/assets/${token.address}/logo.png`\n              }\n            }\n          }).catch(error => {\n            console.error(error);\n          });\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, \"Add \", token.symbol);\n  };\n\n  return /*#__PURE__*/React.createElement(PageWrapper, {\n    gap: \"lg\",\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    style: {\n      gap: '24px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.mediumHeader, {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, \"Liquidity Migration\")), pglFromStatus === PairState.LOADING || pglToStatus === PairState.LOADING ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }) : pglFromStatus === PairState.EXISTS && pglToStatus === PairState.EXISTS ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StepCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 19\n    }\n  }, \"Step 1. Unstake Pangolin liquidity (PGL)\")), requiresUnstake && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RowBetween, {\n    style: {\n      marginBottom: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontSize: 14,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 23\n    }\n  }, `You are currently staking deprecated PGL tokens. Unstake to continue the migration process`)), /*#__PURE__*/React.createElement(ButtonPrimary, {\n    padding: \"8px\",\n    borderRadius: \"8px\",\n    width: 'fit-content',\n    onClick: () => setShowUnstakingModal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 21\n    }\n  }, `Unstake ${(_stakingInfoFrom$stak2 = stakingInfoFrom === null || stakingInfoFrom === void 0 ? void 0 : (_stakingInfoFrom$stak3 = stakingInfoFrom.stakedAmount) === null || _stakingInfoFrom$stak3 === void 0 ? void 0 : _stakingInfoFrom$stak3.toSignificant(4)) !== null && _stakingInfoFrom$stak2 !== void 0 ? _stakingInfoFrom$stak2 : ''} ${pglFrom === null || pglFrom === void 0 ? void 0 : (_pglFrom$token = pglFrom.token0) === null || _pglFrom$token === void 0 ? void 0 : _pglFrom$token.symbol}-${pglFrom === null || pglFrom === void 0 ? void 0 : (_pglFrom$token2 = pglFrom.token1) === null || _pglFrom$token2 === void 0 ? void 0 : _pglFrom$token2.symbol} liquidity`))))), /*#__PURE__*/React.createElement(StepCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 19\n    }\n  }, \"Step 2. Convert Pangolin liquidity tokens (PGL)\")), requiresConvert && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(RowBetween, {\n    style: {\n      marginBottom: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontSize: 14,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 23\n    }\n  }, `You are currently holding deprecated PGL tokens. Migrate them including the underlying assets they represent to continue the migration process`)), canZap ? /*#__PURE__*/React.createElement(ButtonPrimary, {\n    padding: \"8px\",\n    borderRadius: \"8px\",\n    width: 'fit-content',\n    onClick: () => setShowMigrateModal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 23\n    }\n  }, `Migrate ${(_pglFromBalance$toSig = pglFromBalance === null || pglFromBalance === void 0 ? void 0 : pglFromBalance.toSignificant(4)) !== null && _pglFromBalance$toSig !== void 0 ? _pglFromBalance$toSig : ''} ${pglFrom === null || pglFrom === void 0 ? void 0 : (_pglFrom$token3 = pglFrom.token0) === null || _pglFrom$token3 === void 0 ? void 0 : _pglFrom$token3.symbol}-${pglFrom === null || pglFrom === void 0 ? void 0 : (_pglFrom$token4 = pglFrom.token1) === null || _pglFrom$token4 === void 0 ? void 0 : _pglFrom$token4.symbol} to ${pglTo === null || pglTo === void 0 ? void 0 : (_pglTo$token = pglTo.token0) === null || _pglTo$token === void 0 ? void 0 : _pglTo$token.symbol}-${pglTo === null || pglTo === void 0 ? void 0 : (_pglTo$token2 = pglTo.token1) === null || _pglTo$token2 === void 0 ? void 0 : _pglTo$token2.symbol}`) : /*#__PURE__*/React.createElement(ErrorText, {\n    severity: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 23\n    }\n  }, `Pangolin does not support auto migration of this pair. Please withdraw the PGL and upgrade the tokens at `, /*#__PURE__*/React.createElement(ExternalLink, {\n    href: 'https://bridge.avax.network/convert',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 25\n    }\n  }, \"https://bridge.avax.network/convert\")))))), /*#__PURE__*/React.createElement(StepCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontWeight: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 19\n    }\n  }, \"Step 3. Stake Pangolin liquidity (PGL)\")), requiresStake && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ButtonPrimary, {\n    padding: \"8px\",\n    borderRadius: \"8px\",\n    width: 'fit-content',\n    onClick: () => setShowStakingModal(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 21\n    }\n  }, `Stake ${(_pglToBalance$toSigni = pglToBalance === null || pglToBalance === void 0 ? void 0 : pglToBalance.toSignificant(4)) !== null && _pglToBalance$toSigni !== void 0 ? _pglToBalance$toSigni : ''} ${pglTo === null || pglTo === void 0 ? void 0 : (_pglTo$token3 = pglTo.token0) === null || _pglTo$token3 === void 0 ? void 0 : _pglTo$token3.symbol}-${pglTo === null || pglTo === void 0 ? void 0 : (_pglTo$token4 = pglTo.token1) === null || _pglTo$token4 === void 0 ? void 0 : _pglTo$token4.symbol} liquidity to earn PNG`))))), requiresNothing && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SuccessCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontWeight: 600,\n    textAlign: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 23\n    }\n  }, 'Congratulations you have successfully migrated!'))))), addTokenButton(pglTo === null || pglTo === void 0 ? void 0 : pglTo.token0), addTokenButton(pglTo === null || pglTo === void 0 ? void 0 : pglTo.token1))) : /*#__PURE__*/React.createElement(ErrorCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardSection, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(AutoColumn, {\n    gap: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(RowBetween, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TYPE.white, {\n    fontWeight: 600,\n    textAlign: 'center',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 17\n    }\n  }, `Error finding pairs ${(_currencyFromA$symbol = currencyFromA === null || currencyFromA === void 0 ? void 0 : currencyFromA.symbol) !== null && _currencyFromA$symbol !== void 0 ? _currencyFromA$symbol : '?'}/${(_currencyFromB$symbol = currencyFromB === null || currencyFromB === void 0 ? void 0 : currencyFromB.symbol) !== null && _currencyFromB$symbol !== void 0 ? _currencyFromB$symbol : '?'} and ${(_currencyToA$symbol = currencyToA === null || currencyToA === void 0 ? void 0 : currencyToA.symbol) !== null && _currencyToA$symbol !== void 0 ? _currencyToA$symbol : '?'}/${(_currencyToB$symbol = currencyToB === null || currencyToB === void 0 ? void 0 : currencyToB.symbol) !== null && _currencyToB$symbol !== void 0 ? _currencyToB$symbol : '?'}`))))), /*#__PURE__*/React.createElement(Confetti, {\n    start: requiresNothing && !showMigrateModal && !showStakingModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }\n  }), stakingInfoFrom && /*#__PURE__*/React.createElement(UnstakingModal, {\n    isOpen: showUnstakingModal,\n    onDismiss: () => setShowUnstakingModal(false),\n    stakingInfo: stakingInfoFrom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }\n  }), pglFrom && pglTo && /*#__PURE__*/React.createElement(BridgeMigratorModal, {\n    isOpen: showMigrateModal,\n    onDismiss: () => setShowMigrateModal(false),\n    pairFrom: pglFrom,\n    pairTo: pglTo,\n    userLiquidityUnstaked: pglFromBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }\n  }), stakingInfoTo && /*#__PURE__*/React.createElement(StakingModal, {\n    isOpen: showStakingModal,\n    onDismiss: () => setShowStakingModal(false),\n    stakingInfo: stakingInfoTo,\n    userLiquidityUnstaked: pglToBalance,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/pages/Earn/Migrate.tsx"],"names":["React","useState","AutoColumn","styled","useCurrency","ExternalLink","TYPE","RowBetween","CardSection","DataCard","ButtonPrimary","useStakingInfo","useTokenBalance","useActiveWeb3React","PairState","usePair","StakingModal","UnstakingModal","Confetti","BridgeMigratorModal","Loader","ChainId","WAVAX","PNG","ErrorText","injected","PageWrapper","StepCard","SuccessCard","ErrorCard","Migrate","match","params","currencyIdFromA","currencyIdFromB","versionFrom","currencyIdToA","currencyIdToB","versionTo","account","currencyFromA","currencyFromB","currencyToA","currencyToB","pglFromStatus","pglFrom","undefined","pglToStatus","pglTo","canZap","involvesToken","AVALANCHE","stakingInfoFrom","Number","stakingInfoTo","pglFromBalance","liquidityToken","pglToBalance","arePairsDifferent","address","requiresUnstake","stakedAmount","greaterThan","requiresConvert","requiresStake","requiresNothing","showStakingModal","setShowStakingModal","showMigrateModal","setShowMigrateModal","showUnstakingModal","setShowUnstakingModal","addTokenButton","token","equals","getProvider","then","provider","request","method","type","options","symbol","decimals","image","catch","error","console","gap","margin","LOADING","EXISTS","marginBottom","toSignificant","token0","token1"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { AutoColumn } from '../../components/Column'\nimport styled from 'styled-components'\n\nimport { RouteComponentProps } from 'react-router-dom'\nimport { useCurrency } from '../../hooks/Tokens'\nimport { ExternalLink, TYPE } from '../../theme'\n\nimport { RowBetween } from '../../components/Row'\nimport { CardSection, DataCard } from '../../components/earn/styled'\nimport { ButtonPrimary } from '../../components/Button'\nimport { useStakingInfo } from '../../state/stake/hooks'\nimport { useTokenBalance } from '../../state/wallet/hooks'\nimport { useActiveWeb3React } from '../../hooks'\n\nimport { PairState, usePair } from '../../data/Reserves'\nimport StakingModal from '../../components/earn/StakingModal'\nimport UnstakingModal from '../../components/earn/UnstakingModal'\nimport Confetti from '../../components/Confetti'\nimport BridgeMigratorModal from '../../components/earn/BridgeMigratorModal'\nimport Loader from '../../components/Loader'\nimport { ChainId, Token, WAVAX } from '@pangolindex/sdk'\nimport { PNG } from '../../constants'\nimport { ErrorText } from '../../components/swap/styleds'\nimport { injected } from '../../connectors'\n\nconst PageWrapper = styled(AutoColumn)`\n  max-width: 640px;\n  width: 100%;\n`\n\nconst StepCard = styled(DataCard)`\n  background: #22242A;\n  overflow: hidden;\n`\n\nconst SuccessCard = styled(DataCard)`\n  background: green;\n  overflow: hidden;\n`\n\nconst ErrorCard = styled(DataCard)`\n  background: darkred;\n  overflow: hidden;\n`\n\nexport default function Migrate({\n  match: {\n    params: {\n      currencyIdFromA,\n      currencyIdFromB,\n      versionFrom,\n      currencyIdToA,\n      currencyIdToB,\n      versionTo\n    }\n  }\n}: RouteComponentProps<{\n  currencyIdFromA: string;\n  currencyIdFromB: string;\n  versionFrom: string;\n  currencyIdToA: string;\n  currencyIdToB: string;\n  versionTo: string;\n}>) {\n  const { account } = useActiveWeb3React()\n\n  const currencyFromA = useCurrency(currencyIdFromA)\n  const currencyFromB = useCurrency(currencyIdFromB)\n  const currencyToA = useCurrency(currencyIdToA)\n  const currencyToB = useCurrency(currencyIdToB)\n\n  const [pglFromStatus, pglFrom] = usePair(currencyFromA ?? undefined, currencyFromB ?? undefined)\n  const [pglToStatus, pglTo] = usePair(currencyToA ?? undefined, currencyToB ?? undefined)\n\n  const canZap = (pglFrom?.involvesToken(PNG[ChainId.AVALANCHE]) && pglTo?.involvesToken(PNG[ChainId.AVALANCHE]))\n    || (pglFrom?.involvesToken(WAVAX[ChainId.AVALANCHE]) && pglTo?.involvesToken(WAVAX[ChainId.AVALANCHE]))\n\n  const stakingInfoFrom = useStakingInfo(Number(versionFrom), pglFrom)?.[0]\n  const stakingInfoTo = useStakingInfo(Number(versionTo), pglTo)?.[0]\n\n  const pglFromBalance = useTokenBalance(account ?? undefined, pglFrom?.liquidityToken)\n  const pglToBalance = useTokenBalance(account ?? undefined, pglTo?.liquidityToken)\n\n  const arePairsDifferent = pglFrom?.liquidityToken?.address !== pglTo?.liquidityToken?.address\n\n  // Step 1: Detect if old LP tokens are staked\n  const requiresUnstake = stakingInfoFrom?.stakedAmount?.greaterThan('0')\n\n  // Step 2: Detect if old LP is currently held and cannot be migrated directly to the new staking contract\n  const requiresConvert = (!requiresUnstake)\n    && arePairsDifferent\n    && pglFromBalance?.greaterThan('0')\n\n  // Step 3: Detect if new LP has been minted and not staked\n  const requiresStake = (!requiresUnstake && !requiresConvert)\n    && !!stakingInfoTo\n    && pglToBalance?.greaterThan('0')\n\n  // Detect if all steps have been completed\n  const requiresNothing = !!pglFromBalance && !!pglToBalance && !requiresUnstake && !requiresConvert && !requiresStake\n\n  const [showStakingModal, setShowStakingModal] = useState(false)\n  const [showMigrateModal, setShowMigrateModal] = useState(false)\n  const [showUnstakingModal, setShowUnstakingModal] = useState(false)\n\n  const addTokenButton = (token: Token | undefined) => {\n    if (!token) return\n    if (token.equals(PNG[ChainId.AVALANCHE])) return\n    if (token.equals(WAVAX[ChainId.AVALANCHE])) return\n    return (\n      <ButtonPrimary\n        width={'250'}\n        onClick={() => {\n          injected.getProvider().then(provider => {\n            provider\n              .request({\n                method: 'wallet_watchAsset',\n                params: {\n                  type: 'ERC20',\n                  options: {\n                    address: token.address,\n                    symbol: token.symbol,\n                    decimals: token.decimals,\n                    image: `https://raw.githubusercontent.com/pangolindex/tokens/main/assets/${token.address}/logo.png`,\n                  },\n                }\n              })\n              .catch((error: any) => {\n                console.error(error)\n              })\n          })\n        }}\n      >\n        Add {token.symbol}\n      </ButtonPrimary>\n    )\n  }\n\n  return (\n    <PageWrapper gap=\"lg\" justify=\"center\">\n      <RowBetween style={{ gap: '24px' }}>\n        <TYPE.mediumHeader style={{ margin: 0 }}>\n          Liquidity Migration\n        </TYPE.mediumHeader>\n      </RowBetween>\n\n      {(pglFromStatus === PairState.LOADING || pglToStatus === PairState.LOADING) ? (\n        <Loader />\n      ) : (pglFromStatus === PairState.EXISTS && pglToStatus === PairState.EXISTS) ? (\n        <>\n          <StepCard>\n            <CardSection>\n              <AutoColumn gap=\"md\">\n                <RowBetween>\n                  <TYPE.white fontWeight={600}>Step 1. Unstake Pangolin liquidity (PGL)</TYPE.white>\n                </RowBetween>\n                {(requiresUnstake) && (\n                  <>\n                    <RowBetween style={{ marginBottom: '1rem' }}>\n                      <TYPE.white fontSize={14}>\n                        {`You are currently staking deprecated PGL tokens. Unstake to continue the migration process`}\n                      </TYPE.white>\n                    </RowBetween>\n                    <ButtonPrimary\n                      padding=\"8px\"\n                      borderRadius=\"8px\"\n                      width={'fit-content'}\n                      onClick={() => setShowUnstakingModal(true)}\n                    >\n                      {`Unstake ${stakingInfoFrom?.stakedAmount?.toSignificant(4) ?? ''} ${pglFrom?.token0?.symbol}-${pglFrom?.token1?.symbol} liquidity`}\n                    </ButtonPrimary>\n                  </>\n                )}\n              </AutoColumn>\n            </CardSection>\n          </StepCard>\n\n          <StepCard>\n            <CardSection>\n              <AutoColumn gap=\"md\">\n                <RowBetween>\n                  <TYPE.white fontWeight={600}>Step 2. Convert Pangolin liquidity tokens (PGL)</TYPE.white>\n                </RowBetween>\n                {(requiresConvert) && (\n                  <>\n                    <RowBetween style={{ marginBottom: '1rem' }}>\n                      <TYPE.white fontSize={14}>\n                        {`You are currently holding deprecated PGL tokens. Migrate them including the underlying assets they represent to continue the migration process`}\n                      </TYPE.white>\n                    </RowBetween>\n                    {(canZap) ? (\n                      <ButtonPrimary\n                        padding=\"8px\"\n                        borderRadius=\"8px\"\n                        width={'fit-content'}\n                        onClick={() => setShowMigrateModal(true)}\n                      >\n                        {`Migrate ${pglFromBalance?.toSignificant(4) ?? ''} ${pglFrom?.token0?.symbol}-${pglFrom?.token1?.symbol} to ${pglTo?.token0?.symbol}-${pglTo?.token1?.symbol}`}\n                      </ButtonPrimary>\n                    ) : (\n                      <ErrorText severity={2}>\n                        {`Pangolin does not support auto migration of this pair. Please withdraw the PGL and upgrade the tokens at `}\n                        <ExternalLink href={'https://bridge.avax.network/convert'}>\n                          https://bridge.avax.network/convert\n                        </ExternalLink>\n                      </ErrorText>\n                    )}\n                  </>\n                )}\n              </AutoColumn>\n            </CardSection>\n          </StepCard>\n\n          <StepCard>\n            <CardSection>\n              <AutoColumn gap=\"md\">\n                <RowBetween>\n                  <TYPE.white fontWeight={600}>Step 3. Stake Pangolin liquidity (PGL)</TYPE.white>\n                </RowBetween>\n                {(requiresStake) && (\n                  <>\n                    <ButtonPrimary\n                      padding=\"8px\"\n                      borderRadius=\"8px\"\n                      width={'fit-content'}\n                      onClick={() => setShowStakingModal(true)}\n                    >\n                      {`Stake ${pglToBalance?.toSignificant(4) ?? ''} ${pglTo?.token0?.symbol}-${pglTo?.token1?.symbol} liquidity to earn PNG`}\n                    </ButtonPrimary>\n                  </>\n                )}\n              </AutoColumn>\n            </CardSection>\n          </StepCard>\n\n          {(requiresNothing) && (\n            <>\n              <SuccessCard>\n                <CardSection>\n                  <AutoColumn gap=\"md\">\n                    <RowBetween>\n                      <TYPE.white fontWeight={600} textAlign={'center'}>\n                        {'Congratulations you have successfully migrated!'}\n                      </TYPE.white>\n                    </RowBetween>\n                  </AutoColumn>\n                </CardSection>\n              </SuccessCard>\n              {addTokenButton(pglTo?.token0)}\n              {addTokenButton(pglTo?.token1)}\n            </>\n          )}\n        </>\n      ) : (\n        <ErrorCard>\n          <CardSection>\n            <AutoColumn gap=\"md\">\n              <RowBetween>\n                <TYPE.white fontWeight={600} textAlign={'center'}>\n                  {`Error finding pairs ${currencyFromA?.symbol ?? '?'}/${currencyFromB?.symbol ?? '?'} and ${currencyToA?.symbol ?? '?'}/${currencyToB?.symbol ?? '?'}`}\n                </TYPE.white>\n              </RowBetween>\n            </AutoColumn>\n          </CardSection>\n        </ErrorCard>\n      )}\n\n      <Confetti start={requiresNothing && !showMigrateModal && !showStakingModal} />\n\n      {stakingInfoFrom && (\n        <UnstakingModal\n          isOpen={showUnstakingModal}\n          onDismiss={() => setShowUnstakingModal(false)}\n          stakingInfo={stakingInfoFrom}\n        />\n      )}\n\n      {(pglFrom && pglTo) && (\n        <BridgeMigratorModal\n          isOpen={showMigrateModal}\n          onDismiss={() => setShowMigrateModal(false)}\n          pairFrom={pglFrom}\n          pairTo={pglTo}\n          userLiquidityUnstaked={pglFromBalance}\n        />\n      )}\n\n      {stakingInfoTo && (\n        <StakingModal\n          isOpen={showStakingModal}\n          onDismiss={() => setShowStakingModal(false)}\n          stakingInfo={stakingInfoTo}\n          userLiquidityUnstaked={pglToBalance}\n        />\n      )}\n\n    </PageWrapper>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}