{"ast":null,"code":"import { JSBI, Percent, TokenAmount } from '@pangolindex/sdk';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { usePair } from '../../data/Reserves';\nimport { useTotalSupply } from '../../data/TotalSupply';\nimport { useActiveWeb3React } from '../../hooks';\nimport { wrappedCurrency } from '../../utils/wrappedCurrency';\nimport { tryParseAmount } from '../swap/hooks';\nimport { useTokenBalances } from '../wallet/hooks';\nimport { Field, typeInput } from './actions';\nimport { useTranslation } from 'react-i18next';\nexport function useBurnState() {\n  return useSelector(state => state.burn);\n}\nexport function useDerivedBurnInfo(currencyA, currencyB) {\n  var _pair$liquidityToken$, _pair$liquidityToken;\n\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const {\n    t\n  } = useTranslation();\n  const {\n    independentField,\n    typedValue\n  } = useBurnState(); // pair + totalsupply\n\n  const [, pair] = usePair(currencyA, currencyB); // balances\n\n  const relevantTokenBalances = useTokenBalances(account !== null && account !== void 0 ? account : undefined, [pair === null || pair === void 0 ? void 0 : pair.liquidityToken]);\n  const userLiquidity = relevantTokenBalances === null || relevantTokenBalances === void 0 ? void 0 : relevantTokenBalances[(_pair$liquidityToken$ = pair === null || pair === void 0 ? void 0 : (_pair$liquidityToken = pair.liquidityToken) === null || _pair$liquidityToken === void 0 ? void 0 : _pair$liquidityToken.address) !== null && _pair$liquidityToken$ !== void 0 ? _pair$liquidityToken$ : ''];\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)];\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair === null || pair === void 0 ? void 0 : pair.liquidityToken\n  }; // liquidity values\n\n  const totalSupply = useTotalSupply(pair === null || pair === void 0 ? void 0 : pair.liquidityToken);\n  const liquidityValueA = pair && totalSupply && userLiquidity && tokenA && // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw) ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw) : undefined;\n  const liquidityValueB = pair && totalSupply && userLiquidity && tokenB && // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw) ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw) : undefined;\n  const liquidityValues = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB\n  };\n  let percentToRemove = new Percent('0', '100'); // user specified a %\n\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100');\n  } // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n      if (pair === null || pair === void 0 ? void 0 : pair.liquidityToken) {\n        const independentAmount = tryParseAmount(typedValue, pair.liquidityToken);\n\n        if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n          percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw);\n        }\n      }\n    } // user specified a specific amount of token a or b\n    else {\n        if (tokens[independentField]) {\n          const independentAmount = tryParseAmount(typedValue, tokens[independentField]);\n          const liquidityValue = liquidityValues[independentField];\n\n          if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n            percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw);\n          }\n        }\n      }\n\n  const parsedAmounts = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]: userLiquidity && percentToRemove && percentToRemove.greaterThan('0') ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient) : undefined,\n    [Field.CURRENCY_A]: tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient) : undefined,\n    [Field.CURRENCY_B]: tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient) : undefined\n  };\n  let error;\n\n  if (!account) {\n    error = t('burnHooks.connectWallet');\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    var _error;\n\n    error = (_error = error) !== null && _error !== void 0 ? _error : t('burnHooks.enterAmount');\n  }\n\n  return {\n    pair,\n    parsedAmounts,\n    error\n  };\n}\nexport function useBurnActionHandlers() {\n  const dispatch = useDispatch();\n  const onUserInput = useCallback((field, typedValue) => {\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  return {\n    onUserInput\n  };\n}","map":{"version":3,"sources":["/Users/sidshekhar/Documents/interface/src/state/burn/hooks.ts"],"names":["JSBI","Percent","TokenAmount","useCallback","useDispatch","useSelector","usePair","useTotalSupply","useActiveWeb3React","wrappedCurrency","tryParseAmount","useTokenBalances","Field","typeInput","useTranslation","useBurnState","state","burn","useDerivedBurnInfo","currencyA","currencyB","account","chainId","t","independentField","typedValue","pair","relevantTokenBalances","undefined","liquidityToken","userLiquidity","address","tokenA","tokenB","tokens","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","liquidityValueA","greaterThanOrEqual","raw","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","LIQUIDITY_PERCENT","independentAmount","greaterThan","liquidityValue","parsedAmounts","token","multiply","quotient","error","useBurnActionHandlers","dispatch","onUserInput","field"],"mappings":"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","sourcesContent":["import { Currency, CurrencyAmount, JSBI, Pair, Percent, TokenAmount } from '@pangolindex/sdk'\nimport { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { usePair } from '../../data/Reserves'\nimport { useTotalSupply } from '../../data/TotalSupply'\n\nimport { useActiveWeb3React } from '../../hooks'\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\nimport { AppDispatch, AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useTokenBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\nimport { useTranslation } from 'react-i18next'\n\nexport function useBurnState(): AppState['burn'] {\n  return useSelector<AppState, AppState['burn']>(state => state.burn)\n}\n\nexport function useDerivedBurnInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined\n): {\n  pair?: Pair | null\n  parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: TokenAmount\n    [Field.CURRENCY_A]?: CurrencyAmount\n    [Field.CURRENCY_B]?: CurrencyAmount\n  }\n  error?: string\n} {\n  const { account, chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  const { independentField, typedValue } = useBurnState()\n\n  // pair + totalsupply\n  const [, pair] = usePair(currencyA, currencyB)\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\n  const userLiquidity: undefined | TokenAmount = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\n\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair?.liquidityToken\n  }\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n  const liquidityValueA =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenA &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw)\n      : undefined\n  const liquidityValueB =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenB &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw)\n      : undefined\n  const liquidityValues: { [Field.CURRENCY_A]?: TokenAmount; [Field.CURRENCY_B]?: TokenAmount } = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB\n  }\n\n  let percentToRemove: Percent = new Percent('0', '100')\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100')\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair?.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw)\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else {\n    if (tokens[independentField]) {\n      const independentAmount = tryParseAmount(typedValue, tokens[independentField])\n      const liquidityValue = liquidityValues[independentField]\n      if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n        percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw)\n      }\n    }\n  }\n\n  const parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: TokenAmount\n    [Field.CURRENCY_A]?: TokenAmount\n    [Field.CURRENCY_B]?: TokenAmount\n  } = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]:\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\n        ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient)\n        : undefined,\n    [Field.CURRENCY_A]:\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\n        ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient)\n        : undefined,\n    [Field.CURRENCY_B]:\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\n        ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient)\n        : undefined\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = t('burnHooks.connectWallet')\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? t('burnHooks.enterAmount')\n  }\n\n  return { pair, parsedAmounts, error }\n}\n\nexport function useBurnActionHandlers(): {\n  onUserInput: (field: Field, typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onUserInput\n  }\n}\n"]},"metadata":{},"sourceType":"module"}